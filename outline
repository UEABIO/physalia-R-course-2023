
HUGE DATAFRAMES
SIMULATIONS
MAPS???



https://bookdown.org/rdpeng/rprogdatascience/
General programming???

Slides - https://www.apreshill.com/blog/2021-07-revealing-research/

# 1. Foundations of programming in R: This session serves as an excellent starting point, covering the fundamentals of R programming. Introducing object classes, coding practices, control flow, and writing functions provides a solid foundation for the rest of the course.

crash course: https://rwithoutstatistics.com/

https://bookdown.org/rdpeng/rprogdatascience/ - this book has LOADS of GOOD STUFF!

http://modern-rstats.eu/ - good loop and maps chapter

https://advanced-r-solutions.rbind.io/functionals.html

Simple debugging: https://uopsych-r-bootcamp-2020.netlify.app/post/03-functions/

Complex debugging: https://rstats.wtf/debugging-r


- Basic R - nuts and bolts,
- Reading data in and out,
- Subsetting
- Debugging - reprex??? https://github.com/luisDVA/physalia-gtmoR-course
- Managing dataframes - dplyr, Basic tidyverse
- IMPROVING R CODE - Exercises????
- BONUS - exploratory data analysis

- Control structures
- Functions?

Brief overview of R and its applications in data analysis and programming.
Introduction to RStudio as an integrated development environment (IDE) for R.
Navigating the RStudio interface: scripts, console, environment, and plots.
Objects, Variables, and Data Types (1 hour)

Understanding the concept of objects in R: vectors, matrices, data frames, lists.
Assigning values to variables and creating different data types.
Basic operations with objects: arithmetic, indexing, and subsetting.
Good Coding Practices and Style (1 hour)

Importance of clean and readable code.
Naming conventions for variables, functions, and objects.
Indentation, spacing, and commenting for code clarity.
TIDYVERSE STYLE GUIDE

Control Flow: If-Else Statements (1 hour)

Introduction to control structures for conditional execution.
Writing if-else statements for decision-making in code.
Handling multiple conditions using nested if-else statements.
Writing Functions in R (1 hour)

Understanding the role and benefits of functions in programming.
Creating custom functions using the function() keyword.
Passing arguments to functions and returning values.
Best practices for function design and documentation.
Hands-On Exercises and Practice (30 minutes)

Interactive coding exercises to reinforce concepts learned.
Applying if-else statements and writing basic functions.
Encouraging participants to practice coding in RStudio.
Summary and Q&A (30 minutes)



# 2. Functional programming in R: Functional programming is an important concept, and it's great that you're dedicating a session to it. Covering loops, apply functions, and other functional programming principles will help participants write more efficient and concise code.

Good simple intro: https://github.com/tomjemmett/nhs-r_conf_21-fp_workshop

https://modern-rstats.eu/defining-your-own-functions.html

?? https://advanced-r-solutions.rbind.io/functionals.html

Wickham: 
https://dcl-prog.stanford.edu/

Intro to purrr: https://d-rug.github.io/images/20171026/20171023_DRUG_map_walk.html#1

Purrr and error work
https://github.com/luisDVA/physalia-gtmoR-course

https://www.r4epi.com/introduction-to-repeated-operations

Faster loops: https://bookdown.org/content/d1e53ac9-28ce-472f-bc2c-f499f18264a3/speedtips.html

Simulations: https://rstudio-education.github.io/hopr/

https://aosmith.rbind.io/2018/01/09/simulate-simulate-part1/#simulate-simulate-dance-to-the-music

https://aosmith.rbind.io/2019/07/22/automate-model-fitting-with-loops/

https://aosmith.rbind.io/2017/12/31/many-datasets/#list-all-files-to-read-in


# 3. Getting the most out of tidyverse: Exploring the Tidyverse is a valuable part of any R course. Since Tidyverse is widely used for data manipulation and analysis, this session will provide participants with practical skills they can directly apply.

- Functions in the tidyverse

https://mskcc-epi-bio.github.io/Writing-Functions-with-the-tidyverse/#1

https://nrennie.rbind.io/blog/script-templates-r/

Beginner to advanced - pdf

# 4. Figures and Tables: Data visualization is crucial, and dedicating a session to creating high-quality figures and tables is a great idea. Make sure to cover various visualization techniques and perhaps touch on packages like ggplot2 for advanced visualizations.

https://rwithoutstatistics.com/
https://gt.albert-rapp.de/

Annotations: https://ggplot2-book.org/annotations.html

gt tables into pdf: https://www.pipinghotdata.com/posts/2022-01-24-report-ready-pdf-tables-with-rmarkdown-knitr-kableextra-and-latex/

ggplot graphic design! https://rstudio-conf-2022.github.io/ggplot2-graphic-design/

https://allancameron.github.io/geomtextpath/

ggridges! 

Coloured titles! 

Easy annotation

gghiglight

functions! 

maps! 

ggplot tips: https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages.html


# 5. Working with Shiny: Shiny is a powerful tool for creating interactive web applications, and introducing it in the course is a good decision. Building Shiny dashboards aligns with the intermediate level and will give participants a practical project to work on.

https://ourcodingclub.github.io/tutorials/shiny/

https://psyteachr.github.io/shiny-tutorials/

https://debruine.github.io/shinyintro/first-app.html

https://albert-rapp.de/posts/15_use_js_with_shiny/15_use_js_with_shiny.html

https://albert-rapp.de/posts/06_shiny_app_learnings/06_shiny_app_learnings

Shinyjs: https://deanattali.com/shinyjs/example

Shiny modules - https://rviews.rstudio.com/2021/10/20/a-beginner-s-guide-to-shiny-modules/

# 6. Reports: Generating reports is an essential skill for data analysts and researchers. Covering reporting packages and customization will empower participants to present their findings effectively.

https://rwithoutstatistics.com/ - parameterised reports and quarto

https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/

https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/

Rmarkdown tips? Do they work with Quarto: https://posit.co/blog/r-markdown-tips-tricks-4-looks-better-works-better/

R for the rest of us chapter

# 7. Github: Version control and collaboration are critical skills, especially in a professional environment. This session will equip participants with the basics of using Github, which is essential for teamwork and code management.

https://raps-with-r.dev/git.html

https://eliocamp.github.io/reproducibility-with-r/materials/day2/02-git/

https://github.com/brendanhcullen/git-tutorial

https://intro2r.com/use_git.html

## Session 1: Foundations of Programming in R

Introduction to R and RStudio (30 minutes)

Brief overview of R and its applications in data analysis and programming.
Introduction to RStudio as an integrated development environment (IDE) for R.
Navigating the RStudio interface: scripts, console, environment, and plots.
Objects, Variables, and Data Types (1 hour)

Understanding the concept of objects in R: vectors, matrices, data frames, lists.
Assigning values to variables and creating different data types.
Basic operations with objects: arithmetic, indexing, and subsetting.
Good Coding Practices and Style (1 hour)

Importance of clean and readable code.
Naming conventions for variables, functions, and objects.
Indentation, spacing, and commenting for code clarity.
Introduction to linting tools for code style checking.
Control Flow: If-Else Statements (1 hour)

Introduction to control structures for conditional execution.
Writing if-else statements for decision-making in code.
Handling multiple conditions using nested if-else statements.
Writing Functions in R (1 hour)

Understanding the role and benefits of functions in programming.
Creating custom functions using the function() keyword.
Passing arguments to functions and returning values.
Best practices for function design and documentation.
Hands-On Exercises and Practice (30 minutes)

Interactive coding exercises to reinforce concepts learned.
Applying if-else statements and writing basic functions.
Encouraging participants to practice coding in RStudio.
Summary and Q&A (30 minutes)

Reviewing the key concepts covered in Session 1.
Addressing participant questions and clarifications.
By the end of Session 1, participants should have a solid understanding of fundamental programming concepts in R, including variables, data types, control flow, and function creation. They will also be equipped with good coding practices that will set the foundation for writing clean and maintainable code throughout the course. The hands-on exercises will allow them to apply what they've learned and gain practical experience in R programming.

## Session 2: Functional Programming in R

Introduction to Functional Programming (30 minutes)

Understanding the principles of functional programming.
Contrasting imperative programming with functional programming.
Benefits of functional programming for code readability and maintainability.
For-Loops in R (1 hour)

Introducing the concept of loops for repetitive tasks.
Writing for-loops for iterating over sequences.
Applying loops for tasks like data transformation and calculations.
Discussing scenarios where for-loops are appropriate.
Apply Functions: lapply, sapply, and More (1 hour)

Introduction to apply family functions for iteration.
Understanding lapply() for applying functions to lists.
Using sapply() for simplifying the output of apply functions.
Comparing lapply() and sapply() with for-loops.
Map Functions with purrr Package (1 hour)

Introducing the purrr package for functional programming.
Using map functions (map(), map_lgl(), map_int(), etc.).
Applying map functions to data structures like lists and data frames.
Leveraging the power of functional programming with purrr.
Other Functional Programming Concepts (1 hour)

Chaining operations with the %>% operator (pipe).
Introducing anonymous functions (lambda functions).
Utilizing functionals and custom functions for advanced tasks.
Discussing the advantages of a functional programming approach.
Hands-On Exercises and Practice (30 minutes)

Practical exercises involving for-loops, apply functions, and purrr.
Applying functional programming techniques to real-world examples.
Encouraging participants to practice writing functional code.
Summary and Q&A (30 minutes)

Reviewing the key concepts covered in Session 2.
Addressing participant questions and clarifications.

### Debugging here?

https://data-flair.training/blogs/debugging-in-r-programming/
https://www.geeksforgeeks.org/debugging-in-r-programming/


## Session 3 Tidyverse

Review of Tidyverse Basics (30 minutes)

Quick recap of the key components of the Tidyverse ecosystem.
Emphasizing the principles of tidy data and data manipulation.
Working with Multiple Files and Datasets (1 hour)

Reading data from various file formats (CSV, Excel, etc.).
Combining datasets using functions like bind_rows() and bind_cols().
Merging data with inner_join(), left_join(), and other functions.
Improving Data Manipulation with Data Frames (1 hour)

Exploring advanced data manipulation techniques using dplyr.
Applying complex filtering and transformation using pipes (%>%).
Grouping and summarizing data with group_by() and summarize().
Writing Functions in the Tidyverse Style (1 hour)

Understanding the Tidyverse's consistent syntax and style.
Writing functions using the tidy evaluation framework (quo, !!).
Creating custom functions that integrate seamlessly with the Tidyverse.






## Lists of help and support

Primers: https://posit.cloud/learn/primers/1.2 # functional programming

https://dcl-prog.stanford.edu/index.html

# https://www.tidyverse.org/blog/2023/08/teach-tidyverse-23/

http://modern-rstats.eu/
https://rstudio-education.github.io/hopr/
https://bookdown.org/rdpeng/rprogdatascience/debugging.html
https://rstats.wtf/debugging-r
https://www.r4epi.com/appendix-a-glossary
https://jhudatascience.org/tidyversecourse/wrangle-data.html#functional-programming

## git https://bcullen.rbind.io/courses/workshops/
https://github.com/uopsych/summeR-bootcamp-2020
https://uopsych-r-bootcamp-2020.netlify.app/#schedule

https://book.rwithoutstatistics.com/tables-chapter # tables, parameter reports

https://raps-with-r.dev/part1_conclusion.html # git, functional, literate

https://d-rug.github.io/images/20171026/20171023_DRUG_map_walk.html#1 # presentation function, map, walk

https://mskcc-epi-bio.github.io/Writing-Functions-with-the-tidyverse/#1

https://gt.albert-rapp.de/ # tables

https://psyteachr.github.io/shiny-tutorials/ # shiny


## future work?
https://mdsr-book.github.io/mdsr2e/
##

## https://advanced-r-solutions.rbind.io/functionals.html
