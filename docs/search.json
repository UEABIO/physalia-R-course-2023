[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"course introduce scientists practitioners interested applying statistical approaches daily routine using R working environment. Participants introduced R R Studio learning perform common statistical analyses. short introduction R principles, focus questions addressed using common statistical analyses, descriptive statistics statistical inference.","code":""},{"path":"index.html","id":"learning-outcomes","chapter":"Overview","heading":"0.1 Learning outcomes","text":"Understand read, interpret write scripts R.Understand read, interpret write scripts R.Learn statistical tools address common questions research activities.Learn statistical tools address common questions research activities.introduction efficient, readable reproducible analysesAn introduction efficient, readable reproducible analysesBeing comfortable using R performing descriptive inferential statistics.comfortable using R performing descriptive inferential statistics.","code":""},{"path":"index.html","id":"packages","chapter":"Overview","heading":"0.2 Packages","text":"","code":"\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(rstatix)\nlibrary(performance)\nlibrary(see)\nlibrary(lmerTest)\nlibrary(patchwork)\nlibrary(broom.mixed)\nlibrary(ggeffects)\nlibrary(DHARMa)\nlibrary(sjPlot)\nlibrary(emmeans)\nlibrary(report)\nlibrary(MuMIn)\nlibrary(GGally)\nlibrary(colorBlindness)"},{"path":"introduction-to-r-and-rstudio.html","id":"introduction-to-r-and-rstudio","chapter":"1 Introduction to R and RStudio","heading":"1 Introduction to R and RStudio","text":"R name programming language learn course.R name programming language learn course.RStudio convenient interface using throughout course order learn organise data, produce accurate data analyses & data visualisations.RStudio convenient interface using throughout course order learn organise data, produce accurate data analyses & data visualisations.R programming language write code , RStudio Integrated Development Environment (IDE) makes working R easier. Think knowing English using plain text editor like NotePad write book versus using word processor like Microsoft Word. , look good much harder without things like spell-checking formatting. similar way, can use R without R Studio recommend . key thing remember although work using RStudio course, actually using two pieces software means time--time, may separate updates.R RStudio can downloaded free onto personal computers(see Appendices), convenience use classroom space RStudio Cloud.RStudio Cloud cloud-based service can log remotely hosted servers host data analysis projects.advantage using RStudio Cloud extra packages functions need course already installed. can log-workspace computer long internet connection remember username password. can also \"visit\" projects help get stuck, hosted RStudio Cloud.Eventually may also add extra tools like GitHub RMarkdown data reproducibility, literate collaborative programming.end course hope tools confidently analyze real data, make informative beautiful data visuals, able analyze lots different types data.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"using-rstudio-cloud","chapter":"1 Introduction to R and RStudio","heading":"1.1 Using RStudio Cloud","text":"sessions run cloud-based software. make free account, join Workspace.signed - see two spaces:workspace - personal use (20hrs/month)workspace - personal use (20hrs/month)shared classroom - educational licence (limit)shared classroom - educational licence (limit)Make sure working classroom workspace - can distribute project work 'visit' projects needed.RStudio Cloud works exactly way RStudio, means download software. can access hosted cloud server projects browser connection (Chrome works best), computer.good reference guide RStudio Cloud","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"getting-to-know-rstudio","chapter":"1 Introduction to R and RStudio","heading":"1.2 Getting to know RStudio","text":"R Studio console can try code (appearing bottom left window), script editor (top left), window showing functions objects created \"Environment\" tab (top right window figure), window shows plots, files packages, help documentation (bottom right).\nFigure 1.1: RStudio interface\nlearn use features included R Studio throughout course, however, highly recommend watching RStudio Essentials 1 point.video lasts ~30 minutes gives tour main parts R Studio.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"consoles-vs.-scripts","chapter":"1 Introduction to R and RStudio","heading":"1.2.1 Consoles vs. scripts","text":"script window place enter run code easily edited saved future use. Usually Script Window shown top left RStudio. window shown, visible open previously saved R script, create new R Script. create new R Script clicking File > New File > R Script RStudio menu bar.script window place enter run code easily edited saved future use. Usually Script Window shown top left RStudio. window shown, visible open previously saved R script, create new R Script. create new R Script clicking File > New File > R Script RStudio menu bar.execute code R script, can either highlight code click Run, can highlight code press CTRL + Enter keyboard.execute code R script, can either highlight code click Run, can highlight code press CTRL + Enter keyboard.console: can enter code directly Console Window click Enter. commands run shown History Window top right RStudio. Though much difficult keep track work way.console: can enter code directly Console Window click Enter. commands run shown History Window top right RStudio. Though much difficult keep track work way.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"environment","chapter":"1 Introduction to R and RStudio","heading":"1.2.2 Environment","text":"Environment tab (top right) allows see objects workspace. create variables data frames, visual listing everything current workspace. start new project completely empty.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"plots-files-packages-help","chapter":"1 Introduction to R and RStudio","heading":"1.2.3 Plots, files, packages, help","text":"Plots - Plots panel, shows plots. buttons opening plot separate window exporting plot pdf jpeg (though can also code.)Plots - Plots panel, shows plots. buttons opening plot separate window exporting plot pdf jpeg (though can also code.)Files - files panel gives access file directory hard drive.Files - files panel gives access file directory hard drive.Packages - Shows list R packages installed harddrive indicates whether currently loaded. Packages loaded current session checked installed yet loaded unchecked. discuss packages later.Packages - Shows list R packages installed harddrive indicates whether currently loaded. Packages loaded current session checked installed yet loaded unchecked. discuss packages later.Help - Help menu R functions. can either type name function search window, use code search function nameHelp - Help menu R functions. can either type name function search window, use code search function name\nFigure 1.2: RStudio interface labelled\n","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"make-rstudio-your-own","chapter":"1 Introduction to R and RStudio","heading":"1.2.4 Make RStudio your own","text":"can personalise RStudio GUI much like.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"get-help","chapter":"1 Introduction to R and RStudio","heading":"1.3 Get Help!","text":"lot sources information using R . helpful places get help issue, just learn moreThe R help system - type help() put name package function querying inside bracketsThe R help system - type help() put name package function querying inside bracketsVignettes - type browseVignettes() console hit Enter, list available vignettes packages displayedVignettes - type browseVignettes() console hit Enter, list available vignettes packages displayedCheat Sheets - available RStudio.com. common packages associate cheat sheet covering basics use . Download/bookmark ones use commonly ggplot2, data transformation dplyr, Data tidying tidyr & Data import.Cheat Sheets - available RStudio.com. common packages associate cheat sheet covering basics use . Download/bookmark ones use commonly ggplot2, data transformation dplyr, Data tidying tidyr & Data import.Google - use Google constantly, continually forget even basic tasks. want remind round number, might type something like R round number - using particular package include search term wellGoogle - use Google constantly, continually forget even basic tasks. want remind round number, might type something like R round number - using particular package include search term wellAsk help - stuck, getting error message, think next, ask someone. , classmate. important show code, include error message. \"work\" helpful. \"code, data using, want X, problem get.\"Ask help - stuck, getting error message, think next, ask someone. , classmate. important show code, include error message. \"work\" helpful. \"code, data using, want X, problem get.\"\nmay daunting send code someone help.\n\nnatural common feel apprehensive, think \ncode really bad. still feel ! learn share\nmistakes, eventually find funny look back\nearly mistakes, laugh mistakes still\noccasionally make!\n","code":""},{"path":"r-basics.html","id":"r-basics","chapter":"2 R basics","heading":"2 R basics","text":"Go RStudio Cloud enter Project labelled Day One - clone project provide project workspace.Follow instructions get used R command line, R works language.","code":""},{"path":"r-basics.html","id":"your-first-r-command","chapter":"2 R basics","heading":"2.1 Your first R command","text":"RStudio pane, navigate console (bottom left) type copy appear >Hit Enter keyboard.answer get?first line shows request made R, next line R's responseYou type > symbol: just R command prompt part actual command.complete expression entered prompt, evaluated result evaluated expression returned. result may auto-printed.Usually, interactive work, explicitly print objects print function; much easier auto-print typing name object hitting return/enter. However, writing scripts, functions, extended programs, sometimes need explicitly print objects.R vector printed, notice index vector printed square brackets [] side. example, see integer sequenceThe numbers square brackets part vector ; merely part printed output.Note : operator used create integer sequences","code":"\n10 + 20\n30\nprint(10 + 20) ## explicit printing\n\n10 + 20 ## autoprinting\n1:30##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n## [26] 26 27 28 29 30"},{"path":"r-basics.html","id":"operators","chapter":"2 R basics","heading":"2.1.1 Operators","text":"different types operators consider R","code":""},{"path":"r-basics.html","id":"assignment-operator","chapter":"2 R basics","heading":"2.1.1.1 Assignment Operator","text":"","code":""},{"path":"r-basics.html","id":"arithmetic-operators","chapter":"2 R basics","heading":"2.1.1.2 Arithmetic Operators","text":"","code":""},{"path":"r-basics.html","id":"relational-operators","chapter":"2 R basics","heading":"2.1.1.3 Relational Operators","text":"","code":""},{"path":"r-basics.html","id":"logical-operators","chapter":"2 R basics","heading":"2.1.1.4 Logical Operators","text":"","code":""},{"path":"r-basics.html","id":"membership-operators","chapter":"2 R basics","heading":"2.1.1.5 Membership Operators","text":"","code":""},{"path":"r-basics.html","id":"typos","chapter":"2 R basics","heading":"2.1.2 Typos","text":"\ngo talk types calculations can\nR, ’s things want point . first\nthing , R good software, ’s still software. ’s\npretty stupid, ’s stupid can’t handle typos. takes\nfaith meant type exactly type.\nSuppose forget hit shift key trying type +, result command ended 10 = 20 rather 10 + 20. Try replicate error message:Error 10 = 20 : invalid (do_set) left-hand side assignmentWhat's going : R tries interpret 10 = 20 command, make sense, gives error message.person sees , might realize typo + = keys right next keyboard. R insight, just gets confused.even trickier typos create errors accidentally form valid R commands. example, meant type 10 + 20 mistakenly pressed neighboring key, end 10 - 20. Now, R read mind know wanted add, subtract, something different happens:case, R produces right answer, wrong question.","code":"\n10 = 20\n10 - 20## [1] -10"},{"path":"r-basics.html","id":"more-simple-arithmetic","chapter":"2 R basics","heading":"2.1.3 More simple arithmetic","text":"One best ways get familiar R experiment . good news quite hard mess things , stress much. Just type whatever like console see happens.Now, console's last line looks like :blinking cursor next plus sign, means R patiently waiting complete command. believes still typing, tried run anything yet. plus sign bit different usual prompt (> symbol). nudge R ready \"add\" typing now typed . example, type 20 hit enter, R complete command like :Alternatively hit escape key, R forget trying return blank line.","code":"> 10+\n+ > 10 +\n+ 20\n[1] 30"},{"path":"r-basics.html","id":"try-some-simple-maths","chapter":"2 R basics","heading":"2.1.4 Try some simple maths","text":"Raise number power anotherMultiplying number \\(x\\) \\(n\\) times called \"raising \\(x\\) \\(n\\)-th power\". Mathematically, written \\(x^n\\). values \\(n\\) special names: particular \\(x^2\\) called \\(x\\)-squared, \\(x^3\\) called \\(x\\)-cubed. , 4th power 5 calculated like :\\[5^4 = 5 \\times 5 \\times 5 \\times 5 \\]","code":"\n1+7\n13-10\n4*6\n12/3\n5^4"},{"path":"r-basics.html","id":"perform-some-combos","chapter":"2 R basics","heading":"2.1.5 Perform some combos","text":"R follows standard order operations (BODMAS/BIDMAS), means first calculates within brackets, deals exponents, followed division multiplication, finally addition subtraction.look two examples see order operations affects results:Similarly want raise number fraction, need surround fraction parentheses ()first one calculates 16 raised power 1, divided answer two. second one raises 16 power half. big difference output.\ncursor console, can press arrow see\nprevious commands.\n\ncan run , edit . Later look \nscripts, essential way re-use, store edit commands.\n","code":"\n3^2-5/2\n(3^2-5)/2\n16^1/2\n16^(1/2)"},{"path":"r-basics.html","id":"true-or-false-data","chapter":"2 R basics","heading":"2.2 \"TRUE or FALSE\" data","text":"Time make sidebar onto another kind data. Many concepts programming rely idea logical value. logical value assertion whether something true false. implemented R pretty straightforward way. two logical values, namely TRUE FALSE. Despite simplicity, logical values useful things. see work.","code":""},{"path":"r-basics.html","id":"assessing-mathematical-truths","chapter":"2 R basics","heading":"2.2.1 Assessing mathematical truths","text":"Time explore different kind data. programming, many concepts rely logical values. logical value statement whether something true false. R, pretty straightforward. two logical values: TRUE FALSE. Despite simplicity, logical values incredibly useful. dive work.R, basic mathematics solid, room manipulation. ask R calculate 2 + 2, always provides answer,point, R performing calculations without explicitly asserting whether \\(2 + 2 = 4\\) true statement. want R make explicit judgment, can use command like :TRUEWhat done use equality operator, ==, force R make \"true false\" judgement.\ndifferent operator assignment operator\n= saw previously.\n\ncommon typo people make trying write logical commands\nR (languages, since “= versus\n==” distinction important programming languages)\naccidentally type = really mean\n==.\nOkay, see R thinks 2 +2 ==5:Now, see happens attempt make R believe two plus two equals five using assignment statement like 2 + 2 = 5 2 + 2 <- 5. outcome:Indeed, R fond idea. quickly realizes 2 + 2 variable (\"non-language object\" part saying), refuses let \"reassign\" . R can quite flexible allows remarkable things redefine parts , fundamental truths simply budge . tamper laws addition, redefine number 2.probably best.","code":"\n2 + 2## [1] 4\n2 + 2 == 4\n2+2 == 5## [1] FALSE\n2 + 2 = 5Error in 2 + 2 = 5 : target of assignment expands to non-language object"},{"path":"r-basics.html","id":"storing-outputs","chapter":"2 R basics","heading":"2.3 Storing outputs","text":"dealing complex questions, often helpful store answers use later steps. Fortunately, quite easy R. can assign results name assignment operator:literally means please assign value 1+2 name . use assignment operator <- make assignment.\nNote shortcut key <- Alt + - (Windows) Option + -\n(Mac)\nperforming action, achieve two things:notice top right-hand pane within Environment tab now object labeled value 3.\nFigure 2.1: object now visible withe value 3 Environment Pane\ncan check variable contains typing Console pressing Enter.can check variable contains typing Console pressing Enter.Keep mind see result operations type object R console press Enter.Keep mind see result operations type object R console press Enter.can now call object time R session perform calculations .happens assign value named object already exists R environment??? exampleThe value now 10.see previous assignment lost, gone forever replaced new value.can assign lots things objects, use calculations build objects.\nRemember: now change value b, value c \nchange.\n\nObjects totally independent \nmade.\n\nOverwriting objects new values means old value lost.\nvalue c?[1] 15When c created product b values 10 15 respectively.\nre-ran command c <- + b changing value b get value 17.Look environment tab - see starting fill now!\nRStudio default save objects memory close\nsession.\n\nnext time logon. might seem nice\nable close things pick left , \nactually quite dangerous. ’s messy, can cause lots problems\nwork scripts later, don’t !\n\nstop RStudio saving objects default go Tools >\nProject Options option change “Save workspace .RData exit” \n“” “Never”.\n\nInstead going learn use scripts quickly re-run\nanalyses working .\n","code":"\na <- 1+2\na  ## autoprinting\n\nprint(a) ## explicit printing\n3\n2 * a\n6\na <- 10\na\nb <- 5\nc <- a + b\nb <- 7\nb\nc"},{"path":"r-basics.html","id":"choosing-names","chapter":"2 R basics","heading":"2.3.1 Choosing names","text":"Use informative variable names. general rule, using meaningful names like orange apple preferred arbitrary ones like variable1 variable2. Otherwise hard remember contents different variables actually .Use informative variable names. general rule, using meaningful names like orange apple preferred arbitrary ones like variable1 variable2. Otherwise hard remember contents different variables actually .Use short variable names. Typing pain -one likes . much prefer use name like apple name like pink_lady_apple.Use short variable names. Typing pain -one likes . much prefer use name like apple name like pink_lady_apple.Use one conventional naming styles multi-word variable names. R lets use certain things legal names. Legal names must start letter number, can followed sequence letters, numbers, ., _. R like using spaces. Upper lower case names allowed, R case sensitive Apple apple different.Use one conventional naming styles multi-word variable names. R lets use certain things legal names. Legal names must start letter number, can followed sequence letters, numbers, ., _. R like using spaces. Upper lower case names allowed, R case sensitive Apple apple different.favourite naming convention snake_case short, lower case , spaces words separated _. easy read easy remember.favourite naming convention snake_case short, lower case , spaces words separated _. easy read easy remember.\nFigure 2.2: courtesy Allison Horst\n","code":""},{"path":"r-basics.html","id":"r-objects","chapter":"2 R basics","heading":"2.4 R objects","text":"R, five fundamental \"atomic\" classes objects:Character: represent text character strings.Character: represent text character strings.Numeric (num) Double (dbl): used real numbers (e.g., decimal numbers).Numeric (num) Double (dbl): used real numbers (e.g., decimal numbers).Integer: Used whole numbers.Integer: Used whole numbers.Complex: complex numbers.Complex: complex numbers.Logical: Represented True False, used logical values.Logical: Represented True False, used logical values.basic type R object vector. can create empty vectors using vector() function. primary rule regarding vectors R vector can contain objects class.However, good rule, exception, \"list.\" Lists represented vectors can hold objects different classes, often used.","code":""},{"path":"r-basics.html","id":"numbers","chapter":"2 R basics","heading":"2.4.1 Numbers","text":"R, \"dbl\" \"num\" refer numeric data types, subtle difference :dbl (\"double\"): refers double-precision floating-point numbers, capable storing real numbers high precision. Double-precision numbers decimal places accuracy can represent wider range values without loss precision. perform arithmetic operations, R typically returns results \"dbl\" values default.dbl (\"double\"): refers double-precision floating-point numbers, capable storing real numbers high precision. Double-precision numbers decimal places accuracy can represent wider range values without loss precision. perform arithmetic operations, R typically returns results \"dbl\" values default.num (\"numeric\"): \"Num\" general term includes double-precision floating-point numbers also integer values. R, integers subtype numeric data. Numeric data can include integers double-precision floating-point numbers, depending specific data represented.num (\"numeric\"): \"Num\" general term includes double-precision floating-point numbers also integer values. R, integers subtype numeric data. Numeric data can include integers double-precision floating-point numbers, depending specific data represented., \"dbl\" specifically denotes double-precision floating-point numbers, \"num\" encompasses broader range numeric data, including integers double-precision numbers. cases, can use \"num\" work numeric data general sense, \"dbl\" focuses higher-precision representation real numbers.","code":""},{"path":"r-basics.html","id":"attributes","chapter":"2 R basics","heading":"2.5 Attributes","text":"R objects can come attributes, essentially metadata object. metadata handy help describe object. instance, data frame, column names serve attributes, clarifying data contained column. examples R object attributes:names() dimnames()names() dimnames()dimensions (e.g., matrices arrays) dim()dimensions (e.g., matrices arrays) dim()class() (e.g., integer, numeric)class() (e.g., integer, numeric)length()length()user-defined attributes metadataOther user-defined attributes metadataYou can access attributes object, , using attributes() function. R object attributes, attributes() function return NULL.","code":""},{"path":"r-basics.html","id":"vectors","chapter":"2 R basics","heading":"2.6 Vectors","text":"working R objects containing single element data (technical term scalar), commonly work vectors. vector sequence elements, data type. logical, numerical, character etc.","code":"\nnumeric_vector <- c(1,2,3)\n\ncharacter_vector <- c(\"fruits\", \"vegetables\", \"seeds\")\n\nlogical_vector <- c(TRUE, TRUE, FALSE)\n\ninteger_vector <- 1:10"},{"path":"r-basics.html","id":"coercion","chapter":"2 R basics","heading":"2.6.1 Coercion","text":"R, different classes objects mixed together vector, coercion occurs ensure every element vector belongs class. Coercion process converting objects common class make combination reasonable. see effects implicit coercion provided examples:, outcome depends R can reasonably represent objects vector. aims create vector inclusive class accommodate mixed objects. Keep mind coercion can lead unexpected results, essential aware implicit type conversion mixing different data types R.Objects can also explicitly coerced one class another using .* functions, available.Create following vector check class, note happens attempt coerce numeric, logical characterSometimes, R can’t figure coerce object can result NAs produced","code":"\ny <- c(2.3, \"a\") # Here, we're mixing a numeric value (1.7) with a character value (\"a\"). To make them compatible, R coerces both elements into character values. So, y becomes a character vector.\n\ny <- c(TRUE, 2) # In this case, we're combining a logical value (TRUE) with a numeric value (2). R coerces the logical value into 1, so y becomes a numeric vector.\n\ny <- c(\"a\", TRUE) # We're mixing a character value (\"a\") with a logical value (TRUE). In this scenario, R coerces the logical value into a character value, resulting in y becoming a character vector.\nx <- 0:5\nas.numeric(x)\n\nas.logical(x)\n\nas.character(x)## [1] 0 1 2 3 4 5\n## [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n## [1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\""},{"path":"r-basics.html","id":"subsetting-vectors","chapter":"2 R basics","heading":"2.6.2 Subsetting vectors","text":"numerical indexing, enter vector integers corresponding values vector want access form [index], vector, index vector index values. example, let’s use numerical indexing get values character_vectorWe can also use logical indexing","code":"\ncharacter_vector[2]\n# [1] \"vegetables\"\n\n\ncharacter_vector[1:2]\n# [1] \"fruits\"     \"vegetables\"\n\ncharacter_vector[c(1,3)]\n# [1] \"fruits\" \"seeds\" \nnumeric_vector <=2\n# [1]  TRUE  TRUE FALSE\n\ncharacter_vector == \"fruits\"\n#[1]  TRUE FALSE FALSE"},{"path":"r-basics.html","id":"matrices","chapter":"2 R basics","heading":"2.7 Matrices","text":"Matrices can thought vectors added dimension attribute. dimension attribute two-element integer vector specifying number rows columns, defines shape structure matrix.\nData frames also two-dimensional can store columns \ndifferent data types - matrices simpler consist elements\ndata type.\nMatrices constructed \"columns-first\" entries start \"upper left\" run columns.can create matrices several ways:Adding dim() existing vectorsAdding dim() existing vectorsColumn/row-binding vectors cbind() rbind()Column/row-binding vectors cbind() rbind()see last operation column names added matrix, can add, change remove column rownames matrix colnames() rownames()","code":"\nm <- matrix(1:6, nrow = 2, ncol = 3) \nm##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\nattributes(m)## $dim\n## [1] 2 3\nm <- 1:6\n\ndim(m) <- c(2,3)\n\nm##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\na <- 1:2\nb <- 3:4\nc <- 5:6\n\nm <- cbind(a,b,c)\nm##      a b c\n## [1,] 1 3 5\n## [2,] 2 4 6\nrownames(m) <- c(\"y\",\"z\")\nm##   a b c\n## y 1 3 5\n## z 2 4 6"},{"path":"r-basics.html","id":"lists","chapter":"2 R basics","heading":"2.8 Lists","text":"Lists versatile fundamental data type R. set apart regular vectors allowing store elements different classes within list. flexibility makes lists powerful various data structures data manipulation tasks.can create lists explicitly using list() function, can take arbitrary number arguments. Lists, combined functions like \"apply\" family, enable perform complex versatile data manipulations analyses R. Lists often used represent heterogeneous data structures, datasets different columns can different data types structures.can also create empty lists set lengths vector() function, can useful preallocating memory iterations - see laterLists can also names","code":"\nl <- list(1, \"apple\", TRUE )\nl## [[1]]\n## [1] 1\n## \n## [[2]]\n## [1] \"apple\"\n## \n## [[3]]\n## [1] TRUE\nl <- vector(\"list\", length = 3)\nl## [[1]]\n## NULL\n## \n## [[2]]\n## NULL\n## \n## [[3]]\n## NULL\nnames(l) <- c(\"apple\",\"orange\",\"pear\")"},{"path":"r-basics.html","id":"dataframes","chapter":"2 R basics","heading":"2.9 Dataframes","text":"Data frames essential storing tabular data R find extensive use various statistical modeling data analysis applications. offer structured way manage work data R, packages like dplyr, developed Hadley Wickham, provide optimized functions efficient data manipulation data frames.key characteristics advantages data frames:Tabular Structure: Data frames type list, element list represents column. number rows column , tabular structure makes suitable working datasets.Tabular Structure: Data frames type list, element list represents column. number rows column , tabular structure makes suitable working datasets.Mixed Data Types: Unlike matrices, data frames can contain columns different classes objects. flexibility allows handle real-world datasets often include variables different data types.Mixed Data Types: Unlike matrices, data frames can contain columns different classes objects. flexibility allows handle real-world datasets often include variables different data types.Column Row Names: Data frames include column names, describe variables predictors. Additionally, special attribute called \"row.names\" provides information row data frame.Column Row Names: Data frames include column names, describe variables predictors. Additionally, special attribute called \"row.names\" provides information row data frame.Creation Conversion: Data frames can created various ways, reading data files using functions like read.table() read.csv(). can also create data frames explicitly data.frame().Creation Conversion: Data frames can created various ways, reading data files using functions like read.table() read.csv(). can also create data frames explicitly data.frame().Working Data: Data frames especially useful working datasets require data cleaning, transformation, merging. provide high level data organization, many R packages designed work seamlessly data frames.Working Data: Data frames especially useful working datasets require data cleaning, transformation, merging. provide high level data organization, many R packages designed work seamlessly data frames.dplyr: dplyr package optimized efficient data manipulation data frames. offers set functions perform data operations quickly intuitively.dplyr: dplyr package optimized efficient data manipulation data frames. offers set functions perform data operations quickly intuitively.Data frames fundamental structure managing tabular data R. excel handling datasets mixed data types essential various data analysis modeling tasks.create dataframe vectors use data.frame() functionThere one key argument data.frame() similar functions called stringsAsFactors. default, data.frame() function automatically convert string columns specific type object called factor R. factor nominal variable well-specified possible set values can take . example, one can create factor sex can take values \"male\" \"female\".\nSince R ver 4.0 release, stringsAsFactors set FALSE \ndefault!\nHowever, ’m sure ’ll discover, R automatically convert string data factors can lead lots strange results. example: factor sex data, want add new value called , R yell return error. hate, hate, HATE happens. , rare cases find factors useful, almost always don’t want need . reason, avoid costs.tell R convert string columns factors, need include argument stringsAsFactors = FALSE using functions data.frame()access specific column dataframe name, use $ operator form df$name df name dataframe, name name column interested . operation return column want vector.$ operator returns vector, can easily calculate descriptive statistics columns dataframe applying favorite vector function (like mean()).can also use $ add new vectors dataframeChanging column names easy combination names() indexing","code":"\nsurvey <- data.frame(\"index\" = c(1, 2, 3, 4, 5),\n                     \"sex\" = c(\"m\", \"m\", \"m\", \"f\", \"f\"),\n                     \"age\" = c(99, 46, 23, 54, 23))\nstr(survey)## 'data.frame':    5 obs. of  3 variables:\n##  $ index: num  1 2 3 4 5\n##  $ sex  : chr  \"m\" \"m\" \"m\" \"f\" ...\n##  $ age  : num  99 46 23 54 23\nsurvey$sex## [1] \"m\" \"m\" \"m\" \"f\" \"f\"\nmean(survey$age)## [1] 49\nsurvey$follow_up <- c(T,F,T,F,F)\nsurvey\nnames(survey)[1] <- \"ID\"\n\nsurvey"},{"path":"r-basics.html","id":"slice-dataframes","chapter":"2 R basics","heading":"2.9.1 Slice dataframes","text":"Matrices dataframes can sliced [,]slice subset","code":"# Return row 1\ndf[1, ]\n\n\n# Return column 5 as vector\ndf[, 5]\n\n# Return column as data.frame\ndf[5]\n\n# Rows 1:5 and column 2\ndf[1:5, 2]\n\n# Single element\ndf[[1,2]]\n\nsurvey_slice <- subset(x = survey,\n      subset = age < 50 &\n               sex == \"m\")\n\nsurvey_slice"},{"path":"r-basics.html","id":"tibbles","chapter":"2 R basics","heading":"2.9.2 Tibbles","text":"“Tibbles” new modern data frame. keeps many important features original data frameA tibble never changes input type.tibble never changes input type.tibble can columns lists.tibble can columns lists.tibble can non-standard variable names.\ncan start number contain spaces.\n-use refer backtick.\ntibble can non-standard variable names.can start number contain spaces.\n-use refer backtick.Tibbles print first 10 rows columns fit screen. - column displays data typeTibbles print first 10 rows columns fit screen. - column displays data typeThe way make tibbles similar making dataframes","code":"\nsurvey_tibble <- tibble(\"index\" = c(1, 2, 3, 4, 5),\n                     \"sex\" = c(\"m\", \"m\", \"m\", \"f\", \"f\"),\n                     \"age\" = c(99, 46, 23, 54, 23))\n# Some R functions for looking at tibbles and dataframes\n\nhead(survey_tibble, n=2)\ntail(survey_tibble, n=1)\nnrow(survey_tibble)\nncol(survey_tibble)\ncolnames(survey_tibble)\nview(survey_tibble)\nglimpse(survey_tibble)\nstr(survey_tibble)"},{"path":"r-basics.html","id":"brackets-with-tibbles","chapter":"2 R basics","heading":"2.9.3 Brackets with tibbles","text":"behaviour single [] indexing tibbles slightly different.dataframe [,1] extracts single column vector, tibble conversion occur. Instead returns tibble single column, vector.extract vector must use:https://tibble.tidyverse.org/https://cran.r-project.org/web/packages/tibble/vignettes/tibble.html","code":"\n# pull function\npull(survey_tibble, sex)\n\n# double brackets\nsurvey_tibble[[2]]"},{"path":"r-basics.html","id":"matrix-dataframe-tibble-functions","chapter":"2 R basics","heading":"2.10 Matrix, dataframe, tibble functions","text":"Important functions understanding matrices dataframes.","code":""},{"path":"r-basics.html","id":"error","chapter":"2 R basics","heading":"2.11 Error","text":"Things go wrong eventually, always ...R pedantic, even smallest typo can result failure typos impossilbe avoid. make mistakes. One type mistake make error. code fails run. common causes error :typostyposmissing commasmissing commasmissing bracketsmissing bracketsThere's nothing wrong making lots errors. trick panic get frustrated, read error message script carefully start debug (later)...... sometimes need walk away come back later!\nTry typing command help() R console, \nopen new tab bottom right.\n\nPut function package brackets get help \nspecific topic\n\nFigure 2.3: courtesy Allison Horst\n","code":""},{"path":"r-basics.html","id":"functions","chapter":"2 R basics","heading":"2.12 Functions","text":"Functions tools R. one helps us different task.Take example function use round number certain number digits - function called roundHere's example:start command function name round. name followed parentheses (). Within place arguments function, separated comma.arguments:x = 2.4326782647 (number like round)x = 2.4326782647 (number like round)digits = 2 (number decimal places like round )digits = 2 (number decimal places like round )Arguments inputs give function. arguments form name = value name specifies argument, value providing define input. first argument x number like round, value 2.4326782647. second argument digits like number rounded specify 2. limit many arguments function .\nCopy paste following code console.\nhelp documentation round()appear bottom right help panel. usage section, see round()takes following form:arguments section, explanations arguments. xis number vector wish round values. digits number decimal places used. description can see value supplied digits default 0 whole number rounding.Read 'Details' section find happens rounding last digit 5.try example just change required argument digits\nCopy paste following code console.\nNow can change additional arguments produce different set numbers.time R still rounded number, done set number 'decimal places'.Always remember use help documentation help understand arguments function requires.","code":"\nround(x  = 2.4326782647, digits = 2)\nhelp(round)\nround(x, digits = 0)\nround(x  = 2.4326782647)## [1] 2\nround(x  = 2.4326782647, digits = 2)## [1] 2.43"},{"path":"r-basics.html","id":"storing-the-output-of-functions","chapter":"2 R basics","heading":"2.12.1 Storing the output of functions","text":"need answer function later calculation. answer use assignment operator <-.example assign values two R objects can call inside R function though putting numbers directly.\nCopy paste following code console.\nvalue assigned R object rounded_number ?[1] 2.433","code":"\nnumber_of_digits <- 3\n\nmy_number <- 2.4326782647\n\nrounded_number <- round(x  = my_number, \n                        digits = number_of_digits)"},{"path":"r-basics.html","id":"more-fun-with-functions","chapter":"2 R basics","heading":"2.12.2 More fun with functions","text":"Copy paste :Looks like even give names arguments function still work. works function round expects us give number value first, argument rounding digits second. assumes know expected ordering within function, might case functions use lot. give arguments proper names can actually introduce order want.Try :gives different answer\nRemember naming arguments overrides position defaults\nknow argument orders defaults? Well get know lot functions work practice, can also use help() .","code":"\nround(2.4326782647, 2)\nround(digits = 2, x  = 2.4326782647)\nround(2, 2.4326782647)"},{"path":"r-basics.html","id":"packages-1","chapter":"2 R basics","heading":"2.13 Packages","text":"install R access range functions including options data wrangling statistical analysis. functions included default installation typically referred Base R useful cheat sheet shows many Base R functions hereHowever, power R extendable open source - anyone can create new package extends functions R.R package container various things including functions data. make easy complicated protocols using custom-built functions. Later see can write simple functions. Packages lot like new apps extending functionality phone can .","code":""},{"path":"r-basics.html","id":"loading-packages","chapter":"2 R basics","heading":"2.13.1 Loading packages","text":"use functions package script must loaded call functions data contain. sensible place put library calls packages top script.","code":"\nlibrary(package_name)"},{"path":"r-basics.html","id":"calling-functions-from-packages","chapter":"2 R basics","heading":"2.13.2 Calling Functions from Packages","text":"loading package, can call functions using either function() full package_name::function_name() syntax. allows specify package explicitly using particular function.Calling function explicitly via package can useful forAvoiding Conflicts:Sometimes, multiple packages may functions name. explicitly specifying package package_name::, avoid naming conflicts ensure R uses function intended package.Clarity:can make code transparent easier understand, especially cases function's origin immediately obvious. helpful others read code.Though still good practice comment top script package required even include library(package)Debugging:troubleshooting issues debugging code, specifying package source function can help pinpoint problems ensure correct function used.","code":"\nlibrary(dplyr)\n\nfilter(dataframe, condition)\n\ndplyr::filter(dataframe, conditions)"},{"path":"r-basics.html","id":"activity-1","chapter":"2 R basics","heading":"2.14 Activity 1","text":"","code":""},{"path":"r-basics.html","id":"complete-this-quiz","chapter":"2 R basics","heading":"2.14.1 Complete this Quiz","text":"get correct answer, answer box turn green. Sometimes work Internet Explorer Edge sure use Chrome Firefox.Question 1. output 5^4Question 2. answer get type 2+2 = 4 R console?TRUEFALSEErrorIf wanted R make judgement must use == = otherwise get Error messageQuestion 3. symbol use want assign value output function R objectQuestion 4. value ran following commands?Question 5. variable naming conventions written correctly?snake_casecamelCaseScreaming_Snake_Casekebab-caseQuestion 6. type R console want help round() function?Question 7. statements function arguments trueArguments inputs give functionValues R arguments must always defined userNaming arguments supersedes position functionThere limit number arguments function haveQuestion 8. Evaluate statement \"R Package can contain code functions, data, .\"TRUEFALSE","code":"\na <-  12*2\n\na <- 5\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] knitr_1.43         webexercises_1.1.0 glossary_1.0.0     lubridate_1.9.2   \n##  [5] forcats_1.0.0      stringr_1.5.0      dplyr_1.1.2        purrr_1.0.1       \n##  [9] readr_2.1.4        tidyr_1.3.0        tibble_3.2.1       ggplot2_3.4.2     \n## [13] tidyverse_2.0.0   \n## \n## loaded via a namespace (and not attached):\n##  [1] sass_0.4.6        utf8_1.2.3        generics_0.1.3    xml2_1.3.5       \n##  [5] stringi_1.7.12    hms_1.1.3         digest_0.6.33     magrittr_2.0.3   \n##  [9] evaluate_0.21     grid_4.3.1        timechange_0.2.0  bookdown_0.34    \n## [13] fastmap_1.1.1     jsonlite_1.8.7    fansi_1.0.4       scales_1.2.1     \n## [17] codetools_0.2-19  jquerylib_0.1.4   cli_3.6.1         rlang_1.1.1      \n## [21] munsell_0.5.0     withr_2.5.0       cachem_1.0.8      yaml_2.3.7       \n## [25] tools_4.3.1       tzdb_0.4.0        memoise_2.0.1     colorspace_2.1-0 \n## [29] vctrs_0.6.3       R6_2.5.1          lifecycle_1.0.3   fs_1.6.2         \n## [33] pkgconfig_2.0.3   pillar_1.9.0      bslib_0.5.0       gtable_0.3.3     \n## [37] glue_1.6.2        highr_0.10        xfun_0.39         tidyselect_1.2.0 \n## [41] rstudioapi_0.15.0 htmltools_0.5.5   rmarkdown_2.23    compiler_4.3.1   \n## [45] downlit_0.4.3"},{"path":"project-oriented-workflows.html","id":"project-oriented-workflows","chapter":"3 Project-oriented workflows","heading":"3 Project-oriented workflows","text":"RStudio, project way organize work within IDE. fundamental concept designed enhance workflow providing structured efficient means managing R-related tasks files. R projects useful:1. Organized File Structure: R projects encourage maintain well-organized file structure work. Instead scattered R scripts, data files, figures, create dedicated folder project. folder typically contains project-related materials, including data, code, figures, notes, relevant files.2. Working Directory Management: open R project RStudio, automatically sets working directory project's folder. ensures file paths relative project's location. working directory intentionality eliminates need setting working directories manually using absolute paths code.3. Portability Collaboration: R projects make work portable collaborative. Since paths relative project folder, project can easily shared others. ensures code works consistently across different computers users, promoting collaboration reproducibility.4. RStudio Integration: RStudio integrates project management seamlessly. can designate folder R project, RStudio leaves .Rproj file folder store project-specific settings. double-click file, opens fresh instance RStudio project's working directory file browser pointed project folder.5. Efficient Workflow: RStudio provides various menu options keyboard shortcuts managing projects. includes ability open existing projects, switch projects, even launch multiple instances RStudio different projects.essence, R projects help maintain clean organized workspace, improve collaboration, ensure work remains reproducible transferable across different environments time. best practice data scientists analysts working R, fosters disciplined use relative file paths working directories, crucial reliability scalability R projects.","code":""},{"path":"project-oriented-workflows.html","id":"setting-up-a-new-project","chapter":"3 Project-oriented workflows","heading":"3.1 Setting up a new project","text":"start new R project begin working distinct task, research project, analysis. ensures work well-organized, especially beneficial need collaborate, share, revisit project later.create open R project RStudio:Go \"File\" RStudio menu.Go \"File\" RStudio menu.Select \"New Project...\"Select \"New Project...\"Choose project type create new directory project.Choose project type create new directory project.Click \"Create Project.\"Click \"Create Project.\"new project created .Rproj file. can open double-clicking file using \"File\" menu RStudio.set dedicated workspace project, ensuring working directory file paths appropriately managed.","code":""},{"path":"project-oriented-workflows.html","id":"avoiding-setwd-and-promoting-safe-file-paths","chapter":"3 Project-oriented workflows","heading":"3.2 Avoiding setwd() and Promoting Safe File Paths:","text":"maintain clean efficient workflow R, advisable avoid using setwd() beginning script. practice promotes use safe file paths particularly important projects multiple collaborators working across different computers.","code":""},{"path":"project-oriented-workflows.html","id":"absolute-vs.-relative-paths","chapter":"3 Project-oriented workflows","heading":"3.2.1 Absolute vs. Relative Paths:","text":"absolute file paths provide explicit way locate resources, significant drawbacks, incompatibility reduced reproducibility. Relative file paths, hand, relative current working directory, making shorter, portable, reproducible.Absolute file path path contains entire path file directory starting Home directory ending file directory wish access e.g.share files, another user won’t directory structure , need recreate file pathsIf share files, another user won’t directory structure , need recreate file pathsIf alter directory structure, ’ll need rewrite pathsIf alter directory structure, ’ll need rewrite pathsAn absolute file path likely longer relative path, backslashes need edited, scope error.absolute file path likely longer relative path, backslashes need edited, scope error.Relative filepath path relative working directory location computer.use RStudio Projects, wherever .Rproj file located set working directory. means .Rproj file located project folder relative path data :filepath shorter means share project someone else script run without editing.","code":"/home/your-username/project/data/penguins_raw.csvdata/penguins_raw.csv"},{"path":"project-oriented-workflows.html","id":"organizing-projects","chapter":"3 Project-oriented workflows","heading":"3.2.2 Organizing Projects:","text":"key aspect workflow organizing logical project separate folder computer. ensures files scripts well-structured, making easier manage work.","code":""},{"path":"project-oriented-workflows.html","id":"the-here-package","chapter":"3 Project-oriented workflows","heading":"3.2.3 The here Package:","text":"enhance organization ensure file paths independent specific working directories, package comes play. () function provided package builds file paths relative top-level directory project.project example raw data files data/raw directory, scripts scripts directory, want save processed data data/processed directory.access data using relative filepath need:access data provide directories desired file, () builds required filepath starting top level project time","code":"my_project.RProj/\n    |- data/\n    |   |- raw/\n    |       |- penguins_raw.csv\n    |   |- processed/\n    |- scripts/\n    |   |- analysis.R\n    |- results/\n\n\nraw_data <- read.csv(\"data/raw/penguins_raw.csv\")\nlibrary(here)\n\nraw_data <- read.csv(here(\"data\", \"raw\", \"penguins.csv\"))"},{"path":"project-oriented-workflows.html","id":"here-and-rmarkdown","chapter":"3 Project-oriented workflows","heading":"3.2.3.1 here and Rmarkdown","text":"One quirk working .Rmd Rmarkdown file \"knit\" code compiled working directory folder .Rmd file lives , working script .R live session default working directory top level project file. frustrating confusing process can lead errors attempting compile documents.use package default behaviour overridden. working directory knitting top-level .Rproj location !","code":""},{"path":"project-oriented-workflows.html","id":"reading","chapter":"3 Project-oriented workflows","heading":"3.2.4 Reading","text":"https://github.com/jennybc/here_herehttps://cran.r-project.org/web/packages//index.html","code":""},{"path":"project-oriented-workflows.html","id":"blank-slates","chapter":"3 Project-oriented workflows","heading":"3.3 Blank slates","text":"working data analysis coding projects R, crucial ensure analysis remains clean, reproducible, free hidden dependencies.Hidden dependencies elements R session might immediately apparent can significantly impact reliability predictability work.example many data analysis scripts start command rm(list = ls()). command clears user-created objects workspace, leaves hidden dependencies reset R session, can cause issues :Hidden Dependencies: Users might unintentionally rely packages settings applied current session.Hidden Dependencies: Users might unintentionally rely packages settings applied current session.Incomplete Reset: Package attachments made library() persist, customized options remain set.Incomplete Reset: Package attachments made library() persist, customized options remain set.Working Directory: working directory affected, potentially causing path-related problems future scripts.Working Directory: working directory affected, potentially causing path-related problems future scripts.","code":""},{"path":"project-oriented-workflows.html","id":"restart-r-sessions","chapter":"3 Project-oriented workflows","heading":"3.3.1 Restart R sessions","text":"Restarting R sessions using scripts history best practice maintaining clean, reproducible, efficient workflow. addresses limitations rm(list = ls()) ensuring complete reset minimizing hidden dependencies, enhancing code organization, ensuring analysis remains robust predictable across sessions shared others.","code":""},{"path":"basic-importexport.html","id":"basic-importexport","chapter":"4 Basic Import/Export","heading":"4 Basic Import/Export","text":"loading data R, choice method matters, especially tabular data like CSV files. three common approaches:base R's read.csv()base R's read.csv()data.table package fread()data.table package fread()readr package functions like read_csv()performance gains data.table readr become significant data size grows, especially datasets many rows. files larger 100 MB, fread() read_csv() five times faster read.csv(). However, choice consider memory usage, large datasets may impact .Keep mind data.table readr separate packages, requiring installation loading.readr functions","code":""},{"path":"basic-importexport.html","id":"export","chapter":"4 Basic Import/Export","heading":"4.1 Export","text":"packages functions inverse \"write\" function produce files variety formats R objects.","code":""},{"path":"basic-importexport.html","id":"r-data-files","chapter":"4 Basic Import/Export","heading":"4.2 R data files","text":"R binary file formats easy saving loading data, .Rdata RDS:.Rdata file binary file format R used save entire workspace, includes objects, functions, data frames, . captures current R session's state, allowing save load entire workspace, including objects, single file..RDS file, R Data Serialization file, binary file format R used save individual R objects. Unlike .Rdata, meant save entire workspace specific objects data structures.Using file formats can several advantages:Preservation Data Types Structure: .RDS files preserve original data types structure R objects, including lists, data frames, functions .Efficiency Speed: Reading writing data .RDS format efficient faster working text-based formats like CSV.Control Specific Objects: .RDS files allow save load specific R objects datasets, providing control flexibility.","code":"\n# Create some sample data\nmy_data <- data.frame(\n  ID = 1:3,\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Score = c(95, 87, 92)\n)\n\n# Save the entire workspace to an .Rdata file\nsave.image(file = \"my_workspace.Rdata\")\n\n# Clear the current workspace\nrm(list = ls())\n\n# Load the entire workspace from the .Rdata file\nload(\"my_workspace.Rdata\")\n\n# Access the loaded data\nprint(my_data)\n# Create some sample data\nmy_data <- data.frame(\n  ID = 1:3,\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Score = c(95, 87, 92)\n)\n\n# Save the data frame to an .RDS file\nsaveRDS(my_data, file = \"my_data.RDS\")\n\n# Clear the current workspace\nrm(list = ls())\n\n# Load the data frame from the .RDS file\nloaded_data <- readRDS(\"my_data.RDS\")\n\n# Access the loaded data\nprint(loaded_data)"},{"path":"basic-importexport.html","id":"objects-that-take-a-long-time","chapter":"4 Basic Import/Export","heading":"4.2.1 Objects that take a long time","text":"parts analysis time-consuming execute, indication suitable time adopt modular approach. approach involves dividing analysis distinct phases, phase dedicated script resulting outputs.can address isolating computationally intensive steps separate scripts saving critical object file using saveRDS. Subsequently, can create scripts downstream tasks reload essential object readRDS. Breaking analysis logical steps clear inputs outputs generally sound practice.","code":""},{"path":"scripts.html","id":"scripts","chapter":"5 Scripts","heading":"5 Scripts","text":"ensure clarity understanding, begin script brief description purpose. description serve reference point anyone accesses script. Even make updates later , initial description help maintain clarity context, preventing confusion revisiting code future.","code":""},{"path":"scripts.html","id":"organised-scripts","chapter":"5 Scripts","heading":"5.1 Organised scripts","text":"Load necessary packages beginning script.\ncommon start basic packages add specialized libraries analysis progresses. However, crucial load required packages beginning script. practice ensures someone else needs run script , necessary libraries readily available, preventing issues middle execution due unrecognized functions. Small coding details matter.Name code sections use quick navigation.\ncode grows, may become extensive challenging manage. keep organized, divide code sections, specific name, can folded unfolded easy navigation. can also use 'drop-' menu bottom script screen move sections.create new code section, insert \"####\" \"----\" end comment marks beginning new section.understand, good intentions, often neglect task thoroughly commenting code. made promise many times, even now, struggle consistently. , ask? reasons:often tell analysis crucial.believe understand code.usually immediate collaborators need use code.However, arguments somewhat shortsighted. reality :valuable relevant analysis loses value neither others can understand . ()may know moment, feel way month two moved another project, someone innocently asks defined critical variable. memory unreliable. important rely every piece code produce.Even active collaborators time analysis, someone eventually need use code. position forever. creating legacy , someday, someone rely , matter distant day may seem right now., makes code good reproducible?Thoughtful clear comments.Code logical efficient.Code appropriately timed tested.","code":""},{"path":"scripts.html","id":"use-style-guides","chapter":"5 Scripts","heading":"5.2 Use style guides","text":"Consider using style guide, tidyverse style guide, beneficial practice several reasons:Consistency: style guide enforces consistent code formatting naming conventions throughout project. consistency improves code readability makes easier others understand code. multiple people working project, shared style guide ensures everyone's code looks similar, reducing confusion errors.Readability: Following style guide leads readable code. Code often read frequently written, making easy understand crucial. tidyverse style guide, example, emphasizes clear self-explanatory code, improving comprehension current future users. Good coding style like correct punctuation: can manage without , butitsuremakesthingseasiertoreadCollaboration: working team, adhering common style guide makes easier collaborate. reduces friction associated different team members using varying coding styles preferences. streamlines code reviews simplifies process maintaining extending codebase.Error Reduction: style guide can help identify prevent common coding errors. promotes best practices can include guidelines avoiding pitfalls potential issues. reduces likelihood bugs enhances overall quality code.","code":""},{"path":"scripts.html","id":"separate-your-scripts","chapter":"5 Scripts","heading":"5.3 Separate your scripts","text":"Separating analysis distinct scripts different steps sound practice data analysis. script can focus specific task step, making work organized understandable.can use source function R run previous dependencies, ensuring can reproduce work easily. Additionally, computationally intensive processes dealing large datasets, can save load intermediate results RDS format. approach conserves memory also saves time re-running analysis.","code":"project_folder/\n│\n├── data/\n│   ├── data.csv\n│   ├── processed_data.rds\n│\n├── scripts/\n│   ├── data_preparation.R\n│   ├── data_analysis.R\n│   ├── visualization.R\n│   ├── helper_functions.R\n│\n├── output/\n│   ├── result.csv\n│\n├── README.md\n│\n├── project.Rproj\n"},{"path":"scripts.html","id":"activity","chapter":"5 Scripts","heading":"5.4 Activity","text":"Using Tidyverse style guide help, improve layout readability script?","code":"\n# Install and load necessary packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\npenguins_clean <- janitor::clean_names(penguins_raw)\n\n\n## Data is selected by species, island, culmen length and depth and flipper, then NAs are dropped and a new column is made of length/depth and the mean is summaries for flipper length and length/depth ratio\npenguins_clean |> select(species, island, culmen_length_mm, culmen_depth_mm, flipper_length_mm)  |> drop_na(culmen_length_mm, culmen_depth_mm, flipper_length_mm) |> mutate(culmen_ratio = culmen_length_mm / culmen_depth_mm) |> group_by(species, island) |> summarise(mean_flipper_length = mean(flipper_length_mm), mean_culmen_ratio = mean(culmen_ratio)) |> arrange(species, island) -> penguins_culmen_ratio\n\n## View summary table\nprint(penguins_culmen_ratio)\n\n\n### Data visualization \npenguins_clean |>\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm, color = species)) +\n          geom_point() +\n                labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\") +\n                      theme_minimal()\n# Packages ----\n# Install and load necessary packages\nlibrary(tidyverse)\nlibrary(janitor)\n# Loads the penguins dataset\nlibrary(palmerpenguins)\n\n\n# Clean the data ----\npenguins_raw <- janitor::clean_names(penguins_raw)\n\n# Analysis----\n# Data exploration and manipulation to make culmen ratio\npenguins_culmen_ratio <- penguins_raw |> \n  select(species, island, culmen_length_mm, culmen_depth_mm, flipper_length_mm)  |> \n  drop_na(culmen_length_mm, culmen_depth_mm, flipper_length_mm) |> \n  mutate(culmen_ratio = culmen_length_mm / culmen_depth_mm) |>\n  group_by(species, island) |>\n  summarise(mean_flipper_length = mean(flipper_length_mm), \n            mean_culmen_ratio = mean(culmen_ratio)) |>\n  arrange(species, island)\n\n# View summary table\nprint(penguins_culmen_ratio)\n\n# Plots----\n# Data visualization using ggplot2\npenguins_clean |>\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm, color = species)) +\n  geom_point() +\n  labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\") +\n  theme_minimal()"},{"path":"naming-things.html","id":"naming-things","chapter":"6 Naming things","heading":"6 Naming things","text":"Ipso lore ipsum","code":""},{"path":"penguin-project.html","id":"penguin-project","chapter":"7 Penguin project","heading":"7 Penguin project","text":"workshop work setting project loading data. curated cleaned dataset can work generating insights data.biologist used asking questions gathering data. also important learn aspects research process. includes responsible data management (understanding data files & spreadsheet organisation, keeping data safe) data analysis.chapter look structure data files, read R. also continue develop reproducible scripts. means writing scripts well organised easy read, also making sure scripts complete capable reproducing analysis start finish.Transparency reproducibility key values scientific research, analyse data reproducible way means others can understand check work. also means important person can benefit work, ! return analysis even short break, thanking earlier self worked clear reproducible way, can pick right left .","code":""},{"path":"penguin-project.html","id":"meet-the-penguins","chapter":"7 Penguin project","heading":"7.1 Meet the Penguins","text":"data, taken palmerpenguins (Horst et al. (2022)) package originally published Gorman et al. (2014). course work real data shared researchers.palmer penguins data contains size measurements, clutch observations, blood isotope ratios three penguin species observed three islands Palmer Archipelago, Antarctica study period three years.data collected 2007 - 2009 Dr. Kristen Gorman Palmer Station Long Term Ecological Research Program, part US Long Term Ecological Research Network. data imported directly Environmental Data Initiative (EDI) Data Portal, available use CC0 license (“Rights Reserved”) accordance Palmer Station Data Policy. gratefully acknowledge Palmer Station LTER US LTER Network. Special thanks Marty Downs (Director, LTER Network Office) help regarding data license & use. intrepid package co-author, Dr. Gorman, action collecting penguin data:map study site","code":""},{"path":"penguin-project.html","id":"activity-1-organising-our-workspace","chapter":"7 Penguin project","heading":"7.2 Activity 1: Organising our workspace","text":"can begin working data, need set-.Go RStudio Cloud open Penguins R projectGo RStudio Cloud open Penguins R projectCreate following folders using + New Folder button Files tab\ndata\noutputs\nscripts\nCreate following folders using + New Folder button Files tabdataoutputsscripts\nR case-sensitive type everything EXACTLY printed \nseparate subfolders within project helps keep things tidy, means harder lose things, lets easily tell R exactly go retrieve data.next step workflow well organised project space. RStudio Cloud lot hard work , new data project can set Project space.define project series linked questions uses one (sometimes several) datasets. example coursework assignment particular module project, series linked experiments particular research project might project.Project contain several files, possibly organised sub-folders containing data, R scripts final outputs. might want keep information (wider reading) gathered relevant project.\nFigure 7.1: example typical R project set-\nWithin project notice already one file .Rproj. R project file, useful feature, interacts R tell working specific place computer (case cloud server dialed ). means R automatically treat location project file 'working directory' makes importing exporting easier1.\nimportant NEVER move .Rproj file, may\nprevent workspace opening properly.\n","code":"\ndir.create(\"data\",\n           showWarnings = FALSE)\n\ndir.create(\"outputs\",\n           showWarnings = FALSE)\n\ndir.create(\"scripts\",\n           showWarnings = FALSE)\n\n# or this can be run using apply\nlapply(c(\"data\", \"outputs\", \"scripts\"), function(dir_name) {\n  dir.create(dir_name, showWarnings = FALSE)\n})"},{"path":"penguin-project.html","id":"activity-2-access-our-data","chapter":"7 Penguin project","heading":"7.3 Activity 2: Access our data","text":"Now project workspace, ready import data.Use link open page browser data openUse link open page browser data openRight-click Save download csv format computer (Make note file downloaded e.g. Downloads)Right-click Save download csv format computer (Make note file downloaded e.g. Downloads)\nFigure 7.2: Top image: Penguins data viewed Excel, Bottom image: Penguins data native csv format\nraw format, line CSV separated commas different values. open spreadsheet program like Excel automatically converts comma-separated values tables columns.","code":""},{"path":"penguin-project.html","id":"activity-3-upload-our-data","chapter":"7 Penguin project","heading":"7.4 Activity 3: Upload our data","text":"data now Downloads folder computerThe data now Downloads folder computerWe need upload data remote cloud-server (RStudio Cloud), select upload files server button Files tabWe need upload data remote cloud-server (RStudio Cloud), select upload files server button Files tabPut file data folder - make mistake select tickbox file, go cogs button choose option Move.Put file data folder - make mistake select tickbox file, go cogs button choose option Move.\nFigure 7.3: Highlighted buttons upload files, options\n","code":""},{"path":"penguin-project.html","id":"read-data-from-a-url","chapter":"7 Penguin project","heading":"7.4.1 Read data from a url","text":"also possible use url filepath","code":"\nread_csv(\"https://raw.githubusercontent.com/UEABIO/data-sci-v1/main/book/files/penguins_raw.csv\")"},{"path":"penguin-project.html","id":"activity-4-make-a-script","chapter":"7 Penguin project","heading":"7.5 Activity 4: Make a script","text":"now create new R script file write instructions store comments manipulating data, developing tables figures. Use File > New Script menu item select R Script.Add following:load following add-package R script, just underneath comments. Tidyverse actually one package, bundle many different packages play well together - example includes ggplot2 used last session, call separatelyAdd following script:Save file inside scripts folder call 01_import_penguins_data.R\nClick document outline button (top right script pane). \nshow use \n\n“# TITLES—-”\n\nAllows us build series headers subheaders, \nuseful using longer scripts.\n","code":"\n#___________________________----\n# SET UP ----\n## An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n### Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. ----\n#__________________________----\n# PACKAGES ----\nlibrary(tidyverse) # tidy data packages\nlibrary(janitor) # cleans variable names\n#__________________________----"},{"path":"penguin-project.html","id":"activity-5-read-in-data","chapter":"7 Penguin project","heading":"7.6 Activity 5: Read in data","text":"Now can read data. use function readr::read_csv() allows us read .csv files. also functions allow read .xlsx files formats, however course use .csv files.First, create object called penguins_data contains data penguins_raw.csv file.First, create object called penguins_data contains data penguins_raw.csv file.Add following script, check document outline:Add following script, check document outline:\nNote differences read.csv() \nread_csv. covered differences tibbles\ndataframes - obviously difference column\nnames.\n","code":"\npenguins <- read.csv (\"data/penguins_raw.csv\")\n\nattributes(penguins) # reads as data.frame\n\nhead(penguins) # check the data has loaded, prints first 10 rows of dataframe\n# IMPORT DATA ----\npenguins <- read_csv (\"data/penguins_raw.csv\")\n\nattributes(penguins) # reads as tibble\n\nhead(penguins) # check the data has loaded, prints first 10 rows of dataframe\n#__________________________----"},{"path":"penguin-project.html","id":"activity-check-your-script","chapter":"7 Penguin project","heading":"7.7 Activity: Check your script","text":"","code":"\n#___________________________----\n# SET UP ----\n## An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n### Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. ----\n#__________________________----\n\n# PACKAGES ----\nlibrary(tidyverse) # tidy data packages\nlibrary(janitor) # cleans variable names\nlibrary(lubridate) # make sure dates are processed properly\n#__________________________----\n\n# IMPORT DATA ----\npenguins <- read_csv (\"data/penguins_raw.csv\")\n\nhead(penguins) # check the data has loaded, prints first 10 rows of dataframe\n#__________________________----"},{"path":"penguin-project.html","id":"activity-test-yourself","chapter":"7 Penguin project","heading":"7.8 Activity: Test yourself","text":"Question 1. order make R project reproducible filepath use?Absolute filepathRelative filepathQuestion 2. acceptable include raw datafile?Highlighting blocks cellsExcel formulaeA column observational notes fielda mix ddmmyy yymmdd date formatsQuestion 3. always first set functions script? ?()Question 4. reading data R useread_csv()read.csv()Question 5. format penguins data ?wide datalong dataEach column unique variable row unique observation data long (tidy) formatQuestion 6. working directory projects default set location ?data filesthe .Rproj fileyour R scriptQuestion 7. Using filepath \"data/penguins_raw.csv\" example ofan absolute filepatha relative filepathQuestion 8. operator need use wish assign output read_csv function R object (rather just print dataframe console)?","code":""},{"path":"data-wrangling-with-dplyr.html","id":"data-wrangling-with-dplyr","chapter":"8 Data wrangling with dplyr","heading":"8 Data wrangling with dplyr","text":"chapter learn use tidyverse functions data clean wrangle:established date data, able perform calculations. date range across data collected.","code":"\npenguins |> \n  summarise(min_date=min(date_egg_proper),\n            max_date=max(date_egg_proper))"},{"path":"data-wrangling-with-dplyr.html","id":"activity-1-change-column-names","chapter":"8 Data wrangling with dplyr","heading":"8.1 Activity 1: Change column names","text":"going learn organise data using tidy format2. using tidyverse packages Wickham (2023). opinionated, highly effective method generating reproducible analyses wide-range data manipulation tools. Tidy data easy format computers read. also required data structure statistical tests work later.'tidy' refers specific structure lets us manipulate visualise data ease. tidy dataset variable one column row contains one observation. cell table/spreadsheet contains values. One observation might make tidy data quite long - generates lot rows data - might remember tidy data can referred long-format data (opposed wide data).know data R, know columns names imported. still know whether values imported correctly, whether captured rows.","code":""},{"path":"data-wrangling-with-dplyr.html","id":"add-this-to-your-script","chapter":"8 Data wrangling with dplyr","heading":"8.1.0.1 Add this to your script","text":"run colnames() get identities column dataframeStudy name: identifier year sets observations madeStudy name: identifier year sets observations madeRegion: area observation recordedRegion: area observation recordedIsland: specific island observation recordedIsland: specific island observation recordedStage: Denotes reproductive stage penguinStage: Denotes reproductive stage penguinIndividual ID: unique ID individualIndividual ID: unique ID individualClutch completion: study nest observed full clutch e.g. 2 eggsClutch completion: study nest observed full clutch e.g. 2 eggsDate egg: date study nest observed 1 eggDate egg: date study nest observed 1 eggCulmen length: length dorsal ridge bird's bill (mm)Culmen length: length dorsal ridge bird's bill (mm)Culmen depth: depth dorsal ridge bird's bill (mm)Culmen depth: depth dorsal ridge bird's bill (mm)Flipper Length: length bird's flipper (mm)Flipper Length: length bird's flipper (mm)Body Mass: Bird's mass (g)Body Mass: Bird's mass (g)Sex: Denotes sex birdSex: Denotes sex birdDelta 15N : ratio stable Nitrogen isotopes 15N:14N blood sampleDelta 15N : ratio stable Nitrogen isotopes 15N:14N blood sampleDelta 13C: ratio stable Carbon isotopes 13C:12C blood sampleDelta 13C: ratio stable Carbon isotopes 13C:12C blood sample","code":"\n# CHECK DATA----\n# check the data\ncolnames(penguins)\n#__________________________----"},{"path":"data-wrangling-with-dplyr.html","id":"clean-column-names","chapter":"8 Data wrangling with dplyr","heading":"8.1.0.2 Clean column names","text":"Often might want change names variables. might non-intuitive, long. data couple issues:names contain spacesSome names contain spacesSome names capitalised lettersSome names capitalised lettersSome names contain bracketsSome names contain bracketsThis dataframe like correct quickly. R case-sensitive also like spaces brackets variable names","code":"\n# CLEAN DATA ----\n\n# clean all variable names to snake_case using the clean_names function from the janitor package\n# note we are using assign <- to overwrite the old version of penguins with a version that has updated names\n# this changes the data in our R workspace but NOT the original csv file\n\npenguins <- janitor::clean_names(penguins) # clean the column names\n\ncolnames(penguins) # quickly check the new variable names##  [1] \"study_name\"        \"sample_number\"     \"species\"          \n##  [4] \"region\"            \"island\"            \"stage\"            \n##  [7] \"individual_id\"     \"clutch_completion\" \"date_egg\"         \n## [10] \"culmen_length_mm\"  \"culmen_depth_mm\"   \"flipper_length_mm\"\n## [13] \"body_mass_g\"       \"sex\"               \"delta_15_n_o_oo\"  \n## [16] \"delta_13_c_o_oo\"   \"comments\""},{"path":"data-wrangling-with-dplyr.html","id":"rename-columns-manually","chapter":"8 Data wrangling with dplyr","heading":"8.1.0.3 Rename columns (manually)","text":"clean_names function quickly converts variable names snake case. N C blood isotope ratio names still quite long though, clean dplyr::rename() \"new_name\" = \"old_name\".","code":"\nnames(penguins)[names(penguins) == \"delta_15_n_o_oo\"] <- \"delta_15n\"\n\nnames(penguins)[names(penguins) == \"delta_13_c_o_oo\"] <- \"delta_13c\"\n# shorten the variable names for N and C isotope blood samples\n\npenguins <- rename(penguins,\n         \"delta_15n\"=\"delta_15_n_o_oo\",  # use rename from the dplyr package\n         \"delta_13c\"=\"delta_13_c_o_oo\")"},{"path":"data-wrangling-with-dplyr.html","id":"check-data","chapter":"8 Data wrangling with dplyr","heading":"8.2 Check data","text":"","code":""},{"path":"data-wrangling-with-dplyr.html","id":"glimpse-check-data-format","chapter":"8 Data wrangling with dplyr","heading":"8.2.0.1 glimpse: check data format","text":"run glimpse() get several lines output. number observations \"rows\", number variables \"columns\". Check csv file - . next lines see variable names type data.can see dataset 345 rows (including headers) 17 variables\nalso provides information type data column<chr> - means character text data<chr> - means character text data<dbl> - means numerical data<dbl> - means numerical data","code":"\nattributes(penguins)\nglimpse(penguins)"},{"path":"data-wrangling-with-dplyr.html","id":"rename-text-values","chapter":"8 Data wrangling with dplyr","heading":"8.2.0.2 Rename text values","text":"Sometimes may want rename values variables order make shorthand easier follow. changing values columns, column names.\nchecked code block worked? Inspect new\ntibble check variables renamed wanted.\n","code":"\npenguins$species <- ifelse(penguins$species == \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie\",\n                          ifelse(penguins$species == \"Gentoo penguin (Pygoscelis papua)\", \"Gentoo\",\n                                 ifelse(penguins$species == \"Chinstrap penguin (Pygoscelis antarctica)\", \"Chinstrap\",\n                                        penguins$species)))\n# use mutate and case_when for a statement that conditionally changes the names of the values in a variable\npenguins <- penguins |> \n  mutate(species = case_when(species == \"Adelie Penguin (Pygoscelis adeliae)\" ~ \"Adelie\",\n                             species == \"Gentoo penguin (Pygoscelis papua)\" ~ \"Gentoo\",\n                             species == \"Chinstrap penguin (Pygoscelis antarctica)\" ~ \"Chinstrap\"))"},{"path":"data-wrangling-with-dplyr.html","id":"dplyr-verbs","chapter":"8 Data wrangling with dplyr","heading":"8.3 dplyr verbs","text":"section introduced commonly used data wrangling functions, come dplyr package (part tidyverse). functions likely become familiar .","code":""},{"path":"data-wrangling-with-dplyr.html","id":"select","chapter":"8 Data wrangling with dplyr","heading":"8.3.1 Select","text":"wanted create dataset includes certain variables, can use select() function dplyr package.example might wish create simplified dataset contains species, sex, flipper_length_mm body_mass_g.Run code select columnsAlternatively tell R columns want e.g.Note select() change original penguins tibble. spits new tibble directly console.save new tibble, stored. want keep , must create new object.run new code, see anything console, see new object appear Environment pane.","code":"\npenguins[c(\"species\", \"sex\", \"flipper_length_mm\", \"body_mass_g\")]\n# DPLYR VERBS ----\n\nselect(.data = penguins, # the data object\n       species, sex, flipper_length_mm, body_mass_g) # the variables you want to select\npenguins[, !colnames(penguins) %in% c(\"study_name\", \"sample_number\")]\nselect(.data = penguins,\n       -study_name, -sample_number)\nnew_penguins <- select(.data = penguins, \n       species, sex, flipper_length_mm, body_mass_g)"},{"path":"data-wrangling-with-dplyr.html","id":"filter","chapter":"8 Data wrangling with dplyr","heading":"8.3.2 Filter","text":"previously used select() select certain variables, now use filter() select certain rows observations. example Adelie penguins.can equivalence operator ==can use several different operators assess way filter data work tidyverse base R.\nTable 8.1: Boolean expressions\nwanted select Penguin species except Adelies, use 'equals'.asYou can include multiple expressions within filter() pull rows evaluate TRUE conditions.example code pull observations Adelie penguins flipper length measured greater 190mm.","code":"filtered_penguins <- new_penguins[new_penguins$species == \"Adelie Penguin (Pygoscelis adeliae\"), ]\nfilter(.data = new_penguins, species == \"Adelie Penguin (Pygoscelis adeliae)\")\nfilter(.data = new_penguins, species != \"Adelie\")\nfilter(.data = new_penguins, species %in% c(\"Chinstrap\", \"Gentoo\"))\nnew_penguins[new_penguins$species == \"Adelie\" & new_penguins$flipper_length_mm > 190, ]\nfilter(.data = new_penguins, species == \"Adelie\", flipper_length_mm > 190)"},{"path":"data-wrangling-with-dplyr.html","id":"arrange","chapter":"8 Data wrangling with dplyr","heading":"8.3.3 Arrange","text":"function arrange() sorts rows table according columns supplied. exampleThe data now arranged alphabetical order sex. observations female penguins listed males.can also reverse desc()can also sort one column, think code ?","code":"\nnew_penguins[order(new_penguins$sex), ] # define columns to be arranged\narrange(.data = new_penguins, sex)\narrange(.data = new_penguins, desc(sex))\narrange(.data = new_penguins,\n        sex,\n        desc(species),\n        desc(flipper_length_mm))"},{"path":"data-wrangling-with-dplyr.html","id":"mutate","chapter":"8 Data wrangling with dplyr","heading":"8.3.4 Mutate","text":"Sometimes need create new variable exist dataset. example might want figure flipper length factoring body mass.create new variables use function mutate().Note , want save new column must save object. mutating new column attaching new_penguins data oject.","code":"\nnew_penguins$body_mass_kg <- new_penguins$body_mass_g / 1000\nnew_penguins <- mutate(.data = new_penguins,\n                     body_mass_kg = body_mass_g/1000)"},{"path":"data-wrangling-with-dplyr.html","id":"pipes","chapter":"8 Data wrangling with dplyr","heading":"8.4 Pipes","text":"Pipes look like : |> Pipes allow send output one function straight another function. Specifically, send result function |> first argument function |>. usual, easier show, rather tell look example.reason function called pipe 'pipes' data next function. wrote code previously, first argument function dataset wanted work . use pipes automatically take data previous line code need specify .Take penguins data \nSelect species, sex flipper length columns \nFilter keep observations labelled sex equals male \nArrange data HIGHEST LOWEST flipper lengths.\nR version 4 onwards now “native pipe”\n|>\n\ndoesn’t require tidyverse magrittr package \n“old pipe” %>% packages load \nuse.\n\nmay familiar magrittr pipe see \ntutorials, website usages. native pipe works equivalntly \nsituations want read operational\ndifferences, \nsite good job explaining .\n","code":"\n# this example uses brackets to nest and order functions\narrange(.data = filter(.data = select(.data = penguins, species, sex, flipper_length_mm), sex == \"MALE\"), desc(flipper_length_mm))\n# this example uses sequential R objects to make the code more readable\nobject_1 <- select(.data = penguins, species, sex, flipper_length_mm)\nobject_2 <- filter(.data = object_1, sex == \"MALE\")\narrange(object_2, desc(flipper_length_mm))\n# this example is human readable without intermediate objects\npenguins |>  \n  select(species, sex, flipper_length_mm) |>  \n  filter(sex == \"MALE\") |>  \n  arrange(desc(flipper_length_mm))"},{"path":"data-wrangling-with-dplyr.html","id":"a-few-more-handy-functions","chapter":"8 Data wrangling with dplyr","heading":"8.5 A few more handy functions","text":"","code":""},{"path":"data-wrangling-with-dplyr.html","id":"check-for-duplication","chapter":"8 Data wrangling with dplyr","heading":"8.5.1 Check for duplication","text":"easy inputting data make mistakes, copy something twice example, someone lot copy-pasting assemble spreadsheet (yikes!). can check pretty quicklyGreat!duplications investigate ","code":"\n# check for duplicate rows in the data\npenguins |> \n  duplicated() |>  # produces a list of TRUE/FALSE statements for duplicated or not\n  sum() # sums all the TRUE statements[1] 0\n# Check duplicated rows\npenguins |> \n    filter(duplicated(penguins))\n# Keep only unduplicated data\npenguins |> \n    filter(!duplicated(penguins))"},{"path":"data-wrangling-with-dplyr.html","id":"summarise","chapter":"8 Data wrangling with dplyr","heading":"8.5.2 Summarise","text":"can also explore data obvious typos checking implausibly small large values, simple use summarise function.minimum weight penguins 2.7kg, max 6.3kg - outrageous. min come 27g might suspicious. use summarise calculate metrics future.\nfirst data insight, difference smallest adult penguin \ndataset nearly half size largest penguin.\n","code":"\n# use summarise to make calculations\npenguins |> \n  summarise(min=min(body_mass_g, na.rm=TRUE), \n            max=max(body_mass_g, na.rm=TRUE))"},{"path":"data-wrangling-with-dplyr.html","id":"group-by","chapter":"8 Data wrangling with dplyr","heading":"8.5.3 Group By","text":"Many data analysis tasks can approached using “split-apply-combine” paradigm: split data groups, apply analysis group, combine results. dplyr makes easy group_by() function. summarise example able find max-min body mass values penguins dataset. wanted break grouping species penguin. group_by() comes .Now know little data, max weight Gentoo penguins much larger two species. fact, minimum weight Gentoo penguin far max weight two species.","code":"\n#Things start to get more complicated with Base R\n\nsplit(penguins$body_mass_g, penguins$species) |> \n    lapply(function(x) c(min(x, na.rm = TRUE), max(x, na.rm = TRUE))) |> \n    do.call(rbind, args = _ ) |> \n  as.data.frame()\npenguins |> \n  group_by(species) |>  # subsequent functions are perform \"by group\"\n  summarise(min=min(body_mass_g, na.rm=TRUE), \n            max=max(body_mass_g, na.rm=TRUE))"},{"path":"data-wrangling-with-dplyr.html","id":"distinct","chapter":"8 Data wrangling with dplyr","heading":"8.5.4 Distinct","text":"can also look typos asking R produce distinct values variable. useful categorical data, expect distinct categoriesHere someone mistyped e.g. 'FMALE' obvious. thing (probably changed names) species.","code":"\nunique(penquins$sex) # only works on vectord\npenguins |>  \n  distinct(sex)"},{"path":"data-wrangling-with-dplyr.html","id":"missing-values-na","chapter":"8 Data wrangling with dplyr","heading":"8.5.5 Missing values: NA","text":"multiple ways check missing values dataBut tell us , fortunately function summary easily","code":"\n# Get a sum of how many observations are missing in our dataframe\npenguins |> \n  is.na() |> \n  sum()"},{"path":"data-wrangling-with-dplyr.html","id":"summary","chapter":"8 Data wrangling with dplyr","heading":"8.6 Summary","text":"provides quick breakdown max min numeric variables, well list many missing observations one. can see appear two missing observations measurements body mass, bill lengths, flipper lengths several blood measures. know sure without inspecting data , likely two birds missing multiple measurements, several measured blood drawn.leave NA's alone now, useful know many .now got clean & tidy dataset, handful first insights data.","code":"\n# produce a summary of our data\nsummary(penguins)\n#__________________________----"},{"path":"data-wrangling-with-dplyr.html","id":"more-summary-tools","chapter":"8 Data wrangling with dplyr","heading":"8.7 More summary tools","text":"often want make calculations aobut groups observations, mean median. often interested comparing responses among groups. example, previously found number distinct penguins entire dataset.\nAdd new lines code script try . Comment\n# add short descriptions achieving \nNow consider groups subsets observations, find number penguins species sex.progress, learning use data wrangling tools. also gaining insights data.Question many female Adelie penguins dataset?Question many Gentoo penguins sex recorded?using summarise group_by lot! powerful functions:group_by adds grouping information data object, subsequent calculations happen group-specific basis.group_by adds grouping information data object, subsequent calculations happen group-specific basis.summarise data aggregation function thart calculates summaries one variables, separately groups defined group_bysummarise data aggregation function thart calculates summaries one variables, separately groups defined group_by","code":"\nunique(penguins$individual_id) |> \n  length()\npenguins |> \n  summarise(n_distinct(individual_id))\n# note aggregate doesn't have functionality to deal with missing data\naggregate(individual_id ~ species + sex, \n          data = penguins, \n          FUN = function(x) length(unique(x)))\npenguins |> \n  group_by(species, sex) |> \n  summarise(n_distinct(individual_id))"},{"path":"data-wrangling-with-dplyr.html","id":"summarise-1","chapter":"8 Data wrangling with dplyr","heading":"8.7.1 summarise()","text":"summarise() whole list useful functions producing descriptive statisticsmin max calculate minimum maximum values numeric vectormin max calculate minimum maximum values numeric vectormean median calculate averages numeric vectormean median calculate averages numeric vectorsd var calculate standard deviation variance numeric vectorsd var calculate standard deviation variance numeric vectorUsing summarise can calculate mean flipper bill lengths penguins:\nNote - provide informative names left side \n=\n\nperforming calculations summarise important set\nna.rm = TRUE, removes missing values \ncalculation\n\nhappens try produce calculations include\nNA? e.g NA + 4 NA * 5\ncan use several functions summarise. means can string several calculations together single step, generate insights data.190 unique IDs 344 total observations appear roughly twice many observations unique individuals. sex ratio roughly even (48% female) average flipper length 201 mm.","code":"\npenguins |> \n  summarise(\n    mean_flipper_length = mean(flipper_length_mm, na.rm=TRUE),\n     mean_culmen_length = mean(culmen_length_mm, na.rm=TRUE))\npenguins |> \n  summarise(n=n(), # number of rows of data\n            num_penguins = n_distinct(individual_id), # number of unique individuals\n            mean_flipper_length = mean(flipper_length_mm, na.rm=TRUE), # mean flipper length\n            prop_female = sum(sex == \"FEMALE\", na.rm=TRUE) / n()) # proportion of observations that are coded as female"},{"path":"data-wrangling-with-dplyr.html","id":"summarize-across-columns","chapter":"8 Data wrangling with dplyr","heading":"8.7.1.1 Summarize across columns","text":"across two arguments, .cols .fns..cols argument lets select columns wish apply functions toThe .cols argument lets select columns wish apply functions toThe .fns argument applies required function selected columns..fns argument applies required function selected columns.example calculates means & numeric variables dataset.example slightly complicated way running n_distinct summarise. .cols() looks column contains word \"penguin\" runs n_distinct()command ","code":"\n# Across ----\n# The mean of ALL numeric columns in the data, where(is.numeric == TRUE) hunts for numeric columns\n\npenguins |> \n  summarise(across(.cols = where(is.numeric), \n                   .fns = ~ mean(., na.rm=TRUE)))\n# number of distinct penguins, as only one column contains the word penguin\n# the argument contains looks for columns that match a character expression\n\npenguins |> \n  summarise(across(.cols = contains(\"individual\"), \n                   .fns = ~n_distinct(.)))"},{"path":"data-wrangling-with-dplyr.html","id":"group_by-revisited","chapter":"8 Data wrangling with dplyr","heading":"8.7.2 group_by revisited","text":"group_by function provides ability separate summary functions according subgroups wish make. real magic happens pair summarise mutate.example, grouping individual penguin ids, summarising n - can see many times penguin monitored course study.\nRemember actions group_by “invisible”.\nSubsequent functions applied “grouped ” manner - \ndataframe looks unchanged.\n","code":"\npenguin_stats <- penguins |> \n  group_by(individual_id) |> \n  summarise(num=n())"},{"path":"data-wrangling-with-dplyr.html","id":"more-than-one-grouping-variable","chapter":"8 Data wrangling with dplyr","heading":"8.7.2.1 More than one grouping variable","text":"need calculate one variable time?\nproblem can submit several arguments:can calculate mean flipper length penguins six combinationsNow first row summary table shows us mean flipper length (mm) female Adelie penguins. eight rows total, six unique combinations two rows sex penguins recorded(NA)","code":"\npenguins_grouped <- penguins |> \n  group_by(sex, species)\npenguins_grouped |> \nsummarise(mean_flipper = mean(flipper_length_mm, na.rm=TRUE))"},{"path":"data-wrangling-with-dplyr.html","id":"using-group_by-with-mutate","chapter":"8 Data wrangling with dplyr","heading":"8.7.2.2 using group_by with mutate","text":"far used group_by summarise function, always case.\nmutate used group_by, calculations occur 'group'. example:calculating group centered mean, new variable contains difference observation mean whichever group observation .","code":"\n# Using mutate and group_by ----\ncentered_penguins <- penguins |> \n  group_by(sex, species) |> \n  mutate(flipper_centered = flipper_length_mm-mean(flipper_length_mm, na.rm=TRUE))\n\ncentered_penguins |> \n  select(flipper_centered)\n# Each row now returns a value for EACH penguin of how much greater/lesser than the group average (sex and species) its flipper is. "},{"path":"data-wrangling-with-dplyr.html","id":"remove-group_by","chapter":"8 Data wrangling with dplyr","heading":"8.7.2.3 remove group_by","text":"occasion may need remove grouping information dataset. often required string pipes together, need work using grouping structure, revert back whole dataset againLook grouped dataframe, can see information groups top data:Look output - can see information groups now removed data.","code":"# A tibble: 344 x 10\n# Groups:   sex, species [8]\n   species island culmen_length_mm culmen_depth_mm flipper_length_~ body_mass_g\n   <chr>   <chr>           <dbl>         <dbl>            <dbl>       <dbl>\n 1 Adelie  Torge~           39.1          18.7              181        3750\n 2 Adelie  Torge~           39.5          17.4              186        3800\n 3 Adelie  Torge~           40.3          18                195        3250\n# Run this command will remove the groups - but this is only saved if assigned BACK to an object\n\ncentered_penguins <- centered_penguins |> \n  ungroup()\n\ncentered_penguins"},{"path":"data-wrangling-with-dplyr.html","id":"working-with-character-strings","chapter":"8 Data wrangling with dplyr","heading":"8.8 Working with character strings","text":"Datasets often contain words, call words \"(character) strings\".Often quite want , can manipulate much like. Functions package stringr, fantastic. number different types manipulations endless!","code":"\n# Stringr ----\n\nstr_replace_all(names(penguins), c(\"e\"= \"E\"))\n# replace all character \"e\" with \"E\""},{"path":"data-wrangling-with-dplyr.html","id":"more-stringr","chapter":"8 Data wrangling with dplyr","heading":"8.8.1 More stringr","text":"can also trim leading trailing empty spaces str_trim. often problematic difficult spot e.g.can easily imagine scenario data manually input, trailing leading spaces left . difficult spot eye - problematic far R concerned different values. can use function distinct return names different levels can find dataframe.pipe data throught str_trim function remove gaps, pipe distinct - removing whitespace, R now recognises just one level data.quick example extract partial strings according pattern use str_detect. Combined filter possible subset dataframe searching strings match provided information, penguin IDs start \"N1\"","code":"\npenguins %>% \n  mutate(species=str_to_upper(species))\n# Capitalise all letters\npenguins %>% \n  mutate(species=str_remove_all(species, \"e\"))\n# remove every character \"e\" from selected variables\ndf2 <- tibble(label=c(\"penguin\", \" penguin\", \"penguin \")) \ndf2 # make a test dataframe\ndf2 %>% \n  distinct()\ndf2 %>% \n  mutate(label=str_trim(label, side=\"both\")) %>% \n  distinct()\npenguins %>% \n  filter(str_detect(individual_id, \"N1\"))"},{"path":"data-wrangling-with-dplyr.html","id":"separate","chapter":"8 Data wrangling with dplyr","heading":"8.8.2 separate","text":"Sometimes string might contain two pieces information one. confirm tidy data principles. can easily separate information separate() tidyr package.First produce made-dataWe started one variable called label split two variables, treatment replicate, split made - occurs.\nopposite function unite()","code":"\ndf <- tibble(label=c(\"a-1\", \"a-2\", \"a-3\")) \n#make a one column tibble\ndf\ndf %>% \n  separate(label, # name of variable\n           c(\"treatment\", \"replicate\"), # new column names\n           sep=\"-\") # the character to mark where the separation occurs"},{"path":"data-wrangling-with-dplyr.html","id":"working-with-dates","chapter":"8 Data wrangling with dplyr","heading":"8.9 Working with dates","text":"Working dates can tricky, treating date strictly numeric problematic, account number days months number months year.Additionally lot different ways write date:13-10-201913-10-201910-13-201910-13-201913-10-1913-10-1913th Oct 201913th Oct 20192019-10-132019-10-13This variability makes difficult tell software read information, luckily can use functions lubridate package.\nget warning dates parsed, \nmight find date inconsistently entered \ndataset.\n\nPay attention warning error messages\nDepending interpret date ordering file, can use ymd(), ydm(), mdy(), dmy()Question appropriate function use date_egg variable?use mutate function dplyr create new variable called date_egg_proper based output converting characters date_egg date format. original variable left intact, specified \"new\" variable also called date_egg overwritten original variable.","code":"\npenguins <- penguins |>\n  mutate(date_egg_proper = lubridate::dmy(date_egg))"},{"path":"data-wrangling-with-dplyr.html","id":"calculations-with-dates","chapter":"8 Data wrangling with dplyr","heading":"8.9.0.1 Calculations with dates","text":"many times penguin measured, across total time period?Cool can also convert intervals days weeks, months years dweeks(1), dmonths(1), dyears(1).cool functions, check RStudio cheat sheet information. Date type data common datasets, learning work useful skill.extract year date - now update dataframe","code":"\npenguins |> \n  group_by(individual_id) |> \n  summarise(first_observation=min(date_egg_proper), \n            last_observation=max(date_egg_proper), \n            study_duration = last_observation-first_observation, \n            n=n())\npenguins |> \n  group_by(individual_id) |> \n  summarise(first_observation=min(date_egg_proper), \n            last_observation=max(date_egg_proper), \n            study_duration_years = (last_observation-first_observation)/lubridate::dyears(1), \n            n=n()) |> \n    arrange(desc(study_duration_years))\npenguins <- penguins |> \n  mutate(year = as.integer(lubridate::year(date_egg_proper)))"},{"path":"data-wrangling-with-dplyr.html","id":"factors","chapter":"8 Data wrangling with dplyr","heading":"8.10 Factors","text":"R, factors class data allow ordered categories fixed set acceptable values.Typically, convert column character numeric class factor want set intrinsic order values (“levels”) can displayed non-alphabetically plots tables, use linear model analyses (later).Another common use factors standardise legends plots fluctuate certain values temporarily absent data.","code":"\npenguins <- penguins |> \n  mutate(flipper_range = case_when(flipper_length_mm <= 190 ~ \"small\",\n                                   flipper_length_mm >190 & flipper_length_mm < 213 ~ \"medium\",\n                                   flipper_length_mm >= 213 ~ \"large\"))"}]
