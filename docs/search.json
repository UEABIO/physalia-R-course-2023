[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"course introduce scientists practitioners interested applying statistical approaches daily routine using R working environment. Participants introduced R R Studio learning perform common statistical analyses. short introduction R principles, focus questions addressed using common statistical analyses, descriptive statistics statistical inference.","code":""},{"path":"index.html","id":"learning-outcomes","chapter":"Overview","heading":"0.1 Learning outcomes","text":"Understand read, interpret write scripts R.Understand read, interpret write scripts R.Learn statistical tools address common questions research activities.Learn statistical tools address common questions research activities.introduction efficient, readable reproducible analysesAn introduction efficient, readable reproducible analysesBeing comfortable using R performing descriptive inferential statistics.comfortable using R performing descriptive inferential statistics.","code":""},{"path":"index.html","id":"packages","chapter":"Overview","heading":"0.2 Packages","text":"","code":"\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(rstatix)\nlibrary(performance)\nlibrary(see)\nlibrary(lmerTest)\nlibrary(patchwork)\nlibrary(broom.mixed)\nlibrary(ggeffects)\nlibrary(DHARMa)\nlibrary(sjPlot)\nlibrary(emmeans)\nlibrary(report)\nlibrary(MuMIn)\nlibrary(GGally)\nlibrary(colorBlindness)"},{"path":"introduction-to-r-and-rstudio.html","id":"introduction-to-r-and-rstudio","chapter":"1 Introduction to R and RStudio","heading":"1 Introduction to R and RStudio","text":"R name programming language learn course.R name programming language learn course.RStudio convenient interface using throughout course order learn organise data, produce accurate data analyses & data visualisations.RStudio convenient interface using throughout course order learn organise data, produce accurate data analyses & data visualisations.R programming language write code , RStudio Integrated Development Environment (IDE) makes working R easier. Think knowing English using plain text editor like NotePad write book versus using word processor like Microsoft Word. , look good much harder without things like spell-checking formatting. similar way, can use R without R Studio recommend . key thing remember although work using RStudio course, actually using two pieces software means time--time, may separate updates.R RStudio can downloaded free onto personal computers(see Appendices), convenience use classroom space RStudio Cloud.RStudio Cloud cloud-based service can log remotely hosted servers host data analysis projects.advantage using RStudio Cloud extra packages functions need course already installed. can log-workspace computer long internet connection remember username password. can also \"visit\" projects help get stuck, hosted RStudio Cloud.Eventually may also add extra tools like GitHub RMarkdown data reproducibility, literate collaborative programming.end course hope tools confidently analyze real data, make informative beautiful data visuals, able analyze lots different types data.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"using-rstudio-cloud","chapter":"1 Introduction to R and RStudio","heading":"1.1 Using RStudio Cloud","text":"sessions run cloud-based software. make free account, join Workspace.signed - see two spaces:workspace - personal use (20hrs/month)workspace - personal use (20hrs/month)shared classroom - educational licence (limit)shared classroom - educational licence (limit)Make sure working classroom workspace - can distribute project work 'visit' projects needed.RStudio Cloud works exactly way RStudio, means download software. can access hosted cloud server projects browser connection (Chrome works best), computer.good reference guide RStudio Cloud","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"getting-to-know-rstudio","chapter":"1 Introduction to R and RStudio","heading":"1.2 Getting to know RStudio","text":"R Studio console can try code (appearing bottom left window), script editor (top left), window showing functions objects created \"Environment\" tab (top right window figure), window shows plots, files packages, help documentation (bottom right).\nFigure 1.1: RStudio interface\nlearn use features included R Studio throughout course, however, highly recommend watching RStudio Essentials 1 point.video lasts ~30 minutes gives tour main parts R Studio.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"consoles-vs.-scripts","chapter":"1 Introduction to R and RStudio","heading":"1.2.1 Consoles vs. scripts","text":"script window place enter run code easily edited saved future use. Usually Script Window shown top left RStudio. window shown, visible open previously saved R script, create new R Script. create new R Script clicking File > New File > R Script RStudio menu bar.script window place enter run code easily edited saved future use. Usually Script Window shown top left RStudio. window shown, visible open previously saved R script, create new R Script. create new R Script clicking File > New File > R Script RStudio menu bar.execute code R script, can either highlight code click Run, can highlight code press CTRL + Enter keyboard.execute code R script, can either highlight code click Run, can highlight code press CTRL + Enter keyboard.console: can enter code directly Console Window click Enter. commands run shown History Window top right RStudio. Though much difficult keep track work way.console: can enter code directly Console Window click Enter. commands run shown History Window top right RStudio. Though much difficult keep track work way.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"environment","chapter":"1 Introduction to R and RStudio","heading":"1.2.2 Environment","text":"Environment tab (top right) allows see objects workspace. create variables data frames, visual listing everything current workspace. start new project completely empty.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"plots-files-packages-help","chapter":"1 Introduction to R and RStudio","heading":"1.2.3 Plots, files, packages, help","text":"Plots - Plots panel, shows plots. buttons opening plot separate window exporting plot pdf jpeg (though can also code.)Plots - Plots panel, shows plots. buttons opening plot separate window exporting plot pdf jpeg (though can also code.)Files - files panel gives access file directory hard drive.Files - files panel gives access file directory hard drive.Packages - Shows list R packages installed harddrive indicates whether currently loaded. Packages loaded current session checked installed yet loaded unchecked. discuss packages later.Packages - Shows list R packages installed harddrive indicates whether currently loaded. Packages loaded current session checked installed yet loaded unchecked. discuss packages later.Help - Help menu R functions. can either type name function search window, use code search function nameHelp - Help menu R functions. can either type name function search window, use code search function name\nFigure 1.2: RStudio interface labelled\n","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"make-rstudio-your-own","chapter":"1 Introduction to R and RStudio","heading":"1.2.4 Make RStudio your own","text":"can personalise RStudio GUI much like.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"get-help","chapter":"1 Introduction to R and RStudio","heading":"1.3 Get Help!","text":"lot sources information using R . helpful places get help issue, just learn moreThe R help system - type help() put name package function querying inside bracketsThe R help system - type help() put name package function querying inside bracketsVignettes - type browseVignettes() console hit Enter, list available vignettes packages displayedVignettes - type browseVignettes() console hit Enter, list available vignettes packages displayedCheat Sheets - available RStudio.com. common packages associate cheat sheet covering basics use . Download/bookmark ones use commonly ggplot2, data transformation dplyr, Data tidying tidyr & Data import.Cheat Sheets - available RStudio.com. common packages associate cheat sheet covering basics use . Download/bookmark ones use commonly ggplot2, data transformation dplyr, Data tidying tidyr & Data import.Google - use Google constantly, continually forget even basic tasks. want remind round number, might type something like R round number - using particular package include search term wellGoogle - use Google constantly, continually forget even basic tasks. want remind round number, might type something like R round number - using particular package include search term wellAsk help - stuck, getting error message, think next, ask someone. , classmate. important show code, include error message. \"work\" helpful. \"code, data using, want X, problem get.\"Ask help - stuck, getting error message, think next, ask someone. , classmate. important show code, include error message. \"work\" helpful. \"code, data using, want X, problem get.\"\nmay daunting send code someone help.\n\nnatural common feel apprehensive, think \ncode really bad. still feel ! learn share\nmistakes, eventually find funny look back\nearly mistakes, laugh mistakes still\noccasionally make!\n","code":""},{"path":"r-basics.html","id":"r-basics","chapter":"2 R basics","heading":"2 R basics","text":"Go RStudio Cloud enter Project labelled Day One - clone project provide project workspace.Follow instructions get used R command line, R works language.","code":""},{"path":"r-basics.html","id":"your-first-r-command","chapter":"2 R basics","heading":"2.1 Your first R command","text":"RStudio pane, navigate console (bottom left) type copy appear >Hit Enter keyboard.answer get?first line shows request made R, next line R's responseYou type > symbol: just R command prompt part actual command.complete expression entered prompt, evaluated result evaluated expression returned. result may auto-printed.Usually, interactive work, explicitly print objects print function; much easier auto-print typing name object hitting return/enter. However, writing scripts, functions, extended programs, sometimes need explicitly print objects.R vector printed, notice index vector printed square brackets [] side. example, see integer sequenceThe numbers square brackets part vector ; merely part printed output.Note : operator used create integer sequences","code":"\n10 + 20\n30\nprint(10 + 20) ## explicit printing\n\n10 + 20 ## autoprinting\n1:30##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n## [26] 26 27 28 29 30"},{"path":"r-basics.html","id":"operators","chapter":"2 R basics","heading":"2.1.1 Operators","text":"different types operators consider R","code":""},{"path":"r-basics.html","id":"assignment-operator","chapter":"2 R basics","heading":"2.1.1.1 Assignment Operator","text":"","code":""},{"path":"r-basics.html","id":"arithmetic-operators","chapter":"2 R basics","heading":"2.1.1.2 Arithmetic Operators","text":"","code":""},{"path":"r-basics.html","id":"relational-operators","chapter":"2 R basics","heading":"2.1.1.3 Relational Operators","text":"","code":""},{"path":"r-basics.html","id":"logical-operators","chapter":"2 R basics","heading":"2.1.1.4 Logical Operators","text":"","code":""},{"path":"r-basics.html","id":"membership-operators","chapter":"2 R basics","heading":"2.1.1.5 Membership Operators","text":"","code":""},{"path":"r-basics.html","id":"typos","chapter":"2 R basics","heading":"2.1.2 Typos","text":"\ngo talk types calculations can\nR, ’s things want point . first\nthing , R good software, ’s still software. ’s\npretty stupid, ’s stupid can’t handle typos. takes\nfaith meant type exactly type.\nSuppose forget hit shift key trying type +, result command ended 10 = 20 rather 10 + 20. Try replicate error message:Error 10 = 20 : invalid (do_set) left-hand side assignmentWhat's going : R tries interpret 10 = 20 command, make sense, gives error message.person sees , might realize typo + = keys right next keyboard. R insight, just gets confused.even trickier typos create errors accidentally form valid R commands. example, meant type 10 + 20 mistakenly pressed neighboring key, end 10 - 20. Now, R read mind know wanted add, subtract, something different happens:case, R produces right answer, wrong question.","code":"\n10 = 20\n10 - 20## [1] -10"},{"path":"r-basics.html","id":"more-simple-arithmetic","chapter":"2 R basics","heading":"2.1.3 More simple arithmetic","text":"One best ways get familiar R experiment . good news quite hard mess things , stress much. Just type whatever like console see happens.Now, console's last line looks like :blinking cursor next plus sign, means R patiently waiting complete command. believes still typing, tried run anything yet. plus sign bit different usual prompt (> symbol). nudge R ready \"add\" typing now typed . example, type 20 hit enter, R complete command like :Alternatively hit escape key, R forget trying return blank line.","code":"> 10+\n+ > 10 +\n+ 20\n[1] 30"},{"path":"r-basics.html","id":"try-some-simple-maths","chapter":"2 R basics","heading":"2.1.4 Try some simple maths","text":"Raise number power anotherMultiplying number \\(x\\) \\(n\\) times called \"raising \\(x\\) \\(n\\)-th power\". Mathematically, written \\(x^n\\). values \\(n\\) special names: particular \\(x^2\\) called \\(x\\)-squared, \\(x^3\\) called \\(x\\)-cubed. , 4th power 5 calculated like :\\[5^4 = 5 \\times 5 \\times 5 \\times 5 \\]","code":"\n1+7\n13-10\n4*6\n12/3\n5^4"},{"path":"r-basics.html","id":"perform-some-combos","chapter":"2 R basics","heading":"2.1.5 Perform some combos","text":"R follows standard order operations (BODMAS/BIDMAS), means first calculates within brackets, deals exponents, followed division multiplication, finally addition subtraction.look two examples see order operations affects results:Similarly want raise number fraction, need surround fraction parentheses ()first one calculates 16 raised power 1, divided answer two. second one raises 16 power half. big difference output.\ncursor console, can press arrow see\nprevious commands.\n\ncan run , edit . Later look \nscripts, essential way re-use, store edit commands.\n","code":"\n3^2-5/2\n(3^2-5)/2\n16^1/2\n16^(1/2)"},{"path":"r-basics.html","id":"true-or-false-data","chapter":"2 R basics","heading":"2.2 \"TRUE or FALSE\" data","text":"Time make sidebar onto another kind data. Many concepts programming rely idea logical value. logical value assertion whether something true false. implemented R pretty straightforward way. two logical values, namely TRUE FALSE. Despite simplicity, logical values useful things. see work.","code":""},{"path":"r-basics.html","id":"assessing-mathematical-truths","chapter":"2 R basics","heading":"2.2.1 Assessing mathematical truths","text":"Time explore different kind data. programming, many concepts rely logical values. logical value statement whether something true false. R, pretty straightforward. two logical values: TRUE FALSE. Despite simplicity, logical values incredibly useful. dive work.R, basic mathematics solid, room manipulation. ask R calculate 2 + 2, always provides answer,point, R performing calculations without explicitly asserting whether \\(2 + 2 = 4\\) true statement. want R make explicit judgment, can use command like :TRUEWhat done use equality operator, ==, force R make \"true false\" judgement.\ndifferent operator assignment operator\n= saw previously.\n\ncommon typo people make trying write logical commands\nR (languages, since “= versus\n==” distinction important programming languages)\naccidentally type = really mean\n==.\nOkay, see R thinks 2 +2 ==5:Now, see happens attempt make R believe two plus two equals five using assignment statement like 2 + 2 = 5 2 + 2 <- 5. outcome:Indeed, R fond idea. quickly realizes 2 + 2 variable (\"non-language object\" part saying), refuses let \"reassign\" . R can quite flexible allows remarkable things redefine parts , fundamental truths simply budge . tamper laws addition, redefine number 2.probably best.","code":"\n2 + 2## [1] 4\n2 + 2 == 4\n2+2 == 5## [1] FALSE\n2 + 2 = 5Error in 2 + 2 = 5 : target of assignment expands to non-language object"},{"path":"r-basics.html","id":"storing-outputs","chapter":"2 R basics","heading":"2.3 Storing outputs","text":"dealing complex questions, often helpful store answers use later steps. Fortunately, quite easy R. can assign results name assignment operator:literally means please assign value 1+2 name . use assignment operator <- make assignment.\nNote shortcut key <- Alt + - (Windows) Option + -\n(Mac)\nperforming action, achieve two things:notice top right-hand pane within Environment tab now object labeled value 3.\nFigure 2.1: object now visible withe value 3 Environment Pane\ncan check variable contains typing Console pressing Enter.can check variable contains typing Console pressing Enter.Keep mind see result operations type object R console press Enter.Keep mind see result operations type object R console press Enter.can now call object time R session perform calculations .happens assign value named object already exists R environment??? exampleThe value now 10.see previous assignment lost, gone forever replaced new value.can assign lots things objects, use calculations build objects.\nRemember: now change value b, value c \nchange.\n\nObjects totally independent \nmade.\n\nOverwriting objects new values means old value lost.\nvalue c?[1] 15When c created product b values 10 15 respectively.\nre-ran command c <- + b changing value b get value 17.Look environment tab - see starting fill now!\nRStudio default save objects memory close\nsession.\n\nnext time logon. might seem nice\nable close things pick left , \nactually quite dangerous. ’s messy, can cause lots problems\nwork scripts later, don’t !\n\nstop RStudio saving objects default go Tools >\nProject Options option change “Save workspace .RData exit” \n“” “Never”.\n\nInstead going learn use scripts quickly re-run\nanalyses working .\n","code":"\na <- 1+2\na  ## autoprinting\n\nprint(a) ## explicit printing\n3\n2 * a\n6\na <- 10\na\nb <- 5\nc <- a + b\nb <- 7\nb\nc"},{"path":"r-basics.html","id":"choosing-names","chapter":"2 R basics","heading":"2.3.1 Choosing names","text":"Use informative variable names. general rule, using meaningful names like orange apple preferred arbitrary ones like variable1 variable2. Otherwise hard remember contents different variables actually .Use informative variable names. general rule, using meaningful names like orange apple preferred arbitrary ones like variable1 variable2. Otherwise hard remember contents different variables actually .Use short variable names. Typing pain -one likes . much prefer use name like apple name like pink_lady_apple.Use short variable names. Typing pain -one likes . much prefer use name like apple name like pink_lady_apple.Use one conventional naming styles multi-word variable names. R lets use certain things legal names. Legal names must start letter number, can followed sequence letters, numbers, ., _. R like using spaces. Upper lower case names allowed, R case sensitive Apple apple different.Use one conventional naming styles multi-word variable names. R lets use certain things legal names. Legal names must start letter number, can followed sequence letters, numbers, ., _. R like using spaces. Upper lower case names allowed, R case sensitive Apple apple different.favourite naming convention snake_case short, lower case , spaces words separated _. easy read easy remember.favourite naming convention snake_case short, lower case , spaces words separated _. easy read easy remember.\nFigure 2.2: courtesy Allison Horst\n","code":""},{"path":"r-basics.html","id":"r-objects","chapter":"2 R basics","heading":"2.4 R objects","text":"R, five fundamental \"atomic\" classes objects:Character: represent text character strings.Character: represent text character strings.Numeric (num) Double (dbl): used real numbers (e.g., decimal numbers).Numeric (num) Double (dbl): used real numbers (e.g., decimal numbers).Integer: Used whole numbers.Integer: Used whole numbers.Complex: complex numbers.Complex: complex numbers.Logical: Represented True False, used logical values.Logical: Represented True False, used logical values.basic type R object vector. can create empty vectors using vector() function. primary rule regarding vectors R vector can contain objects class.However, good rule, exception, \"list.\" Lists represented vectors can hold objects different classes, often used.","code":""},{"path":"r-basics.html","id":"numbers","chapter":"2 R basics","heading":"2.4.1 Numbers","text":"R, \"dbl\" \"num\" refer numeric data types, subtle difference :dbl (\"double\"): refers double-precision floating-point numbers, capable storing real numbers high precision. Double-precision numbers decimal places accuracy can represent wider range values without loss precision. perform arithmetic operations, R typically returns results \"dbl\" values default.dbl (\"double\"): refers double-precision floating-point numbers, capable storing real numbers high precision. Double-precision numbers decimal places accuracy can represent wider range values without loss precision. perform arithmetic operations, R typically returns results \"dbl\" values default.num (\"numeric\"): \"Num\" general term includes double-precision floating-point numbers also integer values. R, integers subtype numeric data. Numeric data can include integers double-precision floating-point numbers, depending specific data represented.num (\"numeric\"): \"Num\" general term includes double-precision floating-point numbers also integer values. R, integers subtype numeric data. Numeric data can include integers double-precision floating-point numbers, depending specific data represented., \"dbl\" specifically denotes double-precision floating-point numbers, \"num\" encompasses broader range numeric data, including integers double-precision numbers. cases, can use \"num\" work numeric data general sense, \"dbl\" focuses higher-precision representation real numbers.","code":""},{"path":"r-basics.html","id":"attributes","chapter":"2 R basics","heading":"2.5 Attributes","text":"R objects can come attributes, essentially metadata object. metadata handy help describe object. instance, data frame, column names serve attributes, clarifying data contained column. examples R object attributes:names() dimnames()names() dimnames()dimensions (e.g., matrices arrays) dim()dimensions (e.g., matrices arrays) dim()class() (e.g., integer, numeric)class() (e.g., integer, numeric)length()length()user-defined attributes metadataOther user-defined attributes metadataYou can access attributes object, , using attributes() function. R object attributes, attributes() function return NULL.","code":""},{"path":"r-basics.html","id":"vectors","chapter":"2 R basics","heading":"2.6 Vectors","text":"working R objects containing single element data, commonly work vectors. vector sequence elements, data type. logical, numerical, character etc.","code":"\nnumeric_vector <- c(1,2,3)\n\ncharacter_vector <- c(\"fruits\", \"vegetables\", \"seeds\")\n\nlogical_vector <- c(TRUE, TRUE, FALSE)\n\ninteger_vector <- 1:10"},{"path":"r-basics.html","id":"coercion","chapter":"2 R basics","heading":"2.6.1 Coercion","text":"R, different classes objects mixed together vector, coercion occurs ensure every element vector belongs class. Coercion process converting objects common class make combination reasonable. see effects implicit coercion provided examples:, outcome depends R can reasonably represent objects vector. aims create vector inclusive class accommodate mixed objects. Keep mind coercion can lead unexpected results, essential aware implicit type conversion mixing different data types R.Objects can also explicitly coerced one class another using .* functions, available.Create following vector check class, note happens attempt coerce numeric, logical characterSometimes, R can’t figure coerce object can result NAs produced","code":"\ny <- c(2.3, \"a\") # Here, we're mixing a numeric value (1.7) with a character value (\"a\"). To make them compatible, R coerces both elements into character values. So, y becomes a character vector.\n\ny <- c(TRUE, 2) # In this case, we're combining a logical value (TRUE) with a numeric value (2). R coerces the logical value into 1, so y becomes a numeric vector.\n\ny <- c(\"a\", TRUE) # We're mixing a character value (\"a\") with a logical value (TRUE). In this scenario, R coerces the logical value into a character value, resulting in y becoming a character vector.\nx <- 0:5\nas.numeric(x)\n\nas.logical(x)\n\nas.character(x)## [1] 0 1 2 3 4 5\n## [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n## [1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\""},{"path":"r-basics.html","id":"matrices","chapter":"2 R basics","heading":"2.7 Matrices","text":"Matrices can thought vectors added dimension attribute. dimension attribute two-element integer vector specifying number rows columns, defines shape structure matrix.\nData frames also two-dimensional can store columns \ndifferent data types - matrices simpler consist elements\ndata type.\nMatrices constructed \"columns-first\" entries start \"upper left\" run columns.can create matrices several ways:Adding dim() existing vectorsAdding dim() existing vectorsColumn/row-binding vectors cbind() rbind()Column/row-binding vectors cbind() rbind()see last operation column names added matrix, can add, change remove column rownames matrix colnames() rownames()","code":"\nm <- matrix(1:6, nrow = 2, ncol = 3) \nm##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\nattributes(m)## $dim\n## [1] 2 3\nm <- 1:6\n\ndim(m) <- c(2,3)\n\nm##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\na <- 1:2\nb <- 3:4\nc <- 5:6\n\nm <- cbind(a,b,c)\nm##      a b c\n## [1,] 1 3 5\n## [2,] 2 4 6\nrownames(m) <- c(\"y\",\"z\")\nm##   a b c\n## y 1 3 5\n## z 2 4 6"},{"path":"r-basics.html","id":"lists","chapter":"2 R basics","heading":"2.8 Lists","text":"Lists versatile fundamental data type R. set apart regular vectors allowing store elements different classes within list. flexibility makes lists powerful various data structures data manipulation tasks.can create lists explicitly using list() function, can take arbitrary number arguments. Lists, combined functions like \"apply\" family, enable perform complex versatile data manipulations analyses R. Lists often used represent heterogeneous data structures, datasets different columns can different data types structures.can also create empty lists set lengths vector() function, can useful preallocating memory iterations - see laterLists can also names","code":"\nl <- list(1, \"apple\", TRUE )\nl## [[1]]\n## [1] 1\n## \n## [[2]]\n## [1] \"apple\"\n## \n## [[3]]\n## [1] TRUE\nl <- vector(\"list\", length = 3)\nl## [[1]]\n## NULL\n## \n## [[2]]\n## NULL\n## \n## [[3]]\n## NULL\nnames(l) <- c(\"apple\",\"orange\",\"pear\")"},{"path":"r-basics.html","id":"dataframes","chapter":"2 R basics","heading":"2.9 Dataframes","text":"Data frames essential storing tabular data R find extensive use various statistical modeling data analysis applications. offer structured way manage work data R, packages like dplyr, developed Hadley Wickham, provide optimized functions efficient data manipulation data frames.key characteristics advantages data frames:Tabular Structure: Data frames type list, element list represents column. number rows column , tabular structure makes suitable working datasets.Tabular Structure: Data frames type list, element list represents column. number rows column , tabular structure makes suitable working datasets.Mixed Data Types: Unlike matrices, data frames can contain columns different classes objects. flexibility allows handle real-world datasets often include variables different data types.Mixed Data Types: Unlike matrices, data frames can contain columns different classes objects. flexibility allows handle real-world datasets often include variables different data types.Column Row Names: Data frames include column names, describe variables predictors. Additionally, special attribute called \"row.names\" provides information row data frame.Column Row Names: Data frames include column names, describe variables predictors. Additionally, special attribute called \"row.names\" provides information row data frame.Creation Conversion: Data frames can created various ways, reading data files using functions like read.table() read.csv(). can also create data frames explicitly data.frame().Creation Conversion: Data frames can created various ways, reading data files using functions like read.table() read.csv(). can also create data frames explicitly data.frame().Working Data: Data frames especially useful working datasets require data cleaning, transformation, merging. provide high level data organization, many R packages designed work seamlessly data frames.Working Data: Data frames especially useful working datasets require data cleaning, transformation, merging. provide high level data organization, many R packages designed work seamlessly data frames.dplyr: dplyr package optimized efficient data manipulation data frames. offers set functions perform data operations quickly intuitively.dplyr: dplyr package optimized efficient data manipulation data frames. offers set functions perform data operations quickly intuitively.Data frames fundamental structure managing tabular data R. excel handling datasets mixed data types essential various data analysis modeling tasks.","code":""},{"path":"r-basics.html","id":"tibbles","chapter":"2 R basics","heading":"2.9.1 Tibbles","text":"“Tibbles” new modern data frame. keeps many important features original data frameA tibble never changes input type.tibble never changes input type.tibble can columns lists.tibble can columns lists.tibble can non-standard variable names.\ncan start number contain spaces.\n-use refer backtick.\ntibble can non-standard variable names.can start number contain spaces.\n-use refer backtick.Tibbles print first 10 rows columns fit screen. - column displays data typeTibbles print first 10 rows columns fit screen. - column displays data type","code":""},{"path":"r-basics.html","id":"error-debugging","chapter":"2 R basics","heading":"2.10 Error/ Debugging","text":"Things go wrong eventually, always ...R pedantic, even smallest typo can result failure typos impossilbe avoid. make mistakes. One type mistake make error. code fails run. common causes error :typostyposmissing commasmissing commasmissing bracketsmissing bracketsThere's nothing wrong making lots errors. trick panic get frustrated, read error message script carefully start debug...... sometimes need walk away come back later!\nTry typing command help() R console, \nopen new tab bottom right.\n\nPut function package brackets get help \nspecific topic\n\nFigure 2.3: courtesy Allison Horst\n","code":""},{"path":"r-basics.html","id":"functions","chapter":"2 R basics","heading":"2.11 Functions","text":"Functions tools R. one helps us different task.Take example function use round number certain number digits - function called roundHere's example:start command function name round. name followed parentheses (). Within place arguments function, separated comma.arguments:x = 2.4326782647 (number like round)x = 2.4326782647 (number like round)digits = 2 (number decimal places like round )digits = 2 (number decimal places like round )Arguments inputs give function. arguments form name = value name specifies argument, value providing define input. first argument x number like round, value 2.4326782647. second argument digits like number rounded specify 2. limit many arguments function .\nCopy paste following code console.\nhelp documentation round()appear bottom right help panel. usage section, see round()takes following form:arguments section, explanations arguments. xis number vector wish round values. digits number decimal places used. description can see value supplied digits default 0 whole number rounding.Read 'Details' section find happens rounding last digit 5.try example just change required argument digits\nCopy paste following code console.\nNow can change additional arguments produce different set numbers.time R still rounded number, done set number 'decimal places'.Always remember use help documentation help understand arguments function requires.","code":"\nround(x  = 2.4326782647, digits = 2)\nhelp(round)\nround(x, digits = 0)\nround(x  = 2.4326782647)## [1] 2\nround(x  = 2.4326782647, digits = 2)## [1] 2.43"},{"path":"r-basics.html","id":"storing-the-output-of-functions","chapter":"2 R basics","heading":"2.11.1 Storing the output of functions","text":"need answer function later calculation. answer use assignment operator <-.example assign values two R objects can call inside R function though putting numbers directly.\nCopy paste following code console.\nvalue assigned R object rounded_number ?[1] 2.433","code":"\nnumber_of_digits <- 3\n\nmy_number <- 2.4326782647\n\nrounded_number <- round(x  = my_number, \n                        digits = number_of_digits)"},{"path":"r-basics.html","id":"more-fun-with-functions","chapter":"2 R basics","heading":"2.11.2 More fun with functions","text":"Copy paste :Looks like even give names arguments function still work. works function round expects us give number value first, argument rounding digits second. assumes know expected ordering within function, might case functions use lot. give arguments proper names can actually introduce order want.Try :gives different answer\nRemember naming arguments overrides position defaults\nknow argument orders defaults? Well get know lot functions work practice, can also use help() .","code":"\nround(2.4326782647, 2)\nround(digits = 2, x  = 2.4326782647)\nround(2, 2.4326782647)"},{"path":"r-basics.html","id":"packages-1","chapter":"2 R basics","heading":"2.12 Packages","text":"install R access range functions including options data wrangling statistical analysis. functions included default installation typically referred Base R useful cheat sheet shows many Base R functions hereHowever, power R extendable open source - anyone can create new package extends functions R.R package container various things including functions data. make easy complicated protocols using custom-built functions. Later see can write simple functions. Packages lot like new apps extending functionality phone can .RStudio Cloud already installed several add-packages, need use simple function library() load packages workspace. complete access custom functions contain.\nCopy paste following code console.\nggplot2 - one popular packages use R. \"grammar graphics\" packages dedicated making data visualisations, contains lots dedicated functions .ggplot2 - one popular packages use R. \"grammar graphics\" packages dedicated making data visualisations, contains lots dedicated functions .palmerpenguins - good example data-heavy package, contains functions, instead datasets can use.palmerpenguins - good example data-heavy package, contains functions, instead datasets can use.\ncommon source errors call function part \npackage forgetting load package.\n\nR says something like “Error ”function-name”: find X”\nlikely function misspelled package containing\nfunction hasn’t loaded.\n","code":"\nlibrary(ggplot2)\nlibrary(palmerpenguins)"},{"path":"r-basics.html","id":"organising-scripts","chapter":"2 R basics","heading":"2.12.1 Organising scripts","text":"Scripts work best well organised - well documented. Simple tricks consistent organisation can make work easier read reproduced others.bookmark Tidyverse Style Guide, opinionated way organising scripts code consistent style, maximises readability. Later course use benchmark assessing code writing.Annotating instructions provides others insights . vital aspect robust reproducible workflow. come back script, one week, one month one year now often wonder command . , useful make notes , useful case anyone else ever read script. Make comments helpful humans read.already seen signal comment # key. Everything line # ignored R treated command. also see marked different colour script.\nPut following comment script line 1.\ncan also use # produce Headers different levels, follow commented lines - = shown figure .\n(#fig:script outline)R script document outline. Push button five horizontal lines reveal R recognises headers subheaders\n","code":"\n# I really love R"},{"path":"r-basics.html","id":"loading-packages","chapter":"2 R basics","heading":"2.12.2 Loading packages","text":"use functions package script must loaded call functions data contain. sensible place put library calls packages top script. now,\nAdd commandslibrary(ggplot2) \nlibrary(palmerpenguins) script.\n\nThink organise script using image \nguide\n\nPut comment next package explaining “Hint\nuse help() function”.\n\nUse document outline button help organise script.\n\nR Studio interpret Unicode present images can\ninclude scripts. ’s necessary, fun way help\norganise scripts.\n","code":"\n# I really love R\n# _______________----\n\n# 📦 PACKAGES ----\n\nlibrary(ggplot2) # create elegant data visualisations\nlibrary(palmerpenguins) # Palmer Archipelago Penguin Data\n\n# ______________----"},{"path":"r-basics.html","id":"adding-more-code","chapter":"2 R basics","heading":"2.12.3 Adding more code","text":"\nAdd code script, underneath sections \nalready \nsimilar code ran earlier, preceded plot_1 <-","code":"\n# DATA VISUAL ----\n\nplot_1 <- ggplot(data = penguins, # calls ggplot function, data is penguins\n           aes(x = bill_length_mm, # sets x axis as bill length\n               y = bill_depth_mm)) + # sets y axis value as bill depth\n          geom_point(aes(colour=species)) # geometric to plot\n\n# ______________----"},{"path":"r-basics.html","id":"running-your-script","chapter":"2 R basics","heading":"2.12.4 Running your script","text":"run commands script, need get Console. select copy/paste Console. couple faster shortcuts.Hit Run button top right script pane. Pressing run line code cursor sitting .Hit Run button top right script pane. Pressing run line code cursor sitting .Pressing Ctrl+Enter thing hitting Run buttonPressing Ctrl+Enter thing hitting Run buttonIf want run whole script one go press Ctrl+either click Run press Ctrl+EnterIf want run whole script one go press Ctrl+either click Run press Ctrl+EnterTry now.notice unlike making previous data visuals, immediately see graph, assigned output functions R object, instead default action R print output. Check \"Environment\" tab - able see plot_1 .see new plot made type plot_1 R console. add underneath script run !","code":""},{"path":"r-basics.html","id":"making-an-output","chapter":"2 R basics","heading":"2.12.5 Making an output","text":"next trick make script outputs file. Underneath lines code generate figure add new function ggsave(). re-run script. find function (arguments contains), type help(ggsave) console.Check Files tab RStudio Cloud, now new file workspace called \"2022_10_01_5023Y_workshop_1_penguin_scatterplot.png\".Wow mouthful! made long filename? Well contains information help know future.DateDateModule codeModule codeShort description file contentsShort description file contents\nimportant naming conventions files.\n\nEverything . file extension information\ninforming computer process contents file.\n.png stands “Portable Graphics Format”, means\ndata uncompressed image format.\n\nEverything . humans, good idea\nmake sure naming convention.\n\nAvoid periods, spaces slashes, instead use YYYYMMDD \nunderscores\n\ne.g. YYYYMMDD_short_image_description.fileextension\n","code":"\n# OUTPUT TO FILE ----\n\nggsave(filename = \"2022_10_01_5023Y_workshop_1_penguin_scatterplot.png\", \n       plot = plot_1, \n       dpi = 300, \n       width = 6, \n       height = 6)\n# _________________----"},{"path":"r-basics.html","id":"saving-your-script","chapter":"2 R basics","heading":"2.12.6 Saving your script","text":"script now contains code comments first workshop. need save .Alongside data, script precious part analysis. need save anything else, outputs etc. script can always used generate everything . Note colour script - name changes colour unsaved changes. Press Save button go File > Save . Give File sensible name like \"YYYYMMDD_5023Y_workshop_1_simple_commands\" bottom right pane Files now able see saved script, saved .R file extension indicating R Script.now safely quit R, log next time project, script waiting .","code":"\n# I really love R\n# _______________----\n\n# 📦 PACKAGES ----\n\nlibrary(ggplot2) # create elegant data visualisations\nlibrary(palmerpenguins) # Palmer Archipelago Penguin Data\n\n# ________________----\n# DATA VISUAL ----\n\nplot_1 <- ggplot(data = penguins, # calls ggplot function, data is penguins\n           aes(x = bill_length_mm, # sets x axis as bill length\n               y = bill_depth_mm)) + # sets y axis value as bill depth\n          geom_point(aes(colour=species)) # geometric to plot\n\n# ______________----\n\n# OUTPUT TO FILE ----\n\nggsave(filename = \"2022_10_01_5023Y_workshop_1_penguin_scatterplot.png\", \n       plot = plot_1, \n       dpi = 300, \n       width = 6, \n       height = 6)\n# _________________----"},{"path":"r-basics.html","id":"quitting","chapter":"2 R basics","heading":"2.13 Quitting","text":"Make sure saved changes R script - need make sure done!Make sure saved changes R script - need make sure done!want take look script let knowIf want take look script let knowIf spotted mistakes errors let knowIf spotted mistakes errors let knowClose RStudio Cloud BrowserClose RStudio Cloud BrowserComplete week's short quiz!Complete week's short quiz!","code":""},{"path":"r-basics.html","id":"activity-1","chapter":"2 R basics","heading":"2.14 Activity 1","text":"","code":""},{"path":"r-basics.html","id":"complete-this-quiz","chapter":"2 R basics","heading":"2.14.1 Complete this Quiz","text":"get correct answer, answer box turn green. Sometimes work Internet Explorer Edge sure use Chrome Firefox.Question 1. output 5^4Question 2. answer get type 2+2 = 4 R console?TRUEFALSEErrorIf wanted R make judgement must use == = otherwise get Error messageQuestion 3. symbol use want assign value output function R objectQuestion 4. value ran following commands?Question 5. variable naming conventions written correctly?snake_casecamelCaseScreaming_Snake_Casekebab-caseQuestion 6. type R console want help round() function?Question 7. statements function arguments trueArguments inputs give functionValues R arguments must always defined userNaming arguments supersedes position functionThere limit number arguments function haveQuestion 8. Evaluate statement \"R Package can contain code functions, data, .\"TRUEFALSE","code":"\na <-  12*2\n\na <- 5\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] palmerpenguins_0.1.1 kableExtra_1.3.4     xml2_1.3.5          \n##  [4] rvest_1.0.3          faux_1.2.1           extrafont_0.19      \n##  [7] knitr_1.43           webexercises_1.1.0   glossary_1.0.0      \n## [10] lubridate_1.9.2      forcats_1.0.0        stringr_1.5.0       \n## [13] dplyr_1.1.2          purrr_1.0.1          readr_2.1.4         \n## [16] tidyr_1.3.0          tibble_3.2.1         ggplot2_3.4.2       \n## [19] tidyverse_2.0.0     \n## \n## loaded via a namespace (and not attached):\n##  [1] sass_0.4.6        utf8_1.2.3        generics_0.1.3    stringi_1.7.12   \n##  [5] extrafontdb_1.0   hms_1.1.3         digest_0.6.33     magrittr_2.0.3   \n##  [9] evaluate_0.21     grid_4.3.1        timechange_0.2.0  bookdown_0.34    \n## [13] fastmap_1.1.1     jsonlite_1.8.7    httr_1.4.6        fansi_1.0.4      \n## [17] viridisLite_0.4.2 scales_1.2.1      codetools_0.2-19  jquerylib_0.1.4  \n## [21] cli_3.6.1         rlang_1.1.1       munsell_0.5.0     withr_2.5.0      \n## [25] cachem_1.0.8      yaml_2.3.7        tools_4.3.1       tzdb_0.4.0       \n## [29] memoise_2.0.1     colorspace_2.1-0  webshot_0.5.5     vctrs_0.6.3      \n## [33] R6_2.5.1          lifecycle_1.0.3   fs_1.6.2          pkgconfig_2.0.3  \n## [37] pillar_1.9.0      bslib_0.5.0       gtable_0.3.3      glue_1.6.2       \n## [41] systemfonts_1.0.4 xfun_0.39         tidyselect_1.2.0  rstudioapi_0.15.0\n## [45] htmltools_0.5.5   svglite_2.1.1     rmarkdown_2.23    Rttf2pt1_1.3.12  \n## [49] compiler_4.3.1    downlit_0.4.3"},{"path":"loading-data.html","id":"loading-data","chapter":"3 Loading data","heading":"3 Loading data","text":"workshop work loading data. curated cleaned dataset can work generating insights data.biologist used asking questions gathering data. also important learn aspects research process. includes responsible data management (understanding data files & spreadsheet organisation, keeping data safe) data analysis.chapter look structure data files, read R. also continue develop reproducible scripts. means writing scripts well organised easy read, also making sure scripts complete capable reproducing analysis start finish.Transparency reproducibility key values scientific research, analyse data reproducible way means others can understand check work. also means important person can benefit work, ! return analysis even short break, thanking earlier self worked clear reproducible way, can pick right left .","code":""},{"path":"loading-data.html","id":"meet-the-penguins","chapter":"3 Loading data","heading":"3.1 Meet the Penguins","text":"data, taken palmerpenguins (Horst et al. (2022)) package originally published Gorman et al. (2014). course work real data shared researchers.palmer penguins data contains size measurements, clutch observations, blood isotope ratios three penguin species observed three islands Palmer Archipelago, Antarctica study period three years.data collected 2007 - 2009 Dr. Kristen Gorman Palmer Station Long Term Ecological Research Program, part US Long Term Ecological Research Network. data imported directly Environmental Data Initiative (EDI) Data Portal, available use CC0 license (“Rights Reserved”) accordance Palmer Station Data Policy. gratefully acknowledge Palmer Station LTER US LTER Network. Special thanks Marty Downs (Director, LTER Network Office) help regarding data license & use. intrepid package co-author, Dr. Gorman, action collecting penguin data:map study site","code":""},{"path":"loading-data.html","id":"activity-1-organising-our-workspace","chapter":"3 Loading data","heading":"3.2 Activity 1: Organising our workspace","text":"can begin working data, need set-.Go RStudio Cloud open Penguins R projectGo RStudio Cloud open Penguins R projectCreate following folders using + New Folder button Files tab\ndata\noutputs\nscripts\nCreate following folders using + New Folder button Files tabdataoutputsscripts\nR case-sensitive type everything EXACTLY printed \nseparate subfolders within project helps keep things tidy, means harder lose things, lets easily tell R exactly go retrieve data.next step workflow well organised project space. RStudio Cloud lot hard work , new data project can set Project space.define project series linked questions uses one (sometimes several) datasets. example coursework assignment particular module project, series linked experiments particular research project might project.Project contain several files, possibly organised sub-folders containing data, R scripts final outputs. might want keep information (wider reading) gathered relevant project.\nFigure 3.1: example typical R project set-\nWithin project notice already one file .Rproj. R project file, useful feature, interacts R tell working specific place computer (case cloud server dialed ). means R automatically treat location project file 'working directory' makes importing exporting easier1.\nimportant NEVER move .Rproj file, may\nprevent workspace opening properly.\n","code":""},{"path":"loading-data.html","id":"activity-2-access-our-data","chapter":"3 Loading data","heading":"3.3 Activity 2: Access our data","text":"Now project workspace, ready import data.Use link open page browser data openUse link open page browser data openRight-click Save download csv format computer (Make note file downloaded e.g. Downloads)Right-click Save download csv format computer (Make note file downloaded e.g. Downloads)Compare data looks \"raw\" format open data ExcelCompare data looks \"raw\" format open data ExcelAt first glance data might look quite strange messy. stored CSV comma-separated values file. CSV files plain text files can store large amounts data, can readily imported spreadsheet storage database.files simplest form database, coloured cells, formulae, text formatting. row row data, value row (previously separate columns) separated comma.file format helps us maintain ethos Keep Raw Data Raw -many cases, captured collected data may unique impossible reproduce, measurements lab field observations. reason, protected possible loss. Every time change made raw data file threatens integrity information.practice, means use data file data entry storage. data manipulation, cleaning analysis happens R, using transparent reproducible scripts.\navoid saving files Excel format nasty\nhabit formatting even losing data file gets large\nenough.\n\n[https://www.theguardian.com/politics/2020/oct/05/-excel-may--caused-loss--16000-covid-tests--england].\n\nneed add data csv file, can always open \nExcel-like program add information, remember save \noriginal csv format afterwards.\n\nFigure 3.2: Top image: Penguins data viewed Excel, Bottom image: Penguins data native csv format\nraw format, line CSV separated commas different values. open spreadsheet program like Excel automatically converts comma-separated values tables columns.\nprobably used working Excel (.xls .xlsx)\nfile formats, widely supported, CSV files, simple\ntext formats supported data interfaces. also \nproprietary (e.g. Excel format owned Microsoft), working\n.csv format data open accessible.\n","code":""},{"path":"loading-data.html","id":"activity-3-upload-our-data","chapter":"3 Loading data","heading":"3.4 Activity 3: Upload our data","text":"data now Downloads folder computerThe data now Downloads folder computerWe need upload data remote cloud-server (RStudio Cloud), select upload files server button Files tabWe need upload data remote cloud-server (RStudio Cloud), select upload files server button Files tabPut file data folder - make mistake select tickbox file, go cogs button choose option Move.Put file data folder - make mistake select tickbox file, go cogs button choose option Move.\nFigure 3.3: Highlighted buttons upload files, options\n","code":""},{"path":"loading-data.html","id":"activity-4-make-a-script","chapter":"3 Loading data","heading":"3.5 Activity 4: Make a script","text":"now create new R script file write instructions store comments manipulating data, developing tables figures. Use File > New Script menu item select R Script.Add following:load following add-package R script, just underneath comments. Tidyverse actually one package, bundle many different packages play well together - example includes ggplot2 used last session, call separatelyAdd following script:Save file inside scripts folder call 01_import_penguins_data.R\nClick document outline button (top right script pane). \nshow use \n\n#TITLES—-\n\nAllows us build series headers subheaders, \nuseful using longer scripts.\n","code":"\n#___________________________----\n# SET UP ----\n## An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n### Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. ----\n#__________________________----\n# PACKAGES ----\nlibrary(tidyverse) # tidy data packages\nlibrary(janitor) # cleans variable names\nlibrary(lubridate) # make sure dates are processed properly\n#__________________________----"},{"path":"loading-data.html","id":"activity-5-read-in-data","chapter":"3 Loading data","heading":"3.6 Activity 5: Read in data","text":"Now can read data. use function readr::read_csv() allows us read .csv files. also functions allow read .xlsx files formats, however course use .csv files.First, create object called penguins_data contains data penguins_raw.csv file.First, create object called penguins_data contains data penguins_raw.csv file.Add following script, check document outline:Add following script, check document outline:\nNote differences read.csv() \nread_csv. covered differences tibbles\ndataframes - obviously difference column\nnames.\n","code":"\npenguins <- read.csv (\"data/penguins_raw.csv\")\n\nattributes(penguins) # reads as data.frame\n\nhead(penguins) # check the data has loaded, prints first 10 rows of dataframe\n# IMPORT DATA ----\npenguins <- read_csv (\"data/penguins_raw.csv\")\n\nattributes(penguins) # reads as tibble\n\nhead(penguins) # check the data has loaded, prints first 10 rows of dataframe\n#__________________________----"},{"path":"loading-data.html","id":"filepaths","chapter":"3 Loading data","heading":"3.7 Filepaths","text":"example read_csv() function requires provide filepath (\"quotes\"), order tell R file wish read located example two components\"data/\" - specifies directory look file\"data/\" - specifies directory look file\"penguins_raw.csv\" - specifies name format file\"penguins_raw.csv\" - specifies name format file","code":""},{"path":"loading-data.html","id":"directories","chapter":"3 Loading data","heading":"3.7.0.1 Directories","text":"directory refers folder computer relationships folders. term “directory” considers relationship folder folders within around . Directories hierarchical means can exist within folders well folders exist within .\nidea directories files ? alone File\nFound\n\"parent\" directory folder contains subdirectory. example downloads folder directory, parent directory subdirectories files contained within .","code":""},{"path":"loading-data.html","id":"home-directory","chapter":"3 Loading data","heading":"3.7.0.2 Home directory","text":"home directory computer directory defined operating system. home directory primary directory user account computer. files default stored home directory.Windows, home directory typically C:\\Users\\-username.Windows, home directory typically C:\\Users\\-username.Mac Linux, home directory typically /home/-username.Mac Linux, home directory typically /home/-username.","code":""},{"path":"loading-data.html","id":"working-directory","chapter":"3 Loading data","heading":"3.7.0.3 Working directory","text":"working directory refers directory computer tool assumes starting place filepaths","code":""},{"path":"loading-data.html","id":"absolute-vs-relative-filepaths","chapter":"3 Loading data","heading":"3.7.1 Absolute vs Relative filepaths","text":"got working R?use programming language, specify filepaths order program find files read-output files.Absolute file path path contains entire path file directory starting Home directory ending file directory wish access e.g./home/-username/project/data/penguins_raw.csvThe main drawbacks using absolute file paths :share files, another user won’t directory structure , need recreate file pathsIf share files, another user won’t directory structure , need recreate file pathsif alter directory structure, ’ll need rewrite pathsif alter directory structure, ’ll need rewrite pathsan absolute file path likely longer relative path, backslashes need edited, scope error.absolute file path likely longer relative path, backslashes need edited, scope error.different computers can different path constructions, scripts use absolute filepaths reproducible.Relative filepath path relative working directory location computer.use RStudio Projects, wherever .Rproj file located set working directory. means .Rproj file located project folder relative path data :data/penguins_raw.csvThis filepath shorter means share project someone else script run without editing.\nusing RStudio Cloud, remember working \nLinux OS cloud server, different absolute\nfilepath - scripts project working right now\nwork using relative filepaths\n","code":""},{"path":"loading-data.html","id":"activity-5-check-your-script","chapter":"3 Loading data","heading":"3.8 Activity 5: Check your script","text":"","code":"\n#___________________________----\n# SET UP ----\n## An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n### Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. ----\n#__________________________----\n\n# PACKAGES ----\nlibrary(tidyverse) # tidy data packages\nlibrary(janitor) # cleans variable names\nlibrary(lubridate) # make sure dates are processed properly\n#__________________________----\n\n# IMPORT DATA ----\npenguins <- read_csv (\"data/penguins_raw.csv\")\n\nhead(penguins) # check the data has loaded, prints first 10 rows of dataframe\n#__________________________----"},{"path":"loading-data.html","id":"activity-7-test-yourself","chapter":"3 Loading data","heading":"3.9 Activity 7: Test yourself","text":"Question 1. order make R project reproducible filepath use?Absolute filepathRelative filepathQuestion 2. acceptable include raw datafile?Highlighting blocks cellsExcel formulaeA column observational notes fielda mix ddmmyy yymmdd date formatsQuestion 3. always first set functions script? ?()Question 4. reading data R useread_csv()read.csv()Question 5. format penguins data ?wide datalong dataEach column unique variable row unique observation data long (tidy) formatQuestion 6. working directory projects default set location ?data filesthe .Rproj fileyour R scriptQuestion 7. Using filepath \"data/penguins_raw.csv\" example ofan absolute filepatha relative filepathQuestion 8. operator need use wish assign output read_csv function R object (rather just print dataframe console)?","code":""},{"path":"data-wrangling-part-one.html","id":"data-wrangling-part-one","chapter":"4 Data wrangling part one","heading":"4 Data wrangling part one","text":"may surprise learn scientists actually spend far time cleaning preparing data spend actually analysing . means completing tasks cleaning bad values, changing structure dataframes, reducing data subset observations, producing data summaries.Many people seem operate assumption option data cleaning painstaking time-consuming cutting pasting data within spreadsheet program like Excel. witnessed students colleagues waste days, weeks, even months manually transforming data Excel, cutting, copying, pasting data. Fixing data hand terrible use time, error-prone reproducible. Additionally, age can easily collect massive datasets online, able organise, clean, prepare hand.short, thrive scientist learn key data wrangling skills. Although every dataset presents unique challenges, systematic principles follow make analyses easier, less error-prone, efficient, reproducible.chapter see data science skills allow efficiently get answers nearly question might want ask data. learning properly make computer hard boring work , can focus bigger issues.","code":""},{"path":"data-wrangling-part-one.html","id":"activity-1-change-column-names","chapter":"4 Data wrangling part one","heading":"4.1 Activity 1: Change column names","text":"going learn organise data using tidy format2. using tidyverse packages Wickham (2023). opinionated, highly effective method generating reproducible analyses wide-range data manipulation tools. Tidy data easy format computers read. also required data structure statistical tests work later.'tidy' refers specific structure lets us manipulate visualise data ease. tidy dataset variable one column row contains one observation. cell table/spreadsheet contains values. One observation might make tidy data quite long - generates lot rows data - might remember tidy data can referred long-format data (opposed wide data).know data R, know columns names imported. still know whether values imported correctly, whether captured rows.","code":""},{"path":"data-wrangling-part-one.html","id":"add-this-to-your-script","chapter":"4 Data wrangling part one","heading":"4.1.0.1 Add this to your script","text":"run colnames() get identities column dataframeStudy name: identifier year sets observations madeStudy name: identifier year sets observations madeRegion: area observation recordedRegion: area observation recordedIsland: specific island observation recordedIsland: specific island observation recordedStage: Denotes reproductive stage penguinStage: Denotes reproductive stage penguinIndividual ID: unique ID individualIndividual ID: unique ID individualClutch completion: study nest observed full clutch e.g. 2 eggsClutch completion: study nest observed full clutch e.g. 2 eggsDate egg: date study nest observed 1 eggDate egg: date study nest observed 1 eggCulmen length: length dorsal ridge bird's bill (mm)Culmen length: length dorsal ridge bird's bill (mm)Culmen depth: depth dorsal ridge bird's bill (mm)Culmen depth: depth dorsal ridge bird's bill (mm)Flipper Length: length bird's flipper (mm)Flipper Length: length bird's flipper (mm)Body Mass: Bird's mass (g)Body Mass: Bird's mass (g)Sex: Denotes sex birdSex: Denotes sex birdDelta 15N : ratio stable Nitrogen isotopes 15N:14N blood sampleDelta 15N : ratio stable Nitrogen isotopes 15N:14N blood sampleDelta 13C: ratio stable Carbon isotopes 13C:12C blood sampleDelta 13C: ratio stable Carbon isotopes 13C:12C blood sample","code":"\n# CHECK DATA----\n# check the data\ncolnames(penguins)\n#__________________________----"},{"path":"data-wrangling-part-one.html","id":"clean-column-names","chapter":"4 Data wrangling part one","heading":"4.1.0.2 Clean column names","text":"Often might want change names variables. might non-intuitive, long. data couple issues:names contain spacesSome names contain spacesSome names capitalised lettersSome names capitalised lettersSome names contain bracketsSome names contain bracketsThis dataframe like correct quickly. R case-sensitive also like spaces brackets variable names","code":"\n# CLEAN DATA ----\n\n# clean all variable names to snake_case using the clean_names function from the janitor package\n# note we are using assign <- to overwrite the old version of penguins with a version that has updated names\n# this changes the data in our R workspace but NOT the original csv file\n\npenguins <- janitor::clean_names(penguins) # clean the column names\n\ncolnames(penguins) # quickly check the new variable names##  [1] \"study_name\"        \"sample_number\"     \"species\"          \n##  [4] \"region\"            \"island\"            \"stage\"            \n##  [7] \"individual_id\"     \"clutch_completion\" \"date_egg\"         \n## [10] \"culmen_length_mm\"  \"culmen_depth_mm\"   \"flipper_length_mm\"\n## [13] \"body_mass_g\"       \"sex\"               \"delta_15_n_o_oo\"  \n## [16] \"delta_13_c_o_oo\"   \"comments\""},{"path":"data-wrangling-part-one.html","id":"rename-columns-manually","chapter":"4 Data wrangling part one","heading":"4.1.0.3 Rename columns (manually)","text":"clean_names function quickly converts variable names snake case. N C blood isotope ratio names still quite long though, clean dplyr::rename() \"new_name\" = \"old_name\".","code":"\nnames(penguins)[names(penguins) == \"delta_15_n_o_oo\"] <- \"delta_15n\"\n\nnames(penguins)[names(penguins) == \"delta_13_c_o_oo\"] <- \"delta_13c\"\n# shorten the variable names for N and C isotope blood samples\n\npenguins <- rename(penguins,\n         \"delta_15n\"=\"delta_15_n_o_oo\",  # use rename from the dplyr package\n         \"delta_13c\"=\"delta_13_c_o_oo\")"},{"path":"data-wrangling-part-one.html","id":"check-data","chapter":"4 Data wrangling part one","heading":"4.2 Check data","text":"","code":""},{"path":"data-wrangling-part-one.html","id":"glimpse-check-data-format","chapter":"4 Data wrangling part one","heading":"4.2.0.1 glimpse: check data format","text":"run glimpse() get several lines output. number observations \"rows\", number variables \"columns\". Check csv file - . next lines see variable names type data.can see dataset 345 rows (including headers) 17 variables\nalso provides information type data column<chr> - means character text data<chr> - means character text data<dbl> - means numerical data<dbl> - means numerical data","code":"\nattributes(penguins)\nglimpse(penguins)"},{"path":"data-wrangling-part-one.html","id":"rename-text-values","chapter":"4 Data wrangling part one","heading":"4.2.0.2 Rename text values","text":"Sometimes may want rename values variables order make shorthand easier follow. changing values columns, column names.\nchecked code block worked? Inspect new\ntibble check variables renamed wanted.\n","code":"\npenguins$species <- ifelse(penguins$species == \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie\",\n                          ifelse(penguins$species == \"Gentoo penguin (Pygoscelis papua)\", \"Gentoo\",\n                                 ifelse(penguins$species == \"Chinstrap penguin (Pygoscelis antarctica)\", \"Chinstrap\",\n                                        penguins$species)))\n# use mutate and case_when for a statement that conditionally changes the names of the values in a variable\npenguins <- penguins |> \n  mutate(species = case_when(species == \"Adelie Penguin (Pygoscelis adeliae)\" ~ \"Adelie\",\n                             species == \"Gentoo penguin (Pygoscelis papua)\" ~ \"Gentoo\",\n                             species == \"Chinstrap penguin (Pygoscelis antarctica)\" ~ \"Chinstrap\"))"},{"path":"data-wrangling-part-one.html","id":"dplyr-verbs","chapter":"4 Data wrangling part one","heading":"4.3 dplyr verbs","text":"section introduced commonly used data wrangling functions, come dplyr package (part tidyverse). functions likely become familiar .","code":""},{"path":"data-wrangling-part-one.html","id":"select","chapter":"4 Data wrangling part one","heading":"4.3.1 Select","text":"wanted create dataset includes certain variables, can use select() function dplyr package.example might wish create simplified dataset contains species, sex, flipper_length_mm body_mass_g.Run code select columnsAlternatively tell R columns want e.g.Note select() change original penguins tibble. spits new tibble directly console.save new tibble, stored. want keep , must create new object.run new code, see anything console, see new object appear Environment pane.","code":"\npenguins[c(\"species\", \"sex\", \"flipper_length_mm\", \"body_mass_g\")]\n# DPLYR VERBS ----\n\nselect(.data = penguins, # the data object\n       species, sex, flipper_length_mm, body_mass_g) # the variables you want to select\npenguins[, !colnames(penguins) %in% c(\"study_name\", \"sample_number\")]\nselect(.data = penguins,\n       -study_name, -sample_number)\nnew_penguins <- select(.data = penguins, \n       species, sex, flipper_length_mm, body_mass_g)"},{"path":"data-wrangling-part-one.html","id":"filter","chapter":"4 Data wrangling part one","heading":"4.3.2 Filter","text":"previously used select() select certain variables, now use filter() select certain rows observations. example Adelie penguins.can equivalence operator ==can use several different operators assess way filter data work tidyverse base R.\nTable 4.1: Boolean expressions\nwanted select Penguin species except Adelies, use 'equals'.asYou can include multiple expressions within filter() pull rows evaluate TRUE conditions.example code pull observations Adelie penguins flipper length measured greater 190mm.","code":"filtered_penguins <- new_penguins[new_penguins$species == \"Adelie Penguin (Pygoscelis adeliae\"), ]\nfilter(.data = new_penguins, species == \"Adelie Penguin (Pygoscelis adeliae)\")\nfilter(.data = new_penguins, species != \"Adelie\")\nfilter(.data = new_penguins, species %in% c(\"Chinstrap\", \"Gentoo\"))\nnew_penguins[new_penguins$species == \"Adelie\" & new_penguins$flipper_length_mm > 190, ]\nfilter(.data = new_penguins, species == \"Adelie\", flipper_length_mm > 190)"},{"path":"data-wrangling-part-one.html","id":"arrange","chapter":"4 Data wrangling part one","heading":"4.3.3 Arrange","text":"function arrange() sorts rows table according columns supplied. exampleThe data now arranged alphabetical order sex. observations female penguins listed males.can also reverse desc()can also sort one column, think code ?","code":"\nnew_penguins[order(new_penguins$sex), ] # define columns to be arranged\narrange(.data = new_penguins, sex)\narrange(.data = new_penguins, desc(sex))\narrange(.data = new_penguins,\n        sex,\n        desc(species),\n        desc(flipper_length_mm))"},{"path":"data-wrangling-part-one.html","id":"mutate","chapter":"4 Data wrangling part one","heading":"4.3.4 Mutate","text":"Sometimes need create new variable exist dataset. example might want figure flipper length factoring body mass.create new variables use function mutate().Note , want save new column must save object. mutating new column attaching new_penguins data oject.","code":"\nnew_penguins$body_mass_kg <- new_penguins$body_mass_g / 1000\nnew_penguins <- mutate(.data = new_penguins,\n                     body_mass_kg = body_mass_g/1000)"},{"path":"data-wrangling-part-one.html","id":"pipes","chapter":"4 Data wrangling part one","heading":"4.4 Pipes","text":"Pipes look like : |> Pipes allow send output one function straight another function. Specifically, send result function |> first argument function |>. usual, easier show, rather tell look example.reason function called pipe 'pipes' data next function. wrote code previously, first argument function dataset wanted work . use pipes automatically take data previous line code need specify .Take penguins data \nSelect species, sex flipper length columns \nFilter keep observations labelled sex equals male \nArrange data HIGHEST LOWEST flipper lengths.\nR version 4 onwards now “native pipe”\n|>\n\ndoesn’t require tidyverse magrittr package \n“old pipe” %>% packages load \nuse.\n\nmay familiar magrittr pipe see \ntutorials, website usages. native pipe works equivalntly \nsituations want read operational\ndifferences, \nsite good job explaining .\n","code":"\n# this example uses brackets to nest and order functions\narrange(.data = filter(.data = select(.data = penguins, species, sex, flipper_length_mm), sex == \"MALE\"), desc(flipper_length_mm))\n# this example uses sequential R objects to make the code more readable\nobject_1 <- select(.data = penguins, species, sex, flipper_length_mm)\nobject_2 <- filter(.data = object_1, sex == \"MALE\")\narrange(object_2, desc(flipper_length_mm))\n# this example is human readable without intermediate objects\npenguins |>  \n  select(species, sex, flipper_length_mm) |>  \n  filter(sex == \"MALE\") |>  \n  arrange(desc(flipper_length_mm))"},{"path":"data-wrangling-part-one.html","id":"a-few-more-handy-functions","chapter":"4 Data wrangling part one","heading":"4.5 A few more handy functions","text":"","code":""},{"path":"data-wrangling-part-one.html","id":"check-for-duplication","chapter":"4 Data wrangling part one","heading":"4.5.1 Check for duplication","text":"easy inputting data make mistakes, copy something twice example, someone lot copy-pasting assemble spreadsheet (yikes!). can check pretty quicklyGreat!","code":"\n# check for duplicate rows in the data\npenguins |> \n  duplicated() |>  # produces a list of TRUE/FALSE statements for duplicated or not\n  sum() # sums all the TRUE statements[1] 0"},{"path":"data-wrangling-part-one.html","id":"summarise","chapter":"4 Data wrangling part one","heading":"4.5.2 Summarise","text":"can also explore data obvious typos checking implausibly small large values, simple use summarise function.minimum weight penguins 2.7kg, max 6.3kg - outrageous. min come 27g might suspicious. use summarise calculate metrics future.\nfirst data insight, difference smallest adult penguin \ndataset nearly half size largest penguin.\n","code":"\n# use summarise to make calculations\npenguins |> \n  summarise(min=min(body_mass_g, na.rm=TRUE), \n            max=max(body_mass_g, na.rm=TRUE))"},{"path":"data-wrangling-part-one.html","id":"group-by","chapter":"4 Data wrangling part one","heading":"4.5.3 Group By","text":"Many data analysis tasks can approached using “split-apply-combine” paradigm: split data groups, apply analysis group, combine results. dplyr makes easy group_by() function. summarise example able find max-min body mass values penguins dataset. wanted break grouping species penguin. group_by() comes .Now know little data, max weight Gentoo penguins much larger two species. fact, minimum weight Gentoo penguin far max weight two species.","code":"\n#Things start to get more complicated with Base R\n\nsplit(penguins$body_mass_g, penguins$species) |> \n    lapply(function(x) c(min(x, na.rm = TRUE), max(x, na.rm = TRUE))) |> \n    do.call(rbind, args = _ ) |> \n  as.data.frame()\npenguins |> \n  group_by(species) |>  # subsequent functions are perform \"by group\"\n  summarise(min=min(body_mass_g, na.rm=TRUE), \n            max=max(body_mass_g, na.rm=TRUE))"},{"path":"data-wrangling-part-one.html","id":"distinct","chapter":"4 Data wrangling part one","heading":"4.5.4 Distinct","text":"can also look typos asking R produce distinct values variable. useful categorical data, expect distinct categoriesHere someone mistyped e.g. 'FMALE' obvious. thing (probably changed names) species.","code":"\nunique(penquins$sex) # only works on vectord\npenguins |>  \n  distinct(sex)"},{"path":"data-wrangling-part-one.html","id":"missing-values-na","chapter":"4 Data wrangling part one","heading":"4.5.5 Missing values: NA","text":"multiple ways check missing values dataBut tell us , fortunately function summary easily","code":"\n# Get a sum of how many observations are missing in our dataframe\npenguins |> \n  is.na() |> \n  sum()"},{"path":"data-wrangling-part-one.html","id":"summary","chapter":"4 Data wrangling part one","heading":"4.6 Summary","text":"provides quick breakdown max min numeric variables, well list many missing observations one. can see appear two missing observations measurements body mass, bill lengths, flipper lengths several blood measures. know sure without inspecting data , likely two birds missing multiple measurements, several measured blood drawn.leave NA's alone now, useful know many .now got clean & tidy dataset, handful first insights data.","code":"\n# produce a summary of our data\nsummary(penguins)\n#__________________________----"},{"path":"data-wrangling-part-one.html","id":"finished","chapter":"4 Data wrangling part one","heading":"4.7 Finished","text":"lot work! remember remember functions, remember chapter data wrangling future. Also bookmark RStudio Cheatsheets Page.Finally, make sure saved changes made script 💾 & make sure workspace set save objects environment sessions.want script record work progress, confused cluttered R Environment.","code":""},{"path":"data-wrangling-part-one.html","id":"activity-reorganise-this-script","chapter":"4 Data wrangling part one","heading":"4.8 Activity: Reorganise this script","text":"Using link take text copy/paste new R script save YYYY_MM_DD_workshop_4_jumbled_script.RAll correct lines code, comments document markers present, correct order. Can unscramble produce sensible output clear document outline?want check answers (just completely stuck) click ","code":""},{"path":"data-wrangling-part-two.html","id":"data-wrangling-part-two","chapter":"5 Data wrangling part two","heading":"5 Data wrangling part two","text":"","code":""},{"path":"data-wrangling-part-two.html","id":"load-your-workspace","chapter":"5 Data wrangling part two","heading":"5.1 Load your workspace","text":"workspace ready work Palmer penguins data. Load workspace now.Think basic checks start work today.","code":""},{"path":"data-wrangling-part-two.html","id":"checklist","chapter":"5 Data wrangling part two","heading":"5.1.1 Checklist","text":"objects already Environment pane? , use rm(list=ls())objects already Environment pane? , use rm(list=ls())Re-run script last time line 1 last lineRe-run script last time line 1 last lineCheck warning error messagesCheck warning error messagesAdd code today's session script goAdd code today's session script go","code":""},{"path":"data-wrangling-part-two.html","id":"more-summary-tools","chapter":"5 Data wrangling part two","heading":"5.2 More summary tools","text":"often want make calculations aobut groups observations, mean median. often interested comparing responses among groups. example, previously found number distinct penguins entire dataset.\nAdd new lines code script try . Comment\n# add short descriptions achieving \nNow consider groups subsets observations, find number penguins species sex.progress, learning use data wrangling tools. also gaining insights data.Question many female Adelie penguins dataset?Question many Gentoo penguins sex recorded?using summarise group_by lot! powerful functions:group_by adds grouping information data object, subsequent calculations happen group-specific basis.group_by adds grouping information data object, subsequent calculations happen group-specific basis.summarise data aggregation function thart calculates summaries one variables, separately groups defined group_bysummarise data aggregation function thart calculates summaries one variables, separately groups defined group_by","code":"\nunique(penguins$individual_id) |> \n  length()\npenguins |> \n  summarise(n_distinct(individual_id))\n# note aggregate doesn't have functionality to deal with missing data\naggregate(individual_id ~ species + sex, \n          data = penguins, \n          FUN = function(x) length(unique(x)))\npenguins |> \n  group_by(species, sex) |> \n  summarise(n_distinct(individual_id))"},{"path":"data-wrangling-part-two.html","id":"summarise-1","chapter":"5 Data wrangling part two","heading":"5.2.1 summarise()","text":"summarise() whole list useful functions producing descriptive statisticsmin max calculate minimum maximum values numeric vectormin max calculate minimum maximum values numeric vectormean median calculate averages numeric vectormean median calculate averages numeric vectorsd var calculate standard deviation variance numeric vectorsd var calculate standard deviation variance numeric vectorUsing summarise can calculate mean flipper bill lengths penguins:\nNote - provide informative names left side \n=\n\nperforming calculations summarise important set\nna.rm = TRUE, removes missing values \ncalculation\n\nhappens try produce calculations include\nNA? e.g NA + 4 NA * 5\ncan use several functions summarise. means can string several calculations together single step, generate insights data.190 unique IDs 344 total observations appear roughly twice many observations unique individuals. sex ratio roughly even (48% female) average flipper length 201 mm.","code":"\npenguins |> \n  summarise(\n    mean_flipper_length = mean(flipper_length_mm, na.rm=TRUE),\n     mean_culmen_length = mean(culmen_length_mm, na.rm=TRUE))\npenguins |> \n  summarise(n=n(), # number of rows of data\n            num_penguins = n_distinct(individual_id), # number of unique individuals\n            mean_flipper_length = mean(flipper_length_mm, na.rm=TRUE), # mean flipper length\n            prop_female = sum(sex == \"FEMALE\", na.rm=TRUE) / n()) # proportion of observations that are coded as female"},{"path":"data-wrangling-part-two.html","id":"summarize-across-columns","chapter":"5 Data wrangling part two","heading":"5.2.1.1 Summarize across columns","text":"across two arguments, .cols .fns..cols argument lets select columns wish apply functions toThe .cols argument lets select columns wish apply functions toThe .fns argument applies required function selected columns..fns argument applies required function selected columns.example calculates means & numeric variables dataset.example slightly complicated way running n_distinct summarise. .cols() looks column contains word \"penguin\" runs n_distinct()command ","code":"\n# Across ----\n# The mean of ALL numeric columns in the data, where(is.numeric == TRUE) hunts for numeric columns\n\npenguins |> \n  summarise(across(.cols = where(is.numeric), \n                   .fns = ~ mean(., na.rm=TRUE)))\n# number of distinct penguins, as only one column contains the word penguin\n# the argument contains looks for columns that match a character expression\n\npenguins |> \n  summarise(across(.cols = contains(\"individual\"), \n                   .fns = ~n_distinct(.)))"},{"path":"data-wrangling-part-two.html","id":"group_by-revisited","chapter":"5 Data wrangling part two","heading":"5.2.2 group_by revisited","text":"group_by function provides ability separate summary functions according subgroups wish make. real magic happens pair summarise mutate.example, grouping individual penguin ids, summarising n - can see many times penguin monitored course study.\nRemember actions group_by “invisible”.\nSubsequent functions applied “grouped ” manner - \ndataframe looks unchanged.\n","code":"\npenguin_stats <- penguins |> \n  group_by(individual_id) |> \n  summarise(num=n())"},{"path":"data-wrangling-part-two.html","id":"more-than-one-grouping-variable","chapter":"5 Data wrangling part two","heading":"5.2.2.1 More than one grouping variable","text":"need calculate one variable time?\nproblem can submit several arguments:can calculate mean flipper length penguins six combinationsNow first row summary table shows us mean flipper length (mm) female Adelie penguins. eight rows total, six unique combinations two rows sex penguins recorded(NA)","code":"\npenguins_grouped <- penguins |> \n  group_by(sex, species)\npenguins_grouped |> \nsummarise(mean_flipper = mean(flipper_length_mm, na.rm=TRUE))"},{"path":"data-wrangling-part-two.html","id":"using-group_by-with-mutate","chapter":"5 Data wrangling part two","heading":"5.2.2.2 using group_by with mutate","text":"far used group_by summarise function, always case.\nmutate used group_by, calculations occur 'group'. example:calculating group centered mean, new variable contains difference observation mean whichever group observation .","code":"\n# Using mutate and group_by ----\ncentered_penguins <- penguins |> \n  group_by(sex, species) |> \n  mutate(flipper_centered = flipper_length_mm-mean(flipper_length_mm, na.rm=TRUE))\n\ncentered_penguins |> \n  select(flipper_centered)\n# Each row now returns a value for EACH penguin of how much greater/lesser than the group average (sex and species) its flipper is. "},{"path":"data-wrangling-part-two.html","id":"remove-group_by","chapter":"5 Data wrangling part two","heading":"5.2.2.3 remove group_by","text":"occasion may need remove grouping information dataset. often required string pipes together, need work using grouping structure, revert back whole dataset againLook grouped dataframe, can see information groups top data:Look output - can see information groups now removed data.","code":"# A tibble: 344 x 10\n# Groups:   sex, species [8]\n   species island culmen_length_mm culmen_depth_mm flipper_length_~ body_mass_g\n   <chr>   <chr>           <dbl>         <dbl>            <dbl>       <dbl>\n 1 Adelie  Torge~           39.1          18.7              181        3750\n 2 Adelie  Torge~           39.5          17.4              186        3800\n 3 Adelie  Torge~           40.3          18                195        3250\n# Run this command will remove the groups - but this is only saved if assigned BACK to an object\n\ncentered_penguins <- centered_penguins |> \n  ungroup()\n\ncentered_penguins"},{"path":"data-wrangling-part-two.html","id":"working-with-character-strings","chapter":"5 Data wrangling part two","heading":"5.3 Working with character strings","text":"Datasets often contain words, call words \"(character) strings\".Often quite want , can manipulate much like. Functions package stringr, fantastic. number different types manipulations endless!","code":"\n# Stringr ----\n\nstr_replace_all(names(penguins), c(\"e\"= \"E\"))\n# replace all character \"e\" with \"E\""},{"path":"data-wrangling-part-two.html","id":"more-stringr","chapter":"5 Data wrangling part two","heading":"5.3.1 More stringr","text":"can also trim leading trailing empty spaces str_trim. often problematic difficult spot e.g.can easily imagine scenario data manually input, trailing leading spaces left . difficult spot eye - problematic far R concerned different values. can use function distinct return names different levels can find dataframe.pipe data throught str_trim function remove gaps, pipe distinct - removing whitespace, R now recognises just one level data.quick example extract partial strings according pattern use str_detect. Combined filter possible subset dataframe searching strings match provided information, penguin IDs start \"N1\"","code":"\npenguins %>% \n  mutate(species=str_to_upper(species))\n# Capitalise all letters\npenguins %>% \n  mutate(species=str_remove_all(species, \"e\"))\n# remove every character \"e\" from selected variables\ndf2 <- tibble(label=c(\"penguin\", \" penguin\", \"penguin \")) \ndf2 # make a test dataframe\ndf2 %>% \n  distinct()\ndf2 %>% \n  mutate(label=str_trim(label, side=\"both\")) %>% \n  distinct()\npenguins %>% \n  filter(str_detect(individual_id, \"N1\"))"},{"path":"data-wrangling-part-two.html","id":"separate","chapter":"5 Data wrangling part two","heading":"5.3.2 separate","text":"Sometimes string might contain two pieces information one. confirm tidy data principles. can easily separate information separate() tidyr package.First produce made-dataWe started one variable called label split two variables, treatment replicate, split made - occurs.\nopposite function unite()","code":"\ndf <- tibble(label=c(\"a-1\", \"a-2\", \"a-3\")) \n#make a one column tibble\ndf\ndf %>% \n  separate(label, # name of variable\n           c(\"treatment\", \"replicate\"), # new column names\n           sep=\"-\") # the character to mark where the separation occurs"},{"path":"data-wrangling-part-two.html","id":"working-with-dates","chapter":"5 Data wrangling part two","heading":"5.4 Working with dates","text":"Working dates can tricky, treating date strictly numeric problematic, account number days months number months year.Additionally lot different ways write date:13-10-201913-10-201910-13-201910-13-201913-10-1913-10-1913th Oct 201913th Oct 20192019-10-132019-10-13This variability makes difficult tell software read information, luckily can use functions lubridate package.\nget warning dates parsed, \nmight find date inconsistently entered \ndataset.\n\nPay attention warning error messages\nDepending interpret date ordering file, can use ymd(), ydm(), mdy(), dmy()Question appropriate function use date_egg variable?use mutate function dplyr create new variable called date_egg_proper based output converting characters date_egg date format. original variable left intact, specified \"new\" variable also called date_egg overwritten original variable.established date data, able perform calculations. date range across data collected.","code":"\npenguins <- penguins |>\n  mutate(date_egg_proper = lubridate::dmy(date_egg))\npenguins |> \n  summarise(min_date=min(date_egg_proper),\n            max_date=max(date_egg_proper))"},{"path":"data-wrangling-part-two.html","id":"calculations-with-dates","chapter":"5 Data wrangling part two","heading":"5.4.0.1 Calculations with dates","text":"many times penguin measured, across total time period?Cool can also convert intervals days weeks, months years dweeks(1), dmonths(1), dyears(1).cool functions, check RStudio cheat sheet information. Date type data common datasets, learning work useful skill.","code":"\npenguins |> \n  group_by(individual_id) |> \n  summarise(first_observation=min(date_egg_proper), \n            last_observation=max(date_egg_proper), \n            study_duration = last_observation-first_observation, \n            n=n())\npenguins |> \n  group_by(individual_id) |> \n  summarise(first_observation=min(date_egg_proper), \n            last_observation=max(date_egg_proper), \n            study_duration_years = (last_observation-first_observation)/lubridate::dyears(1), \n            n=n()) |> \n    arrange(desc(study_duration_years))"},{"path":"data-wrangling-part-two.html","id":"factors","chapter":"5 Data wrangling part two","heading":"5.5 Factors","text":"R, factors class data allow ordered categories fixed set acceptable values.Typically, convert column character numeric class factor want set intrinsic order values (“levels”) can displayed non-alphabetically plots tables, use linear model analyses (later).Another common use factors standardise legends plots fluctuate certain values temporarily absent data.make barplot, order values x axis typically alphabetical order character dataTo convert character numeric column class factor, can use function forcats package. convert class factor also perform allow certain ordering levels - example using forcats::fct_relevel() lets manually specify level order.function as_factor() simply converts class without capabilities.base R function factor() converts column factor allows manually specify order levels, character vector levels = argument.use mutate() fct_relevel() convert column flipper_range class character class factor.Now call plot, can see x axis categories match intrinsic order specified factor levels.\nFactors also important build linear models bit\nlater. reference intercept categorical predictor variable\nread <chr> set R first\none ordered alphabetically. may always \nappropriate choice, changing ordered\n<fct> can manually set intercept.\n","code":"\npenguins <- penguins |> \n  mutate(flipper_range = case_when(flipper_length_mm <= 190 ~ \"small\",\n                                   flipper_length_mm >190 & flipper_length_mm < 213 ~ \"medium\",\n                                   flipper_length_mm >= 213 ~ \"large\"))\npenguins |> \n  ggplot(aes(x = flipper_range))+\n  geom_bar()\npenguins$flipper_range <- factor(penguins$flipper_range)\npenguins <- penguins |> \n  mutate(flipper_range = fct_relevel(flipper_range))\nlevels(penguins$flipper_range)## [1] \"large\"  \"medium\" \"small\"\npenguins$flipper_range <- factor(penguins$flipper_range,\n                                  levels = c(\"small\", \"medium\", \"large\"))\n# Correct the code in your script with this version\npenguins <- penguins |> \n  mutate(flipper_range = fct_relevel(flipper_range, \"small\", \"medium\", \"large\"))\npenguins |> \n  ggplot(aes(x = flipper_range))+\n  geom_bar()"},{"path":"data-wrangling-part-two.html","id":"finished-1","chapter":"5 Data wrangling part two","heading":"5.6 Finished","text":"Make sure saved script 💾 given filename \"01_import_penguins_data.R\" \"scripts\" folder.Make sure saved script 💾 given filename \"01_import_penguins_data.R\" \"scripts\" folder.workspace look like ?workspace look like ?\nFigure 5.1: neat project layout\n\nFigure 5.2: scripts file subdirectory\n","code":""},{"path":"data-wrangling-part-two.html","id":"activity-test-yourself","chapter":"5 Data wrangling part two","heading":"5.7 Activity: Test yourself","text":"Question 1. order subset data rows use function select()filter()group_by()Question 2. order subset data columns use function select()filter()group_by()Question 3. order make new column use function group_by()select()mutate()arrange()Question 4. operator use send output line code next line? Question 5. outcome following line code?penguins dataframe object reduced include Adelie penguins now onA new filtered dataframe Adelie penguins printed consoleUnless output series functions \"assigned\" object using <- saved, results immediately printed. code modified order create new filtered object penguins_filteredQuestion 5. main point data \"pipe\"?code runs fasterThe code easier readQuestion 6. naming convention outputted function `janitor::clean_names() \nsnake_casecamelCaseSCREAMING_SNAKE_CASEkebab-caseQuestion 7. package provides useful functions manipulating character strings?stringrggplot2lubridateforcatsQuestion 8. package provides useful functions manipulating dates?stringrggplot2lubridateforcatsQuestion 9. specify character variable factor, ordering default ?numericalalphabeticalorder dataframe","code":"\npenguins |> \n  filter(species == \"Adelie\")\npenguins_filtered <- penguins |> \n  filter(species == \"Adelie\")"},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"packages-for-automated-exploratory-data-analysis","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6 Packages for Automated Exploratory Data Analysis","text":"realm data science, use automated exploratory analysis gaining prominence powerful approach. methodology offers way data analysts scientists rapidly gain insights datasets, particularly working tidyverse tools, without need laborious manual inspections individual variables creation numerous plots. aim streamline speed workflow, making data exploration efficient effective. achieve , data professionals turn specific R packages skimr, ggally, dataxray.skimr: skimr package tailored provide concise informative summary dataset's variables. supplies variety functions generating descriptive statistics, data type details, visual representations. empowers efficiently grasp structure characteristics data, aligning tidyverse principles. Skimr particularly valuable gaining initial understanding dataset spotting potential issues patterns.ggally: Known \"ggplot2 extension exploring correlations,\" ggally R package extends capabilities well-known ggplot2 package. already familiar tidyverse, appreciate ggally's seamless integration tidy data principles. primarily used create visualizations plots exploring relationships correlations among variables. ggally, can readily produce scatterplots, density plots, types graphs shed light connections within data.dataxray: data professionals using tidyverse tools, dataxray package natural extension workflow. new R package provides quick statistical summaries interactive table inside Rstudio Viewer Pane.Together, R packages serve streamline automate exploratory analysis process within tidyverse framework. make data exploration efficient effective, enabling data scientists analysts swiftly gain insights datasets, pinpoint potential problems, lay foundation -depth analyses modeling. Automated exploratory analysis, seamlessly integrated tidyverse tools, plays pivotal role data analysis workflow, providing deeper understanding data guiding informed decisions subsequent steps analysis modeling tasks.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"skimr-for-automated-data-quality-checking","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.1 Skimr for automated data quality checking","text":"Skimr preferred R package quickly assessing data quality, serving initial step exploratory data analysis. proceeding tasks, rely skimr conduct thorough data quality check.\nTable 6.1: Data summary\nVariable type: characterVariable type: DateVariable type: factorVariable type: numericWe can end dedicating significant amount time tasks data comprehension, exploration, wrangling, preparation analysis.However, can significantly expedite process. every single data project undertake, rely skimr, go-solution achieving efficiency speed.","code":"\ninstall.packages(\"skimr\")\nlibrary(skimr)\nskimr::skim(penguins)"},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"how-skimr-works","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.1.1 How Skimr works","text":"One best features Skimr capability generate comprehensive Data Quality Report just single line code. automation encompasses:Data ProfilingData ProfilingCompatibility Numeric, Categorical, Text, Date, Nested List Columns, even dplyr groupsCompatibility Numeric, Categorical, Text, Date, Nested List Columns, even dplyr groupsIn essence, remarkable functionality translates significant time savings data scientists 🕒Assessing data skimr makes simple quality checks easy!","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"reporting","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.1.2 Reporting","text":"penguins dataset lot information , 344 rows data 19 independent variables. multiple data types frequent missing data. skimr::skim() get overall data summary th number rows, columns, data types column group variables.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"character-summaries","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.1.2.1 Character summaries","text":"Missing/completion rate, number unique observations, text features.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"factor-summaries","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.1.2.2 Factor summaries","text":"data recognised factorial get missing/completion rate, whether factor ordered, numbr unique levels number observations factor","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"date-summaries","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.1.2.3 Date summaries","text":"Missing/completion rates, min/max dates, number unique dates.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"numeric-summaries","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.1.2.4 Numeric summaries","text":"Missing/completion rates distributions.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"ggally-for-exploratory-analysis","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.2 GGally for exploratory analysis","text":"GGally another invaluable tool researcher's toolkit. seamlessly extends capabilities widely used ggplot2 package. GGally, can effortlessly create variety visualizations explore understand distributions correlations among variables. flexibility ease use make go-choice streamlining process creating insightful plots charts data analysis.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"pairs","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.2.1 pairs","text":"","code":"\npenguins |> \n  select(where(is.numeric)) |> \n  pairs()\npenguins |> \n  select(c(10,11,12,13)) |> \n  pairs()"},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"ggally","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.2.2 GGally","text":"far, used pairs function comes together base installation R. However, ggplot2 GGally packages provide even advanced pairs function, called ggpairs(). Let’s install load packages:","code":"\nlibrary(GGally)\npenguins |> \n  select(species, island, culmen_length_mm, culmen_depth_mm, flipper_length_mm, body_mass_g, sex) |> \n  ggpairs()\npenguins |> \n  ggpairs(columns = 10:12, ggplot2::aes(colour = species))\npenguins |> \n  ggpairs(columns = 10:12, upper = \"blank\")\npenguins |> \n  ggpairs(columns = 10:14, columnLabels = c(\"Bill length\", \"Bill depth\", \"Flipper length\", \"Body mass\", \"Sex\"))\npenguins |> \n  ggpairs(columns = 10:14, upper = list(continuous = \"density\", combo = \"box_no_facet\"),\n          lower = list(continuous = \"points\", combo = \"dot_no_facet\"))\npenguins |> \n  ggpairs(columns = 10:14, upper = list(continuous = \"density\", combo = \"box_no_facet\"),\n          lower = list(continuous = \"points\", combo = \"dot_no_facet\"),\n          ggplot2::aes(colour = species))\npenguins |> \n  ggpairs(columns = 10:14, axisLabels = \"internal\")"},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"dataxray","chapter":"6 Packages for Automated Exploratory Data Analysis","heading":"6.3 dataxray","text":"dataxray new R package provides quick statistical summaries interactive table inside Rstudio Viewer Pane. use package need install Github, means need devtools package devtools::install_github()dataxray emphasises interactive exploration exploratory summaries. goes beyond skimr can adding interactive exploration element feature summaries. like interactivity, try dataxray.just two functions require packagedataxray::make_xray() convert raw data preformatted data reactable interactive tabledataxray::make_xray() convert raw data preformatted data reactable interactive tabledataxray::view_xray() display interactive exploratory table using underlying reactable library.dataxray::view_xray() display interactive exploratory table using underlying reactable library.Now can explore column see:Count Percent Missing - many NA valuesCount Percent Missing - many NA valuesNumber Distinct - many unique observationsNumber Distinct - many unique observationsCategorical Data - Bar charts frequency categoryCategorical Data - Bar charts frequency categoryNumeric Data - Distribution histogram quantilesNumeric Data - Distribution histogram quantilesExpandable Groups - can expand groups find information featuresExpandable Groups - can expand groups find information featuresSearch Features - Use regex search name. Great lot features (columns)Search Features - Use regex search name. Great lot features (columns)","code":"\n# install.packages(\"devtools\")\n# devtools::install_github(\"agstn/dataxray\")\nlibrary(dataxray)\npenguins |> \n  make_xray() |> \n  view_xray()\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] dataxray_0.1.0     GGally_2.1.2       kableExtra_1.3.4   here_1.0.1        \n##  [5] janitor_2.2.0      knitr_1.43         webexercises_1.1.0 glossary_1.0.0    \n##  [9] lubridate_1.9.2    forcats_1.0.0      stringr_1.5.0      dplyr_1.1.2       \n## [13] purrr_1.0.1        readr_2.1.4        tidyr_1.3.0        tibble_3.2.1      \n## [17] ggplot2_3.4.2      tidyverse_2.0.0   \n## \n## loaded via a namespace (and not attached):\n##  [1] tidyselect_1.2.0    viridisLite_0.4.2   fastmap_1.1.1      \n##  [4] lazyeval_0.2.2      reshape_0.8.9       promises_1.2.0.1   \n##  [7] digest_0.6.33       rpart_4.1.19        mime_0.12          \n## [10] timechange_0.2.0    lifecycle_1.0.3     cluster_2.1.4      \n## [13] ellipsis_0.3.2      magrittr_2.0.3      compiler_4.3.1     \n## [16] rlang_1.1.1         Hmisc_5.1-1         sass_0.4.6         \n## [19] tools_4.3.1         utf8_1.2.3          yaml_2.3.7         \n## [22] data.table_1.14.8   htmlwidgets_1.6.2   plyr_1.8.8         \n## [25] xml2_1.3.5          RColorBrewer_1.1-3  withr_2.5.0        \n## [28] foreign_0.8-84      nnet_7.3-19         grid_4.3.1         \n## [31] fansi_1.0.4         xtable_1.8-4        colorspace_2.1-0   \n## [34] scales_1.2.1        cli_3.6.1           rmarkdown_2.23     \n## [37] generics_0.1.3      rstudioapi_0.15.0   httr_1.4.6         \n## [40] tzdb_0.4.0          cachem_1.0.8        rvest_1.0.3        \n## [43] base64enc_0.1-3     vctrs_0.6.3         webshot_0.5.5      \n## [46] jsonlite_1.8.7      bookdown_0.34       hms_1.1.3          \n## [49] Formula_1.2-5       htmlTable_2.4.1     systemfonts_1.0.4  \n## [52] plotly_4.10.2       jquerylib_0.1.4     glue_1.6.2         \n## [55] stringi_1.7.12      gtable_0.3.3        later_1.3.1        \n## [58] downlit_0.4.3       munsell_0.5.0       pillar_1.9.0       \n## [61] htmltools_0.5.5     reactable_0.4.4     R6_2.5.1           \n## [64] reactablefmtr_2.0.0 rprojroot_2.0.3     evaluate_0.21      \n## [67] shiny_1.7.4.1       backports_1.4.1     memoise_2.0.1      \n## [70] snakecase_0.11.0    httpuv_1.6.11       bslib_0.5.0        \n## [73] Rcpp_1.0.11         svglite_2.1.1       gridExtra_2.3      \n## [76] checkmate_2.2.0     xfun_0.39           fs_1.6.2           \n## [79] pkgconfig_2.0.3"},{"path":"writing-functions.html","id":"writing-functions","chapter":"7 Writing Functions","heading":"7 Writing Functions","text":"Good simple intro: https://github.com/tomjemmett/nhs-r_conf_21-fp_workshophttps://www.earthdatascience.org/courses/earth-analytics/automate-science-workflows/write-efficient-code--science-r/https://bookdown.org/rdpeng/rprogdatascience/control-structures.html","code":""},{"path":"writing-functions.html","id":"structuring-a-function","chapter":"7 Writing Functions","heading":"7.1 Structuring a function","text":"R makes easy create user defined functions using function(). works:Give function object name assign function , e.g. my_function_name <- function().Give function object name assign function , e.g. my_function_name <- function().Within parentheses specify inputs arguments just like pre-written functions work, e.g. function(my_args).Within parentheses specify inputs arguments just like pre-written functions work, e.g. function(my_args).Next, put code want function execute inside curly brackets like : function(my_args) {code run}Next, put code want function execute inside curly brackets like : function(my_args) {code run}Use return() specify want function output done running code.Use return() specify want function output done running code.","code":"\n# this is an example function\nmy_function_name <- function(my_args) {\n  # document your function here\n  # what the function does\n  # function inputs and outputs\n  some_calculated_output <- (argument1 + argument2 )\n  \n  return(some_calculated_output)\n}"},{"path":"writing-functions.html","id":"activity-understand-the-function","chapter":"7 Writing Functions","heading":"7.1.1 Activity: Understand the function","text":"simple function. Can guess ?value get running function ? Now try applying function vector:see worked element inside vector. emphasises R vector based language (default apply functions elements object).","code":"\nadd_one <- function(x) {\n  return(x + 1)\n}\nadd_one(10)## [1] 11\nnumber_series <- c(1,5,10)"},{"path":"writing-functions.html","id":"function-environments","chapter":"7 Writing Functions","heading":"7.2 Function environments","text":"function evaluated, creates environment. arguments passed function,\nalong variables created function stored new environment.function's environment's parent global environment, can see variables created \nglobal environment. Variables created function's environment visible global environment\nthough.reassign variable function take copy variable rather mutating value global environment. want update x global environment need use <<- operator.create function called fahr_to_kelvin converts temperature values degrees Fahrenheit Kelvin.return() function can return single object. want return multiple values R, can use list (objects) return .\ngeneral rule thumb. end repeating line code \nthree times script - write function \nwork instead. write clear comments use!\n\n?\n\nreduces numbers lines code script, reduces\namount repetition code, need make changes \ncan change function without hunt \ncode.\n\nreally good way organise functions organise \nseparate script rest analysis. Write functions \nseparate script use source(“scripts/functions.R”)\n","code":"\n# x has a value of 1 in the global environment\nx <- 1 \n\nfn <- function(y) {\n # the value of x is copied from the global environment\n # but any changes remain only within the function environment\n  x <- x * 2\n  z <- x + y\n  return(z)\n}\n\nfn(2)\nx## [1] 4\n## [1] 1\nfahr_to_kelvin <- function(fahr) {\n\n  kelvin <- ((fahr - 32) * (5 / 9)) + 273.15\n  return(kelvin)\n}\nfahr_to_kelvin_celsius <- function(fahr) {\n\n  celsius <- ((fahr - 32) * (5 / 9))\n  kelvin <- celsius +  + 273.15\n  \n  temps <- list(celsius, kelvin)\n  names(temps) <- c(\"celsius\", \"kelvin\")\n  \n  return(temps)\n}"},{"path":"writing-functions.html","id":"argument-defaults","chapter":"7 Writing Functions","heading":"7.2.1 Argument defaults","text":"example simple function just prints string \"Hello World\" whenever type function say_hello()","code":"\nsay_hello <- function(){\n  paste(\"Hello World\") \n}\n\nsay_hello()## [1] \"Hello World\""},{"path":"writing-functions.html","id":"activity-understanding-arguments","chapter":"7 Writing Functions","heading":"7.2.2 Activity: Understanding arguments","text":"happens try put something brackets using function?Now lets try similar function, include argument:example included argument function. now requires value provided order work.","code":"\nsay_morning <- function(x){\n  paste(\"Good morning\", x)\n}\n\n#  what about this one?\nsay_morning(\"Phil\")## [1] \"Good morning Phil\"Error in paste(\"Good morning\", x) : \n  argument \"x\" is missing, with no default"},{"path":"writing-functions.html","id":"argument-defaults-1","chapter":"7 Writing Functions","heading":"7.2.2.1 Argument defaults","text":"However, probably used idea many functions \"default\" values arguments, can easily set .\nnow default value supplied argument, \nstill able changed running function. Try !\n","code":"\nsay_morning_default <- function(name = \"you\"){\n  paste(\"Good morning\", name)\n}\n\nsay_morning_default()## [1] \"Good morning you\""},{"path":"writing-functions.html","id":"wrapper-functions","chapter":"7 Writing Functions","heading":"7.3 Wrapper functions","text":"Wrapper functions R powerful tool simplifying customizing use existing functions. functions act intermediaries user underlying function, allowing add additional functionality, handle errors, make function user-friendly. especially useful want streamline repetitive tasks, create intuitive interfaces, modify behavior built-functions without altering source code. brief introduction, explore concept wrapper functions, benefits, create use effectively R.","code":""},{"path":"writing-functions.html","id":"default-values","chapter":"7 Writing Functions","heading":"7.3.1 Default values","text":"ou can create wrapper function calls existing function default argument values simplify usage. instance, frequently use mean function specific argument, can create wrapper like :Now, can use my_mean(x) calculate mean always ignoring NA values.happens try use new function my_mean set na.rm = F?want able allow users specify values na.rm = T need modify wrapper functionWith modification, users can provide value na.rm argument calling my_mean. example:modification makes na.rm argument my_mean function flexible allows users override default behavior needed.","code":"\nmy_mean <- function(x) {\n  mean(x, na.rm = TRUE)\n}Error in my_mean(c(5, 6, 7, 8), na.rm = F) : unused argument (na.rm = F)\nmy_mean <- function(x, na.rm = TRUE) {\n  mean(x, na.rm = na.rm)\n}\nmy_mean(c(1, 2, NA, 4))# By default, NA values are removed\nmy_mean(c(1, 2, NA, 4), na.rm = FALSE)  # NA values are not removed## [1] 2.333333\n## [1] NA"},{"path":"writing-functions.html","id":"using-...","chapter":"7 Writing Functions","heading":"7.3.2 Using \"...\"","text":"can allow user access original arguments mean() using ... (ellipsis) argument wrapper function.R ellipse, ..., used functions one two things.capture unknown number argumentsto capture unknown number argumentsor pass arguments underlying function, ?print().pass arguments underlying function, ?print().... argument allows pass additional arguments directly underlying function. can modify my_mean function maintain flexibility mean() function's arguments:Now can pass arguments directly mean, version default removes NA dataframe (can overidden necessary)can pass additional arguments found mean new function e.g. trim\nfunctions designed accept arbitrary unspecified\nadditional arguments via …. case lm() function \nexample, formal … argument allows arbitrary\nadditional arguments passed.\n\nfunction doesn’t support …, attempting pass extra arguments\nusing … result error, “used incorrect\ncontext, … look ” error encountered.\n","code":"\nmy_mean <- function(..., na.rm = TRUE) {\n  mean(..., na.rm = na.rm)\n}\nmy_mean(c(1, 2, NA, 4))## [1] 2.333333\nmy_mean(c(1, 2, NA, 4), trim = 1) ## [1] 2"},{"path":"writing-functions.html","id":"documenting-functions","chapter":"7 Writing Functions","heading":"7.4 Documenting functions","text":"important document functions :Remind future self function doesRemind future self function doesShow future self colleagues use functionShow future self colleagues use functionHelp anyone else looking code understand think function doesHelp anyone else looking code understand think function doesA common way add documentation software add comments function specifyWhat function ?function ?arguments (inputs) function, supposed (e.g., class ? Character, numeric, logical?)arguments (inputs) function, supposed (e.g., class ? Character, numeric, logical?)function return, kind object ?function return, kind object ?Like :\nFormal documentation R functions see access \nhelp R written separate .Rd using markup language similar \nLaTeX. see result documentation look \nhelp file given function, e.g. ?read.csv. \nroxygen2 package allows R coders write documentation\nalongside function code process appropriate .Rd\nfiles. consider switching formal method writing\ndocumentation start working complicated R projects. \naspire write packages R! R\npackages 2nd Edition\n","code":"\n# Function: fahr_to_kelvin_celsius\n# Description: Converts a temperature in degrees Fahrenheit to degrees Celsius and Kelvin.\n#\n# Input:\n#   fahr: Numeric value representing temperature in degrees Fahrenheit.\n#\n# Output:\n#   A list containing two elements:\n#   - celsius: Numeric value representing temperature in degrees Celsius.\n#   - kelvin: Numeric value representing temperature in Kelvin.\n#\n# Example Output:\n#   If you call fahr_to_kelvin_celsius(32), the result would be:\n#   celsius: 0\n#   kelvin: 273.15\n  \n\nfahr_to_kelvin_celsius <- function(fahr) {\n\n # Calculate the temperature in degrees Celsius  \n  celsius <- ((fahr - 32) * (5 / 9))\n  \n  # Calculate the temperature in Kelvin\n  kelvin <- celsius +  + 273.15\n  \n  # Create a list to store the results \n  temps <- list(celsius, kelvin)\n  names(temps) <- c(\"celsius\", \"kelvin\")\n \n  # Return the list of temperatures \n  return(temps)\n}"},{"path":"writing-functions.html","id":"exercise","chapter":"7 Writing Functions","heading":"7.4.1 Exercise","text":"","code":"\nmy_lm <- function(formula, data) {\n \n  model <- lm(formula, data = data)\n  \n\n  summary_model <- summary(model)\n  \n  \n  cat(\"Coefficients:\\n\")\n  print(summary_model$coefficients)\n  \n  \n  par(mfrow = c(2, 2))  # Arrange plots in a 2x2 grid\n  plot(model, which = 1)  # Residuals vs. Fitted\n  plot(model, which = 2)  # Normal Q-Q plot\n  plot(model, which = 3)  # Scale-Location plot\n  plot(model, which = 4)  # Residuals vs. Leverage\n  \n  # Return the fitted model\n  return(model)\n}\n# Function: my_lm\n# Description: Fit a linear regression model and provide summary statistics and diagnostic plots.\n#\n# Input:\n#   formula: A formula specifying the regression model.\n#   data: The data frame containing the variables used in the model.\n#\n# Output:\n#   A linear regression model object fitted to the data.\n#\n# Example Usage:\n#   To fit a linear regression model to the 'body_mass_g' variable as a function of 'flipper_length_mm in the 'penguins' dataset,\n#   you can call:\n#   my_lm(body_mass_g ~ flipper_length_mm, data = penguins_raw)\n\nmy_lm <- function(formula, data) {\n  # Fit a linear regression model\n  model <- lm(formula, data = data)\n\n  # Get summary statistics of the model\n  summary_model <- summary(model)\n\n  # Print model coefficients\n  cat(\"Coefficients:\\n\")\n  print(summary_model$coefficients)\n\n  # Arrange plots in a 2x2 grid\n  par(mfrow = c(2, 2))\n\n  # Plot diagnostics:\n  # 1. Residuals vs. Fitted\n  plot(model, which = 1)\n\n  # 2. Normal Q-Q plot\n  plot(model, which = 2)\n\n  # 3. Scale-Location plot\n  plot(model, which = 3)\n\n  # 4. Residuals vs. Leverage\n  plot(model, which = 4)\n\n  # Return the fitted model\n  return(model)\n}"},{"path":"writing-functions.html","id":"checking-functions","chapter":"7 Writing Functions","heading":"7.5 Checking functions","text":"","code":""},{"path":"writing-functions.html","id":"print","chapter":"7 Writing Functions","heading":"7.5.1 print","text":"One simple easy way keep top functions, understand use lots print statements.","code":"\n# This edited function will now remind the user what the input value was\n\nfahr_to_kelvin_celsius <- function(fahr) {\n    # Calculate the temperature in degrees Celsius\n    celsius <- (fahr - 32) * (5 / 9)\n    \n    # Calculate the temperature in Kelvin\n    kelvin <- celsius + 273.15\n    \n    # Create a list to store the results\n    temps <- list(celsius = celsius, kelvin = kelvin)\n    \n    # Return the list of temperatures along with a message\n    print(paste(\"The temperature in Fahrenheit was\", fahr))\n    return(temps)\n}"},{"path":"writing-functions.html","id":"testthat","chapter":"7 Writing Functions","heading":"7.5.2 testthat","text":"Pure Functions:\npure function concept programming describes function following characteristics:always produces output input.\nside effects, meaning modify external state variables.\nrelies input parameters generate output.\nR, pure functions essential creating clean predictable code. often used functional programming perform operations data without causing unexpected side effects.function pure, can run expectation tests using testthat package:","code":"\ntest_that(\"it works as expected\", {\n    expect_equal(fahr_to_kelvin(92), 306.483, tolerance=1e-2)  \n   \n})"},{"path":"writing-functions.html","id":"debugging","chapter":"7 Writing Functions","heading":"7.5.3 debugging","text":"complex functions, may need go digging! three basic commands:debug()debug()browser()browser()undebug()undebug()debug(function_name) next time run function_name() interactive session open Rstudio.\ndebug mode can call individual objects function, run commands line line:done debugging important turn debug mode - close interactive page run undebug(function_name) debugging panel reopen next time launch function.","code":""},{"path":"writing-functions.html","id":"flow","chapter":"7 Writing Functions","heading":"7.5.3.1 flow","text":"flow great package helping understand code structures - visualizes chart diagram functional architecture.","code":"\nlibrary(flow)\n\nflow_run(fahr_to_kelvin_celsius(92))"},{"path":"writing-functions.html","id":"exercises","chapter":"7 Writing Functions","heading":"7.6 Exercises","text":"function designed calculate triangular numbersLet's build check works:Test passed 😸test fails, can work ?test_that(\"works expected\", {\nexpect_equal(fahr_to_kelvin_celsius(92), list(33, 306), tolerance = 1)Test passed 😀","code":"\nlibrary(testthat)\n\ntriangle_number <- function(x) {\n    0.5 * x * (x + 1)\n}\ntest_that(\"it works as expected\", {\n    expect_equal(triangle_number(1),  1)  \n    expect_equal(triangle_number(2),  3)  \n    expect_equal(triangle_number(3),  6)  \n    expect_equal(triangle_number(4), 10)  \n    expect_equal(triangle_number(5), 15)  \n})\n# the output is a named list\nnamed_list <- list(celsius = 33.3, kelvin = 306.4)\n\n\ntest_that(\"it works as expected\", {\n    expect_equal(fahr_to_kelvin_celsius(92), list(33, 306), tolerance = 1e-2)  \n    \n})"},{"path":"flow-control.html","id":"flow-control","chapter":"8 Flow control","heading":"8 Flow control","text":"https://modern-rstats.eu/defining---functions.html#control-flowhttps://bookdown.org/rdpeng/rprogdatascience/control-structures.htmlImagine want variable equal certain value condition met. typical problem requires else construct. instance:Another way achieve using ifelse() function:else might seem interchangeable ifelse(), ’re . ifelse() vectorized. Let’s try following:Trying attempt else result error first element can evaluatedThe work around use loop, element along vector can evaluated turn. revisit loops shortly.","code":"\na <- 4\nb <- 5\nif (a > b) {\n  f <- 20\n    } else {\n  f <- 10\n}\n\nf## [1] 10\nf <- ifelse(a > b, 20, 10)\nf## [1] 10\nifelse(c(1,2,4) > c(3, 1, 0), \"yes\", \"no\")## [1] \"no\"  \"yes\" \"yes\"\nif (c(1, 2, 4) > c(3, 1, 0)) print(\"yes\") else print(\"no\")Error in if (c(1, 2, 4) > c(3, 1, 0)) print(\"yes\") else print(\"no\") : \n  the condition has length > 1\n\nvector1 <- c(1, 2, 4)\nvector2 <- c(3, 1, 0)\n\nresult <- character(length(vector1))  # Create an empty character vector to store the results\n\nfor (i in 1:length(vector1)) {\n  if (vector1[i] > vector2[i]) {\n    result[i] <- \"yes\"\n  } else {\n    result[i] <- \"no\"\n  }\n}\n\nprint(result)## [1] \"no\"  \"yes\" \"yes\""},{"path":"flow-control.html","id":"case_when","chapter":"8 Flow control","heading":"8.0.1 case_when","text":"case_when powerful tidyverse function R serves extension if_else, providing flexible way create conditional transformations multiple values within dataset. if_else primarily used single condition, case_when designed handle multiple conditions allows assign specific values perform operations based conditions.simple introduction case_when extension if_else:Imagine dataset column called \"temperature,\" want create new column called \"weather\" based different temperature ranges. if_else, might write something like :","code":"\ntemperature <-  c(10, 25, 5, 30, 15)\n\nifelse(temperature < 10, \"Cold\",\n        ifelse(temperature >= 10 & temperature < 25, \"Moderate\", \"Hot\"))## [1] \"Moderate\" \"Hot\"      \"Cold\"     \"Hot\"      \"Moderate\"\ncase_when(\n    temperature < 10 ~ \"Cold\",\n    temperature >= 10 & temperature < 25 ~ \"Moderate\",\n    temperature >= 25 ~ \"Hot\"\n  )## [1] \"Moderate\" \"Hot\"      \"Cold\"     \"Hot\"      \"Moderate\""},{"path":"flow-control.html","id":"conditional-functions","chapter":"8 Flow control","heading":"8.1 Conditional functions","text":"make function reports p-values APA format (\"p = [rounded value]\" p >= .001 \"p < .001\" p < .001).can add default value argument. argument skipped, function uses default argument.First make function rounds value three digits.like conditional response well: need else statement.However soon hit first problem, function works well provided single numeric value, applied vector dataframe encounter error:R, conditional statements vector operations. deal single value. pass , example, vector, statement check first element issue warning. solution ifelse() tidyverse equivalent if_else() functionhttps://stackoverflow.com/questions/50646133/dplyr--else-vs-base-r-ifelse","code":"\nreport_p <- function(p, digits = 3) {\n      roundp <- round(p, digits)\n    reported <-  paste(\"p =\", roundp)\n    \n    return(reported)\n}\n report_p <- function(p, digits = 3) {\n     reported <- if(p < 0.001){\n             \"p < 0.001\"} else{\n             paste(\"p =\", round(p, digits))}\n             \n     \n     return(reported)\n }\nx <- c(0,0.05,0.3,0.4)\n\nreport_p(x)Error in if (p < 0.001) { : the condition has length > 1\n report_p <- function(p, digits = 3) {\n     reported <- ifelse(p < 0.001,\n             \"p < 0.001\",\n             paste(\"p =\", round(p, digits)))\n     \n     return(reported)\n }\n report_p <- function(p, digits = 3) {\n     reported <- if_else(p < 0.001,\n             \"p < 0.001\",\n             paste(\"p =\", round(p, digits)))\n     \n     return(reported)\n }"},{"path":"flow-control.html","id":"warnings-and-errors","chapter":"8 Flow control","heading":"8.2 Warnings and errors","text":"\nhappens omit argument p, set value 1.5 \ncharacter “”?\nSometimes function run, first example provide argument default.p = 1.5 probably run (p = 1.5 makes sense), !p = \"\" warning perhaps intuitive one.can make custom/specific warnings, try run arguments !","code":"\n report_p <- function(p, digits = 3) {\n   \n  if (!is.numeric(p)) stop(\"p must be a number\")\n  if (p <= 0) warning(\"p-values cannot less 0\")\n  if (p >= 1) warning(\"p-values cannot be greater than 1\")\n   \n     reported <- ifelse(p < 0.001,\n             \"p < 0.001\",\n             paste(\"p =\", round(p, digits)))\n     return(reported)\n }\nreport_p <- function(p, digits = 3) {\n \n if (!is.numeric(p)) stop(\"p must be a number\")\n \n   result <- case_when(\n       p <= 0 ~ warning(\"p-values cannot be less than or equal to 0\"),\n       p >= 1 ~ warning(\"p-values cannot be greater than or equal to 1\"),\n       p < 0.001 ~ \"p < 0.001\",\n       TRUE ~ paste(\"p =\", round(p, digits))\n   )\n   \n   return(result)\n}"},{"path":"flow-control.html","id":"activities","chapter":"8 Flow control","heading":"8.3 Activities","text":"Exercise 1: Write Simple Function\ncreate function calculates GC content DNA sequence, result melting temperature sequence returns list. GC content percentage DNA molecule's nitrogenous bases either guanine (G) cytosine (C). common metric used molecular biology genetics analyze DNA sequences. GC base addes 4 degrees melting temp base adds 2 degrees.Hintstringr associated functions helpful hereExercise 2: Document Function\nAdd documentation factorial function using roxygen2-style comments. Include title, description, arguments, examples.Exercise 3: Test Function\nCreate test script uses test_that check function returns correct GC percentage melting tempsExercise 4: Handle Errors\ncan optionally modify gc_content function handle errors input contains non-DNA characters, warnings length exceeds 30nt?","code":"\ngc_content <- function(dna_sequence) {\n  # Convert the input sequence to uppercase to handle mixed-case input\n  dna_sequence <- toupper(dna_sequence)\n  \n \n  \n  # Calculate the number of GC bases (C and G) in the sequence\n gc_positions <- unlist(gregexpr(\"[GC]\", dna_sequence))\n gc_count <- length(gc_positions)\n\n  # Calculate the total number of bases in the sequence\n  total_bases <- nchar(dna_sequence)\n  \n  # Calculate the GC content as a percentage\n  gc_percentage <- (gc_count / total_bases) * 100\n  \n  gc_percentage <- round(gc_percentage, 2)\n  \n  # Calculate AT numbers\n  at_count <- total_bases - gc_count\n  \n  # Calculate melting temp of sequence\n  melt_temp <- (gc_count*4) + (at_count*2)\n  \n  \n  dna_content <- list(gc_percentage, melt_temp)\n  names(dna_content) <- c(\"GC Percentage\", \"Melting temp (celsius)\")\n  \n  \n  return(dna_content)\n}\ngc_content <- function(dna_sequence) {\n  # Convert the input sequence to uppercase to handle mixed-case input\n  dna_sequence <- str_to_upper(dna_sequence)\n  \n\n  \n  # Calculate the number of GC bases (C and G) in the sequence\n  gc_count <- sum(str_count(dna_sequence %in% c(\"G\", \"C\")))\n  \n  # Calculate the total number of bases in the sequence\n  total_bases <- str_length(dna_sequence)\n  \n  # Calculate the GC content as a percentage\n  gc_percentage <- (gc_count / total_bases) * 100\n  \n  gc_percentage <- round(gc_percentage, 2)\n  \n   # Calculate AT numbers\n  at_count <- total_bases - gc_count\n  \n  # Calculate melting temp of sequence\n  melt_temp <- (gc_count*4) + (at_count*2)\n  \n  \n  dna_content <- list(gc_percentage, melt_temp)\n  names(dna_content) <- c(\"GC Percentage\", \"Melting temp (celsius)\")\n  \n  \n  return(dna_content)\n}\ntest_that(\"gc_content function tests\", {\n    # Test valid input and GC content calculation\n    dna_seq1 <- \"ATGCGTAGCT\"\n    result1 <- gc_content(dna_seq1)\n    expect_equal(result1$`GC Percentage`, 50)\n    expect_equal(result1$`Melting temp (celsius)`, 30)})## Test passed 😸\ngc_content <- function(dna_sequence) {\n  # Convert the input sequence to uppercase to handle mixed-case input\n  dna_sequence <- toupper(dna_sequence)\n  \n  # Check if the input sequence contains only valid DNA characters (A, T, C, G)\n  if (!grepl(\"^[ATCG]+$\", dna_sequence)) stop(\"Invalid DNA sequence. Only A, T, C, and G are allowed.\")\n  \n  if (nchar(dna_sequence) > 30 ) warning(\"Sequence is > 30 nt temperature predictions may be inaccurate\")\n  \n  \n  # Calculate the number of GC bases (C and G) in the sequence\n gc_positions <- unlist(gregexpr(\"[GC]\", dna_sequence))\n gc_count <- length(gc_positions)\n\n  # Calculate the total number of bases in the sequence\n  total_bases <- nchar(dna_sequence)\n  \n  # Calculate the GC content as a percentage\n  gc_percentage <- (gc_count / total_bases) * 100\n  \n  gc_percentage <- round(gc_percentage, 2)\n  \n  # Calculate AT numbers\n  at_count <- total_bases - gc_count\n  \n  # Calculate melting temp of sequence\n  melt_temp <- (gc_count*4) + (at_count*2)\n  \n  \n  dna_content <- list(gc_percentage, melt_temp)\n  names(dna_content) <- c(\"GC Percentage\", \"Melting temp (celsius)\")\n  \n  \n  return(dna_content)\n}\ngc_content <- function(dna_sequence) {\n  # Convert the input sequence to uppercase to handle mixed-case input\n  dna_sequence <- str_to_upper(dna_sequence)\n  \n  # Check if the input sequence contains only valid DNA characters (A, T, C, G)\nif (!str_detect(dna_sequence, \"^[ATCG]+$\")) stop(\"Invalid DNA sequence. Only A, T, C, and G are allowed.\")\n\n    if (str_length(dna_sequence) > 30 ) warning(\"Sequence is > 30 nt temperature predictions may be inaccurate\")\n\n  \n  # Calculate the number of GC bases (C and G) in the sequence\n  gc_count <- sum(str_count(dna_sequence %in% c(\"G\", \"C\")))\n  \n  # Calculate the total number of bases in the sequence\n  total_bases <- str_length(dna_sequence)\n  \n  # Calculate the GC content as a percentage\n  gc_percentage <- (gc_count / total_bases) * 100\n  \n  gc_percentage <- round(gc_percentage, 2)\n  \n   # Calculate AT numbers\n  at_count <- total_bases - gc_count\n  \n  # Calculate melting temp of sequence\n  melt_temp <- (gc_count*4) + (at_count*2)\n  \n  \n  dna_content <- list(gc_percentage, melt_temp)\n  names(dna_content) <- c(\"GC Percentage\", \"Melting temp (celsius)\")\n  \n  \n  return(dna_content)\n}"},{"path":"simple-iteration.html","id":"simple-iteration","chapter":"9 Simple iteration","heading":"9 Simple iteration","text":"’ve seen write function can used create concise re-usable operations can applied multiple times script without copy paste, functions really come combined iteration. Iteration process running operation group objects, minimising code replication.Functional programming R requires good understanding types data structure available R. make sure remember distinctions vectors, lists, matrices dataframes.section start simple functions allow replicate arguments","code":""},{"path":"simple-iteration.html","id":"rep","chapter":"9 Simple iteration","heading":"9.1 rep()","text":"function rep() lets repeat first argument set number times.default amount repetition times = print entire vector start finish repeat.second argument vector number elements first vector, repeat specified values eachOr use argument rep first element first followed second etc.think happen set times 3 2?","code":"\nrep(1:5, 5)\n\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), 2)##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n## [1] \"Adelie\"    \"Gentoo\"    \"Chinstrap\" \"Adelie\"    \"Gentoo\"    \"Chinstrap\"\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), c(2, 1, 3))## [1] \"Adelie\"    \"Adelie\"    \"Gentoo\"    \"Chinstrap\" \"Chinstrap\" \"Chinstrap\"\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), each = 3)## [1] \"Adelie\"    \"Adelie\"    \"Adelie\"    \"Gentoo\"    \"Gentoo\"    \"Gentoo\"   \n## [7] \"Chinstrap\" \"Chinstrap\" \"Chinstrap\"\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), times = 2, each = 3)##  [1] \"Adelie\"    \"Adelie\"    \"Adelie\"    \"Gentoo\"    \"Gentoo\"    \"Gentoo\"   \n##  [7] \"Chinstrap\" \"Chinstrap\" \"Chinstrap\" \"Adelie\"    \"Adelie\"    \"Adelie\"   \n## [13] \"Gentoo\"    \"Gentoo\"    \"Gentoo\"    \"Chinstrap\" \"Chinstrap\" \"Chinstrap\""},{"path":"simple-iteration.html","id":"seq","chapter":"9 Simple iteration","heading":"9.2 seq()","text":"function seq() useful generating sequence numbers pattern.Use seq() create vector integers 0 10.initially similar just making vector withBut seq extra functions. can set argument count numbers 1 (default). Use seq() create vector numbers 0 100 10s.also argument length., useful want know many steps divide something ","code":"\nseq(1,5)## [1] 1 2 3 4 5\nc(1:5)## [1] 1 2 3 4 5\nseq(0, 100, by = 10)##  [1]   0  10  20  30  40  50  60  70  80  90 100\nseq(0, 100, length.out = 12)##  [1]   0.000000   9.090909  18.181818  27.272727  36.363636  45.454545\n##  [7]  54.545455  63.636364  72.727273  81.818182  90.909091 100.000000"},{"path":"simple-iteration.html","id":"replicate","chapter":"9 Simple iteration","heading":"9.3 replicate()","text":"Replicate first example function whose purpose iterate functionsFor example rnorm function generates numbers normal distribution.Nesting inside replicate() function repeat command specified number timeshttps://www.r-bloggers.com/2023/07/-replicate-function--r/","code":"\nreplicate(3, # times to replicate function\n          expr = rnorm(n = 5, \n                       mean = 1,\n                       sd = 1))##             [,1]       [,2]        [,3]\n## [1,]  1.16592053  0.5140128  0.10807777\n## [2,]  0.39284707  0.2624521 -0.18835393\n## [3,]  1.03595376  0.4665212  2.03492875\n## [4,] -0.02451715  0.2637972 -0.38042257\n## [5,]  1.62562205 -1.8899700 -0.04946246"},{"path":"loops.html","id":"loops","chapter":"10 Loops","heading":"10 Loops","text":"Loops one staples programming languages, just R, can powerful tool; though see later suite alternative loops R.loops make possible repeat set instructions times. example, try following:OrThis dynamic piece code index '' iteratively replaced value vector 1:5.break . Since first value sequence (1:3) 1, loop begins substituting '' 1 executing everything within curly braces {1+1}. Loops conventionally use '' counter, short iteration. However, free use variable name prefer:first loop essentially:first iteration complete, loops back beginning replaces next value 1:3 sequence (2 case):process repeated loop reaches final value sequence","code":"\nfor (i in 1:5){\n  print(\"hello\")\n}## [1] \"hello\"\n## [1] \"hello\"\n## [1] \"hello\"\n## [1] \"hello\"\n## [1] \"hello\"\nfor (i in 1:3) {\n  print(i+1)\n}## [1] 2\n## [1] 3\n## [1] 4i <- 1 + 1\nprint(i)\ni <- 2 + 1\nprint(i)\nfor (i in 1:3) { # the SEQUENCE is defined (numbers 1 to 5) and loop is opened with \"{\"\n  print(i + 1)    # The OPERATIONS (add 1 to each sequence number and print)\n}                            # The loop is closed with \"}\"\n"},{"path":"loops.html","id":"functions-in-for-loops","chapter":"10 Loops","heading":"10.1 Functions in for loops","text":"Whilst using simple addition body loop, can also combine loops functions.","code":"\n# Define a function to calculate the square of a number\nsquare <- function(x) {\n  return(x * x)\n}\n\n# Use a for loop to calculate and print the squares of numbers from 1 to 5\nfor (num in 1:5) { # Here I have replace i with num\n  result <- square(num)\n  cat(\"The square of\", num, \"is\", result, \"\\n\")\n}## The square of 1 is 1 \n## The square of 2 is 4 \n## The square of 3 is 9 \n## The square of 4 is 16 \n## The square of 5 is 25"},{"path":"loops.html","id":"for-loops-in-dataframes","chapter":"10 Loops","heading":"10.2 For loops in dataframes","text":"create somewhat intricate function. Initially, generate new tibble creating four vectors, consisting 10 randomly generated numbers. numbers designed approximately centered around mean 0 standard deviation 1. Afterward, combine vectors form final tibble.vector randomly generated actual averages slightly different, can test :code works, repetitive, applying function .simple loop:Now run loop:time mean calculate one column df stored element previously empty output vector.() loops useful quickly iterating list, R prefers store everything new object loop iteration, loops can become quite slow complex, running many processes many iterations.","code":"\nset.seed(1234)\n\n# a simple tibble\ndf <- tibble(\n  a =  rnorm(10),\n  b =  rnorm(10),\n  c =  rnorm(10),\n  d = rnorm(10),\n  e = rnorm(10),\n  f = rnorm(10),\n  g = rnorm(10),\n  h = rnorm(10),\n)\n\ndf\nmean(df$a)\n\nmean(df$b)\n\nmean(df$c)\n\nmean(df$d)## [1] -0.3831574\n## [1] -0.1181707\n## [1] -0.3879468\n## [1] -0.7661931\n#1. Having a predefined empty vector to receive the values is good practice, we will see why a bit later\n\noutput <- vector(\"double\", ncol(df)) # this will have four empty elements the same as the number of columns for the dataframe. The vector is set to receive numeric data\nfor (i in 1:ncol(df)) {            # 2. sequence - determines what to loop over \n  \n  output[[i]] <- mean(df[[i]])      # 3. body - each time the loop runs it allocates a value to output, \n}\noutput## [1] -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474\n## [7]  0.61659223 -0.04230209"},{"path":"loops.html","id":"speed","chapter":"10 Loops","heading":"10.3 Speed","text":"","code":""},{"path":"loops.html","id":"initialise-objects","chapter":"10 Loops","heading":"10.3.1 Initialise objects","text":"Pre-allocating output appropriate length loop avoids reallocation memory inside loop, can inefficient large data. example:Depending computer processing power may get different results - ","code":"\noutput2 <- NULL\n\nmicrobenchmark::microbenchmark(\n  for (i in 1:ncol(df)){             \n  \n  output2 <- c(output2, mean(df[[i]])) # each new calculation is concatenated onto the end of the growing vector\n}\n)\noutput2 # note because we did not predefine our vector length it continues to grow! "},{"path":"loops.html","id":"simple-datatypes","chapter":"10 Loops","heading":"10.3.2 simple datatypes","text":"Depending computer processing power may get different results - ","code":"\ndf_list <- as.list(df)\n\n\nmicrobenchmark::microbenchmark( # check average processing time\nfor (i in length(df_list)) {           \n  \n  output[[i]] <- mean(df_list[[i]])      \n}\n)"},{"path":"loops.html","id":"visualise-speed","chapter":"10 Loops","heading":"10.3.3 Visualise speed","text":"microbenchmark package useful features including ability run multiple functions comparison simultaneously integration ggplot2 can plot results","code":"\noutput_vector <- vector(\"double\", ncol(df))\noutput_list <- vector(mode = \"list\", length = ncol(df))\nnew_output_vector <- NULL\nnew_output_vector2 <- NULL\n\n\nmbm <- microbenchmark::microbenchmark(\ndf_input_vector_output = for (i in 1:ncol(df)) {\n  output_vector[[i]] <- mean(df[[i]]) \n}, \nlist_input_vector_output = for (i in length(df_list)) {           \n    output_vector[[i]] <- mean(df_list[[i]])      \n}, \ndf_input_build_vector =  for (i in 1:ncol(df)){             \n    \n    new_output_vector <- c(new_output_vector, mean(df[[i]])) # each new calculation is concatenated onto the end of the growing vector\n}, \nlist_input_build_vector = for (i in 1:length(df_list)){             \n    \n   new_output_vector2 <- c(new_output_vector2, mean(df[[i]])) # each new calculation is concatenated onto the end of the growing vector\n}\n)\n\nmbmUnit: milliseconds\n                     expr      min       lq     mean   median       uq      max neval\n   df_input_vector_output 2.295303 2.401428 2.617219 2.447673 2.556309 12.36447   100\n list_input_vector_output 1.877293 1.946628 2.135324 1.997003 2.071233 12.31188   100\n    df_input_build_vector 2.351764 2.411968 2.604022 2.455673 2.531924 13.46052   100\n  list_input_build_vector 2.204953 2.297524 2.691931 2.351203 2.419803 12.77457   100\n\nautoplot(mbm)"},{"path":"loops.html","id":"do-as-little-as-possible-inside-a-loop","chapter":"10 Loops","heading":"10.3.4 Do as little as possible inside a loop","text":"R interpreted language every thing write inside loop runs multiple times. best thing can parsimonious writing code inside loop. number steps can speed loop bit .Calculate results loopCalculate results loopInitialize objects loopInitialize objects loopIterate numbers possibleIterate numbers possibleWrite functions inside loop possibleWrite functions inside loop possibleThe main tip Get loop quickly possible.See also https://bookdown.org/csgillespie/efficientR/programming.html#top-5-tips--efficient-programming","code":""},{"path":"loops.html","id":"activity","chapter":"10 Loops","heading":"10.4 Activity","text":"","code":""},{"path":"apply.html","id":"apply","chapter":"11 Apply","heading":"11 Apply","text":"can recreate output loops previous chapter apply function R.apply functions can alternative writing loops. general idea apply (map) function element object. example, can apply function row column matrix.function takes least two arguments: object another function. function passed argument.Every apply function dots, ..., argument used pass arguments function given argument.Using apply functions possible, can lead shorter, succinct R code. section, cover three main functions, apply(), lapply(), sapply().lapply(): Loop list evaluate function elementlapply(): Loop list evaluate function elementsapply(): lapply try simplify resultsapply(): lapply try simplify resultapply(): Apply function margins arrayapply(): Apply function margins arrayIt (think) important apply family still looping - actual looping done internally C code efficiency reasons. Apply functions loops hood meant convenience speed.","code":""},{"path":"apply.html","id":"lapply","chapter":"11 Apply","heading":"11.1 lapply","text":"lapply() function following simple series operations:loops list, vector dataframe, iterating element turnit applies function element list (function specify)always returns list (l “list”).can see operation lapply() function :Notice passing mean() function argument lapply() function. Functions R can used way can passed back forth arguments just like object. pass function another function, need include open closed parentheses.well slightly faster () loop, arguably, lapply also easier read.","code":"> lapply\nfunction (X, FUN, ...) \n{\n    FUN <- match.fun(FUN)\n    if (!is.vector(X) || is.object(X)) \n        X <- as.list(X)\n    .Internal(lapply(X, FUN))\n}\n<bytecode: 0x7f79498e5528>\n<environment: namespace:base>\n\nlapply(df_list, mean)\nempty_list <- vector(mode = \"list\", length = length(df_list))\n\n\nmicrobenchmark::microbenchmark(\n \n  forloop = for (i in length(df_list)) {           \n  \n  empty_list[[i]] <- mean(df_list[[i]])      \n  },\n apply = lapply(df_list, mean)\n)Unit: microseconds\n    expr      min        lq       mean    median       uq      max neval\n forloop 1908.053 1981.7625 2341.55928 2038.9475 2119.488 11949.11   100\n   apply   23.531   24.8655   29.73571   27.9205   30.050   119.41   100\n"},{"path":"apply.html","id":"run-lapply-with-additional-arguments","chapter":"11 Apply","heading":"11.1.1 Run lapply with additional arguments","text":"first argument lapply() gives list object iterated .\nsecond argument defines anonymous function.","code":""},{"path":"apply.html","id":"functions-with-lapply","chapter":"11 Apply","heading":"11.1.1.1 Functions with lapply","text":"example define list run function numbers, write function normal. Defined like call anonymous function, name used outside lapply function.","code":"\n# Create a list of numbers\nnumbers <- list(1, 2, 3, 4, 5)\n\n\n# Use lapply to add 10 to each number in the list\nresult <- lapply(numbers, function(x){\n  return(x + 10)\n})\n\n# Print the result\nprint(result)## [[1]]\n## [1] 11\n## \n## [[2]]\n## [1] 12\n## \n## [[3]]\n## [1] 13\n## \n## [[4]]\n## [1] 14\n## \n## [[5]]\n## [1] 15"},{"path":"apply.html","id":"using-existing-functions-in-lapply","chapter":"11 Apply","heading":"11.1.1.2 Using existing functions in lapply","text":"example write named function. Notice use curly brackets anonymous function, instead, just passed meanadd_valueas second argument oflapply()`. also supply necessary arguments required function specifying afterwards.","code":"\n# Create a list of numbers\nnumbers <- list(1, 2, 3, 4, 5)\n\n# Define a custom function that adds a given value to each number\nadd_value <- function(x, value) {\n  return(x + value)\n}\n\n# Use lapply to add 10 to each number in the list\nresult <- lapply(numbers, add_value, value = 10)\n\n# Print the result\nprint(result)## [[1]]\n## [1] 11\n## \n## [[2]]\n## [1] 12\n## \n## [[3]]\n## [1] 13\n## \n## [[4]]\n## [1] 14\n## \n## [[5]]\n## [1] 15"},{"path":"apply.html","id":"sapply","chapter":"11 Apply","heading":"11.2 sapply","text":"sapply() function behaves similarly lapply(); real difference return value. sapply() try simplify result lapply() possible. Essentially, sapply() calls lapply() input applies following algorithm:result list every element length 1, vector returnedIf result list every element length 1, vector returnedIf result list every element vector length (> 1), matrix returned.result list every element vector length (> 1), matrix returned.can’t figure things , list returned.can’t figure things , list returned.Notice sapply() returns vector element length 1.","code":"\nsapply(df_list, mean)##           a           b           c           d           e           f \n## -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474 \n##           g           h \n##  0.61659223 -0.04230209"},{"path":"apply.html","id":"apply-1","chapter":"11 Apply","heading":"11.3 apply","text":"apply() function used evaluate function (often anonymous one) array. often used apply function rows columns matrix dataframe, fact function used list. Using apply() often really faster writing loop, works one line highly compact.MARGIN = 1 means apply function rowsMARGIN = 2 means apply function columnsIf result list every element length 1, vector returnedIf result list every element length 1, vector returnedIf result list every element vector length (> 1), matrix returned.result list every element vector length (> 1), matrix returned.","code":"\napply(df, MARGIN = 1, mean)##  [1] -0.017615796 -0.155554062 -0.400917401 -0.454979941 -0.003522308\n##  [6] -0.125228280 -0.584980350 -0.650446262  0.119856528 -0.188911702"},{"path":"apply.html","id":"summary-of-apply-functions","chapter":"11 Apply","heading":"11.3.1 summary of apply functions","text":"","code":""},{"path":"apply.html","id":"exercise-1","chapter":"11 Apply","heading":"11.4 Exercise","text":"apply(df, MARGIN = 2, z_score)","code":"\nz_score <- function(x) {\n    (x - mean(x, na.rm = TRUE)) /  \n        sd(x, na.rm = TRUE)\n}"},{"path":"purrr.html","id":"purrr","chapter":"12 Purrr","heading":"12 Purrr","text":"purrr::map() family functions tidyverse equivalent applyThe base equivalent map() lapply(). difference lapply() support helpers ’ll learn , ’re using map() purrr, can skip additional dependency use lapply() directly.basic syntax map(.x = SEQUENCE, .f = FUNCTION, ARGUMENTS). bit detail:.x = inputs upon .f function iteratively applied - e.g. vector jurisdiction names, columns data frame, list data frames.x = inputs upon .f function iteratively applied - e.g. vector jurisdiction names, columns data frame, list data frames.f = function apply element .x input - function like print() already exists, custom function define. function often written tilde ~ (details ).\nnotes syntax:.f = function apply element .x input - function like print() already exists, custom function define. function often written tilde ~ (details ).\nnotes syntax:function needs arguments specified, can written parentheses tilde (e.g. .f = mean).function needs arguments specified, can written parentheses tilde (e.g. .f = mean).can use .x (simply .) within .f = function placeholder .x value iterationYou can use .x (simply .) within .f = function placeholder .x value iterationThe output usingmap() list - list object class like vector whose elements can different classes. , list produced map() contain many data frames, many vectors, many single values, even many lists! alternative versions map() explained produce types outputs (e.g. map_dfr() produce data frame, map_chr() produce character vectors, map_dbl() produce numeric vectors).Basic map() always return list, variants return different data types.Unlike apply, map return one type data, removing potential changing data types occasionally happens using apply.","code":""},{"path":"purrr.html","id":"example","chapter":"12 Purrr","heading":"12.1 Example","text":"","code":"\nlapply(df_list, mean)\nmap(.x = df_list, .f = mean)\n\nmap(df_list, mean)"},{"path":"purrr.html","id":"more-maps","chapter":"12 Purrr","heading":"12.2 more maps","text":"map() always returns list, makes general map family can put anything list. inconvenient return list simpler data structure , four specific variants: map_lgl(), map_int(), map_dbl(), map_chr(). returns atomic vector specified type:\nspecialized map functions “type-safe” fail \nincorrect return type.\n\nsafer using functions like sapply() tries \nsimplify results return list, vector matrix depending \ninput.\npurrr uses convention suffixes, like _dbl(), refer output. map_*() functions can take type vector input.","code":"\n# map lgl always returns a logical vector\nmap_lgl(df_list, is.double)\n#   a    b    c    d    e    f    g    h \n# TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n# map_dbl always returns a double vector\nmap_dbl(df_list, mean)\n#          a           b           c           d           e           f           g           h \n# -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474  0.61659223 -0.04230209 \n\n# map_int always returns an integer vector\nmap_int(df_list, ~.x |>  mean() |> round())\n# a  b  c  d  e  f  g  h \n# 0  0  0 -1 -1  0  1  0 \n\n# map_int always returns an integer vector - note this comes with a deprecated coercion warning - use as.character()\n map_chr(df_list, mean)\n#          a           b           c           d           e           f           g           h \n#\"-0.383157\" \"-0.118171\" \"-0.387947\" \"-0.766193\" \"-0.609797\" \"-0.278865\"  \"0.616592\" \"-0.042302\" \n \n# map_df always returns a dataframe \n map_df(df_list, mean)\n#       a      b      c      d      e      f     g       h\n#   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> <dbl>   <dbl>\n#   1 -0.383 -0.118 -0.388 -0.766 -0.610 -0.279 0.617 -0.0423"},{"path":"purrr.html","id":"anonymous-functions","chapter":"12 Purrr","heading":"12.3 Anonymous functions","text":"multiple ways structuring map() call","code":"\nmap(df_list, mean)\n\ndf_list |>  \n  map(mean)\n\ndf_list |> \n    map(~mean(.))"},{"path":"purrr.html","id":"whats-up-with","chapter":"12 Purrr","heading":"12.3.1 What's up with ~?","text":"Instead using map() exisiting function, can use inline anonymous functions demonstrated apply()quite verbose can use ~ support shortcutIt look little quirky refer . argument functions.\nReserve syntax short simple functions. good rule \nthumb function spans lines uses {}, ’s time give\nname.\n","code":"\nmap_dbl(df_list, function(x) sum(x)/length(x))##           a           b           c           d           e           f \n## -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474 \n##           g           h \n##  0.61659223 -0.04230209\nmap_dbl(df_list, ~ sum(.x)/length(.x))##           a           b           c           d           e           f \n## -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474 \n##           g           h \n##  0.61659223 -0.04230209"},{"path":"purrr.html","id":"passing-arguments","chapter":"12 Purrr","heading":"12.3.2 Passing arguments","text":"map functions pass ... along, two ways can pass additional arguments functions","code":"\nmap_dbl(df_list, ~ mean(.x, na.rm = T))\n\n\nmap_dbl(df_list, mean, na.rm = T)"},{"path":"purrr.html","id":"map-with-nested-dataframes","chapter":"12 Purrr","heading":"12.4 map with nested dataframes","text":"Plots can now called number ways\ngg objects type objects can created using\nmap() mutate(). Another application two functions \nfitting models data storing results new column. \nexample, use map() mutate() fit linear regression\nmodel x y columns store model output new\ncolumn\nview plots together, can use patchwork::wrap_plots() function","code":"\nnested_penguins <- penguins |> \n  nest(data = -species)\n\nnested_heavy_penguins <- penguins |> \n    nest(data = -species) |> \n  mutate(new_data = map(data, ~ .x \n                        |> filter(body_mass_g > 3000))\n         )\n\nplots <- nested_heavy_penguins |> \n    mutate(scatterplots = map(new_data, ~ \n            ggplot(data = .x, aes(x = body_mass_g, y = flipper_length_mm)) +\n                geom_point()\n        ))\nplots[[1,4]]\n\nplots$scatterplots[[1]]\nlibrary(patchwork)\nplots$scatterplots |> wrap_plots()"},{"path":"purrr.html","id":"map2","chapter":"12 Purrr","heading":"12.5 map2","text":"map2 versatile function purrr package R allows iterate two input vectors lists parallel, applying specified function pairs corresponding elements. particularly useful need perform operations depend elements two separate input sources simultaneously, offering powerful way combine process data pairwise manner.quick example building plot making function - able alter colour plots according ","code":"\npal <- c(\n  \"Adelie\" = \"#FF8C00\", \n  \"Chinstrap\" = \"#A034F0\", \n  \"Gentoo\" = \"#159090\")\n\n\nplots <- nested_heavy_penguins |> \n    mutate(scatterplots = map2(.x = new_data, .y = pal, ~ \n            ggplot(data = .x, aes(x = body_mass_g, y = flipper_length_mm, colour = .y)) +\n                geom_point() +\n              scale_colour_identity()\n        ))\n\n\nplots$scatterplots |> \n    wrap_plots(... = _, guides = \"collect\")"},{"path":"purrr.html","id":"running-different-summary-functions-on-each-nested-dataframe","chapter":"12 Purrr","heading":"12.5.1 Running different summary functions on each nested dataframe","text":"working nested data frames, map2 provides capability apply distinct functions nested data frame, making versatile tool performing customized specialized operations grouped data. flexibility distinct simple operations group_by(), allows tailor computations unique characteristics subgroup within nested data structure.","code":"\nsummary_functions <- list(\n    Adelie <- function(data) {\n        summarise(data, \n                  mean_bill_length = mean(bill_length_mm, na.rm = T),\n                  mean_flipper_length = mean(flipper_length_mm, na.rm = T))\n    },\n    Chinstrap <- function(data) {\n        summarise(data,\n                  max_bill_length = max(bill_length_mm, na.rm = T),\n                  max_flipper_length = max(flipper_length_mm, na.rm = T))\n    },\n    Gentoo <- function(data) {\n        summarise(data,\n                  min_bill_length = min(bill_length_mm, na.rm = T),\n                  min_flipper_length = min(flipper_length_mm, na.rm = T))\n    }\n)\n\n# Apply the summary functions to each species using map2\nresult <- nested_penguins %>%\n    mutate(summaries = map2(data, summary_functions, ~ .y(.x)))\n\nresult$summaries## [[1]]\n## # A tibble: 1 × 2\n##   mean_bill_length mean_flipper_length\n##              <dbl>               <dbl>\n## 1             38.8                190.\n## \n## [[2]]\n## # A tibble: 1 × 2\n##   max_bill_length max_flipper_length\n##             <dbl>              <int>\n## 1            59.6                231\n## \n## [[3]]\n## # A tibble: 1 × 2\n##   min_bill_length min_flipper_length\n##             <dbl>              <int>\n## 1            40.9                178"},{"path":"purrr.html","id":"exercises-1","chapter":"12 Purrr","heading":"12.6 Exercises","text":"","code":"\nmap_df(.x = df, \n       .f = z_score)\n\ndf %>% \n  map_df(z_score)\n\ndf %>% \n    map_df(~z_score(.))"},{"path":"bonus-simulation.html","id":"bonus-simulation","chapter":"13 Bonus: Simulation","heading":"13 Bonus: Simulation","text":"","code":"\nlibrary(ggplot2)\n\n# Define a function to run the simulation for a given sample size and effect size\nsimulate_difference <- function(sample_size, effect_size) {\n    set.seed(123)\n    \n    # Initialize a data frame to store the estimated differences\n    results <- data.frame(Simulated_Difference = numeric(100))\n    \n    for (i in 1:100) {  # Perform 100 simulations for the fixed sample size\n        # Generate data for two groups with a specified effect size\n        group1 <- rnorm(sample_size, mean = 0, sd = 1)\n        group2 <- rnorm(sample_size, mean = effect_size, sd = 1)\n        \n        # Create a data frame for the two groups\n        data_df <- data.frame(Group = rep(c(\"Group1\", \"Group2\"), each = sample_size),\n                              Value = c(group1, group2))\n        \n        # Fit a linear model to estimate the difference in means\n        lm_model <- lm(Value ~ Group, data = data_df)\n        \n        # Extract the estimated difference from the model\n        estimated_difference <- coef(lm_model)[2]\n        \n        results$Simulated_Difference[i] <- estimated_difference\n    }\n    \n    # Return the data frame of estimated differences\n    return(results)\n}\n\n# Fixed sample size of 20\nsample_size <- 30\n\n# Set the effect size\neffect_size <- .8  # Adjust as needed\n\n# Run the simulation for the fixed sample size\nsimulation_results <- simulate_difference(sample_size, effect_size)\n\n# Calculate the mean and 2.5th and 97.5th percentiles for the confidence interval\nmean_difference <- mean(simulation_results$Simulated_Difference)\nlower_percentile <- quantile(simulation_results$Simulated_Difference, 0.025)\nupper_percentile <- quantile(simulation_results$Simulated_Difference, 0.975)\n\n# Create a density histogram of the estimated differences with lines for percentiles\nggplot(simulation_results, aes(x = Simulated_Difference)) +\n    geom_histogram(binwidth = 0.05, fill = \"lightblue\", color = \"black\") +\n    geom_vline(aes(xintercept = mean_difference), color = \"red\", linetype = \"dashed\") +\n    geom_vline(aes(xintercept = lower_percentile), color = \"blue\") +\n    geom_vline(aes(xintercept = upper_percentile), color = \"blue\") +\n    labs(x = \"Estimated Difference\", y = \"Density\") +\n    ggtitle(paste(\"Density Histogram of Estimated Differences (Sample Size = 20)\")) +\n    theme_minimal()\n# Define a function to run the simulation for a given sample size and effect size\nsimulate_power <- function(sample_size, effect_size) {\n  set.seed(123)\n  \n  # Initialize a counter for the number of significant t-tests\n  num_significant <- 0\n  \n  for (i in 1:100) {  # Perform 100 simulations for each sample size\n\n          # Generate data for two groups with a specified effect size\n    group1 <- rnorm(sample_size, mean = 0, sd = 1)\n    group2 <- rnorm(sample_size, mean = effect_size, sd = 1)\n\n     # Create a data frame for the two groups\n        data_df <- data.frame(Group = rep(c(\"Group1\", \"Group2\"), each = sample_size),\n                              Value = c(group1, group2))\n        \n        # Fit a linear model to estimate the difference in means\n        lm_model <- lm(Value ~ Group, data = data_df)\n        \n        # Extract the p value from the model\n       \n      \n        \n    # Check if the null hypothesis is rejected (p-value < 0.05)\n    if ( broom::tidy(lm_model)[[2,5]] < 0.05) {\n      num_significant <- num_significant + 1\n    }\n  }\n  \n  # Return the proportion of significant t-tests (power)\n  return(num_significant / 100)\n}\n\n# Specify a range of sample sizes to test\nsample_sizes <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\n\n# Set the effect size\neffect_size <- 1  # Adjust as needed\n\n# Run the simulation for each sample size\nsimulation_results <- map_dbl(sample_sizes, simulate_power, effect_size)\n\n# Plot the power as a function of sample size\nplot(sample_sizes, simulation_results, type = \"b\", xlab = \"Sample Size\", ylab = \"Power\", main = \"Power vs. Sample Size\")"},{"path":"bonus-simulation.html","id":"further-reading","chapter":"13 Bonus: Simulation","heading":"13.1 Further Reading:","text":"Simulations: https://rstudio-education.github.io/hopr/https://aosmith.rbind.io/2018/01/09/simulate-simulate-part1/#simulate-simulate-dance---musichttps://aosmith.rbind.io/2019/07/22/automate-model-fitting--loops/https://aosmith.rbind.io/2017/12/31/many-datasets/#list--files--read-","code":"\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] patchwork_1.1.2       palmerpenguins_0.1.1  microbenchmark_1.4.10\n##  [4] testthat_3.1.10       knitr_1.43            webexercises_1.1.0   \n##  [7] glossary_1.0.0        lubridate_1.9.2       forcats_1.0.0        \n## [10] stringr_1.5.0         dplyr_1.1.2           purrr_1.0.1          \n## [13] readr_2.1.4           tidyr_1.3.0           tibble_3.2.1         \n## [16] ggplot2_3.4.2         tidyverse_2.0.0      \n## \n## loaded via a namespace (and not attached):\n##  [1] sass_0.4.6        utf8_1.2.3        generics_0.1.3    xml2_1.3.5       \n##  [5] stringi_1.7.12    hms_1.1.3         digest_0.6.33     magrittr_2.0.3   \n##  [9] evaluate_0.21     grid_4.3.1        timechange_0.2.0  bookdown_0.34    \n## [13] fastmap_1.1.1     jsonlite_1.8.7    backports_1.4.1   brio_1.1.3       \n## [17] fansi_1.0.4       scales_1.2.1      codetools_0.2-19  jquerylib_0.1.4  \n## [21] cli_3.6.1         rlang_1.1.1       munsell_0.5.0     withr_2.5.0      \n## [25] cachem_1.0.8      yaml_2.3.7        tools_4.3.1       tzdb_0.4.0       \n## [29] memoise_2.0.1     colorspace_2.1-0  broom_1.0.5       vctrs_0.6.3      \n## [33] R6_2.5.1          lifecycle_1.0.3   fs_1.6.2          pkgconfig_2.0.3  \n## [37] pillar_1.9.0      bslib_0.5.0       gtable_0.3.3      glue_1.6.2       \n## [41] highr_0.10        xfun_0.39         tidyselect_1.2.0  rstudioapi_0.15.0\n## [45] farver_2.1.1      htmltools_0.5.5   labeling_0.4.2    rmarkdown_2.23   \n## [49] compiler_4.3.1    downlit_0.4.3"},{"path":"reading-files-with-readr.html","id":"reading-files-with-readr","chapter":"14 Reading files with readr","heading":"14 Reading files with readr","text":"","code":""},{"path":"reading-files-with-readr.html","id":"cleaning-column-names","chapter":"14 Reading files with readr","heading":"14.1 Cleaning column names","text":"Reading CSV file often requires data cleaning. example, say want import data convert column names snake_case.us probably read .CSV file first, start data cleaning - example janitor::clean_names() function.previous example, used clean_names() function \"janitor\" package convert column names lowercase. can achieve result using make_clean_names() function within read_csv function, specifying name_repair argument.default janitor::make_clean_names function default argument snake_case within function also case argument common naming conventions can used.","code":"\nlibrary(tidyverse)\nlibrary(janitor)\n#load data\npenguins <- read_csv (\"data/penguins_raw.csv\")\n\npenguins |> read_csv()\njanitor::clean_names(penguins) \npenguins <- read_csv (\"data/penguins_raw.csv\",\n                      name_repair = janitor::make_clean_names)"},{"path":"reading-files-with-readr.html","id":"selecting-columns","chapter":"14 Reading files with readr","heading":"14.2 Selecting columns","text":"addition cleaning column names, can also directly select columns using \"read_csv\" function utilizing \"col_select\" argument. can extremely useful working large files, selecting columns need can memory-efficient.","code":"\npenguins <- read_csv (\"data/penguins_raw.csv\",\n                      name_repair = janitor::make_clean_names,\n                      col_select = c(species, body_mass_g, flipper_length_mm)) |> \n  glimpse()"},{"path":"reading-files-with-readr.html","id":"reading-multiple-files","chapter":"14 Reading files with readr","heading":"14.3 Reading multiple files","text":"","code":"\ndir.create(c(\"data/many_files\"))\npeng_samples <- map(1:25, ~ slice_sample(penguins, n = 20))\n\niwalk(peng_samples, ~ write_csv(., paste0(\"data/many_files/\", .y, \".csv\")))"},{"path":"reading-files-with-readr.html","id":"create-a-vector-of-file-paths","chapter":"14 Reading files with readr","heading":"14.3.1 Create a vector of file paths","text":"function \"list.files\" several arguments. explanation key arguments:\"path\": argument allows specify directory files located. essential ensure path set correctly. working within R-Studio project defined working directory avoid issues.\"path\": argument allows specify directory files located. essential ensure path set correctly. working within R-Studio project defined working directory avoid issues.\"pattern\": provide regular expression argument filter files want list. example, mentioned looking files containing string \"csv.\" helps narrow selection specific file types patterns.\"pattern\": provide regular expression argument filter files want list. example, mentioned looking files containing string \"csv.\" helps narrow selection specific file types patterns.\"full.names\": Setting argument TRUE indicates want store full paths files, just names. important ensuring can correctly access read files later. \"full.names\" set TRUE, may encounter difficulties attempting read files file paths incomplete.\"full.names\": Setting argument TRUE indicates want store full paths files, just names. important ensuring can correctly access read files later. \"full.names\" set TRUE, may encounter difficulties attempting read files file paths incomplete.","code":"\ncsv_files_list_files <- list.files(path = \"data/many_files\",\n                                    pattern = \"csv\", full.names = TRUE) [1] \"data/many_files/1.csv\"  \"data/many_files/10.csv\" \"data/many_files/11.csv\" \"data/many_files/12.csv\"\n [5] \"data/many_files/13.csv\" \"data/many_files/14.csv\" \"data/many_files/15.csv\" \"data/many_files/16.csv\"\n [9] \"data/many_files/17.csv\" \"data/many_files/18.csv\" \"data/many_files/19.csv\" \"data/many_files/2.csv\" \n[13] \"data/many_files/20.csv\" \"data/many_files/21.csv\" \"data/many_files/22.csv\" \"data/many_files/23.csv\"\n[17] \"data/many_files/24.csv\" \"data/many_files/25.csv\" \"data/many_files/3.csv\"  \"data/many_files/4.csv\" \n[21] \"data/many_files/5.csv\"  \"data/many_files/6.csv\"  \"data/many_files/7.csv\"  \"data/many_files/8.csv\" \n[25] \"data/many_files/9.csv\""},{"path":"reading-files-with-readr.html","id":"read-multiple-files","chapter":"14 Reading files with readr","heading":"14.3.2 Read multiple files","text":"Now obtained file paths, can proceed load files R. preferred method tidyverse use map_dfr function purrr package. function iterates file paths combines data frames single, unified data frame. following code, .x represents file name path. read output actual content CSV files (just filenames), include .x (path) within readr function. example deals CSV files, approach works similarly rectangular file formats.","code":"\ndf <- map_dfr(csv_files_list_files,\n              ~ read_csv(.x))\n\nglimpse(df)"},{"path":"reading-files-with-readr.html","id":"selecting-files","chapter":"14 Reading files with readr","heading":"14.3.3 Selecting files","text":"stringr::str_detect()","code":"\ncsv_files_list_files[str_detect(csv_files_list_files, pattern = \"[2-4]\",\nnegate = FALSE)] [1] \"data/many_files/12.csv\" \"data/many_files/13.csv\" \"data/many_files/14.csv\"\n [4] \"data/many_files/2.csv\"  \"data/many_files/20.csv\" \"data/many_files/21.csv\"\n [7] \"data/many_files/22.csv\" \"data/many_files/23.csv\" \"data/many_files/24.csv\"\n[10] \"data/many_files/25.csv\" \"data/many_files/3.csv\"  \"data/many_files/4.csv\"\ncsv_files_list_files[str_detect(csv_files_list_files, pattern = \"[24]\\\\.csv$\")][1] \"data/many_files/12.csv\" \"data/many_files/14.csv\" \"data/many_files/2.csv\" \n[4] \"data/many_files/22.csv\" \"data/many_files/24.csv\" \"data/many_files/4.csv\"\n"},{"path":"working-across-columns.html","id":"working-across-columns","chapter":"15 Working across columns","heading":"15 Working across columns","text":"section go following functions:last_col()last_col()starts_with()starts_with()ends_with()ends_with()contains()contains()matches()matches()num_range()num_range()()()","code":""},{"path":"working-across-columns.html","id":"select-the-last-column","chapter":"15 Working across columns","heading":"15.1 Select the last column","text":"can also select n---last last_col()\nIndexing starts 0, 1 indicates n-1.\n","code":"\npenguins |> \n  select(last_col()) |> \n  glimpse()## Rows: 344\n## Columns: 1\n## $ flipper_range <fct> small, small, medium, NA, medium, small, small, medium, …\npenguins |> \n  select(last_col(3)) |> \n  glimpse()## Rows: 344\n## Columns: 1\n## $ delta_13_c_o_oo <dbl> NA, -24.69454, -25.33302, NA, -25.32426, -25.29805, -2…"},{"path":"working-across-columns.html","id":"selecting-columns-based-on-string","chapter":"15 Working across columns","heading":"15.2 Selecting columns based on string","text":"starts_with ends_with works character, also vector characters","code":"\npenguins |> \n  select(starts_with(\"s\")) |> \n  glimpse()Rows: 344\nColumns: 5\n$ study_name    <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\"…\n$ sample_number <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,…\n$ species       <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie …\n$ stage         <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\"…\n$ sex           <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", NA, NA, NA, NA, \"F…\n\npenguins |> \n  select(starts_with(c(\"s\", \"c\"))) |> \n  glimpse()Rows: 344\nColumns: 9\n$ study_name        <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0…\n$ sample_number     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,…\n$ species           <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Ade…\n$ stage             <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg St…\n$ sex               <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", NA, NA, NA, NA…\n$ clutch_completion <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", …\n$ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, …\n$ culmen_depth_mm   <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, …\n$ comments          <chr> \"Not enough blood for isotopes.\", NA, NA, \"Adult not sampled.\", NA, NA, \"Nest neve…"},{"path":"working-across-columns.html","id":"contains","chapter":"15 Working across columns","heading":"15.2.1 Contains","text":"can also use contains() function search columns contain specific string, searches exact match string (regular expressions) case-insensitive","code":"\npenguins |> \n  select(contains(\"length\")) |> \n  glimpse()Rows: 344\nColumns: 2\n$ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, …\n$ flipper_length_mm <dbl> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180, 182, 191, 198, 185, 195…"},{"path":"working-across-columns.html","id":"regular-expressions","chapter":"15 Working across columns","heading":"15.2.2 Regular expressions","text":"https://help.relativity.com/RelativityOne/Content/Relativity/Regular_expressions/Searching_with_regular_expressions.htm#:~:text=%20example%2C%20%E2%80%9C%5Cd%E2%80%9D,%20follow%20a%20specific%20pattern.","code":"\npenguins |> \n  select(matches(\"[0-9]\")) |> \n  glimpse()Rows: 344\nColumns: 2\n$ delta_15_n_o_oo <dbl> NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18718, 9.46060, NA, 9.13362, 8.63243, …\n$ delta_13_c_o_oo <dbl> NA, -24.69454, -25.33302, NA, -25.32426, -25.29805, -25.21799, -24.89958, NA, -25.09…\n\npenguins |> \n  select(matches(\"[0-9]\")) |> \n  glimpse()\npenguins |> \n    select(matches(\"length_[a-z][a-z]\")) |> \n    glimpse()"},{"path":"working-across-columns.html","id":"selecting-by-column-type","chapter":"15 Working across columns","heading":"15.3 Selecting by column type","text":"function used want select variables specific data type dataset. example, can use select character variables.\"predicate functions\" includeis.doubleis.doubleis.numericis.numericis.logicalis.logicalis.factoris.factoris.integeris.integer","code":"\npenguins |> \n    select(where(is.character)) |> \n    glimpse()Rows: 344\nColumns: 10\n$ study_name        <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0…\n$ species           <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Ade…\n$ region            <chr> \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"A…\n$ island            <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Tor…\n$ stage             <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg St…\n$ individual_id     <chr> \"N1A1\", \"N1A2\", \"N2A1\", \"N2A2\", \"N3A1\", \"N3A2\", \"N4A1\", \"N4A2\", \"N5A1\", \"N5A2\", \"N…\n$ clutch_completion <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", …\n$ date_egg          <chr> \"11/11/2007\", \"11/11/2007\", \"16/11/2007\", \"16/11/2007\", \"16/11/2007\", \"16/11/2007\"…\n$ sex               <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", NA, NA, NA, NA…\n$ comments          <chr> \"Not enough blood for isotopes.\", NA, NA, \"Adult not sampled.\", NA, NA, \"Nest neve…"},{"path":"working-across-columns.html","id":"combos","chapter":"15 Working across columns","heading":"15.4 Combos","text":"Using standard logical operators | & can string toether different combinations selection criteria","code":"\npenguins |> \n  select(where(is.numeric) | contains(\"species\")) |> \n  glimpse()Rows: 344\nColumns: 8\n$ sample_number     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,…\n$ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, …\n$ culmen_depth_mm   <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, …\n$ flipper_length_mm <dbl> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180, 182, 191, 198, 185, 195…\n$ body_mass_g       <dbl> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 4250, 3300, 3700, 3200, 3800, …\n$ delta_15_n_o_oo   <dbl> NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18718, 9.46060, NA, 9.13362, 8.63243…\n$ delta_13_c_o_oo   <dbl> NA, -24.69454, -25.33302, NA, -25.32426, -25.29805, -25.21799, -24.89958, NA, -25.…\n$ species           <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Ade…\n"},{"path":"modifying-variables.html","id":"modifying-variables","chapter":"16 Modifying variables","heading":"16 Modifying variables","text":"","code":""},{"path":"modifying-variables.html","id":"count","chapter":"16 Modifying variables","heading":"16.1 count","text":"","code":""},{"path":"modifying-variables.html","id":"extract","chapter":"16 Modifying variables","heading":"16.2 extract","text":"approach reaches limits quite quickly - note left ugly ) end second column. also issues lack clear separator distinguish columns want create. use cases extract.Now suppose want separate common names latin names species variable regex:first group captures least 1 letter (\\w+).first group captures least 1 letter (\\w+).column followed space, characters followed \nanother space: .*column followed space, characters followed \nanother space: .*last group contains anything found inside brackets ()last group contains anything found inside brackets ()","code":"\npenguins |> \n  separate(species,\n          into = c(\"species\", \"full_latin_name\"),\n          sep = \"\\\\(\"\n          )\npenguins <- penguins |> \n  extract(species,\n          into = c(\"species\", \"full_latin_name\"),\n          regex = \"(\\\\w+) .* \\\\(([^)]+)\\\\)\"\n          )\npenguins |> colnames()##  [1] \"study_name\"        \"sample_number\"     \"species\"          \n##  [4] \"full_latin_name\"   \"region\"            \"island\"           \n##  [7] \"stage\"             \"individual_id\"     \"clutch_completion\"\n## [10] \"date_egg\"          \"culmen_length_mm\"  \"culmen_depth_mm\"  \n## [13] \"flipper_length_mm\" \"body_mass_g\"       \"sex\"              \n## [16] \"delta_15_n_o_oo\"   \"delta_13_c_o_oo\"   \"comments\"         \n## [19] \"date_egg_proper\"   \"flipper_range\""},{"path":"factors-1.html","id":"factors-1","chapter":"17 Factors","heading":"17 Factors","text":"","code":""},{"path":"factors-1.html","id":"anonymising-factors","chapter":"17 Factors","heading":"17.1 Anonymising factors","text":"Sometimes want make data completely anonymous people can’t see sensitive information. wish blind analyses.forcats::fct_anon","code":"\npenguins |> \n  mutate(species = fct_anon(species,\n         prefix = \"species_\"))"},{"path":"factors-1.html","id":"lump-factors","chapter":"17 Factors","heading":"17.2 lump factors","text":"","code":"\npenguins |> \n  mutate(body_size = fct_lump_min(as_factor(species), 50)) |> \n  ggplot(aes(x = body_size,\n         y = flipper_length_mm))+\n  geom_boxplot()"},{"path":"factors-1.html","id":"ordering-factors","chapter":"17 Factors","heading":"17.3 ordering factors","text":"function fct_infreq can change order according frequently level occursfct_reorder allows us order levels based another continuous variable","code":"\npenguins |> \n  mutate(species = fct_relevel(species, \"Adelie\", \"Chinstrap\", \"Gentoo\")) |> \n  ggplot(aes(x = species))+\n  geom_bar()+\n  coord_flip()\npenguins |> \n  mutate(species = fct_infreq(species)) |> \n  ggplot(aes(x = species))+\n  geom_bar()+\n  coord_flip()\npenguins |> \n  mutate(species = fct_rev(as_factor(species))) |> \n  ggplot(aes(x = species))+\n  geom_bar()+\n  coord_flip()\npenguins |> \n  mutate(species = as_factor(species) |> \n           fct_reorder(body_mass_g,\n                       .fun = median)) |> \n  # by default the levels are ordered by the median values of the continuous variable\n  # mean, min and max can all be included here\n  ggplot(aes(x = species,\n             y = body_mass_g,\n             colour = species))+\n  geom_boxplot(width = .2,\n               outlier.shape = NA)+\n  geom_jitter(width = .2,\n              alpha = .4)"},{"path":"applying-functions-across-columns.html","id":"applying-functions-across-columns","chapter":"18 Applying functions across columns","heading":"18 Applying functions across columns","text":"","code":""},{"path":"applying-functions-across-columns.html","id":"calculate-summary-statistics-across-columns","chapter":"18 Applying functions across columns","heading":"18.1 calculate summary statistics across columns","text":"","code":"\npenguins |> \n  group_by(species) |> \n  summarise(\n    mean_body_mass = mean(body_mass_g, na.rm = T),\n    mean_flipper_length = mean(flipper_length_mm, na.rm = T)\n  )\npenguins |> \n  group_by(species) |> \n  summarise(\n    across(\n      .cols = where(is.numeric),\n      .fns = ~mean(.x, na.rm = T),\n      .names = \"mean_{.col}\")\n    )"},{"path":"applying-functions-across-columns.html","id":"change-variable-types-across-columns","chapter":"18 Applying functions across columns","heading":"18.2 Change variable types across columns","text":"","code":"\npenguins |> \n  mutate(\n    across(.cols = c(\"species\", \"island\", \"region\"),\n           .fns = as_factor)\n  ) |> \n  select(where(is.factor)) |> \n  glimpse()## Rows: 344\n## Columns: 4\n## $ species       <fct> Adelie Penguin (Pygoscelis adeliae), Adelie Penguin (Pyg…\n## $ region        <fct> Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, …\n## $ island        <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, T…\n## $ flipper_range <fct> small, small, medium, NA, medium, small, small, medium, …Rows: 344\nColumns: 3\n$ species <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ region  <fct> Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anve…\n$ island  <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen,…"},{"path":"applying-functions-across-columns.html","id":"correct-typos","chapter":"18 Applying functions across columns","heading":"18.3 Correct typos","text":"","code":"\nx <- c(\"Adelie\", \"adelie\", \"pinstrap\", \"Chinstrap\")\ny <- c(\"adelie\", \"Adelie\", \"Chinstrap\",\"Chinstrap\")\n\ntypo_df <- tibble(x,y)\ntypo_df |> \n  mutate(across(\n    .cols = everything(),\n    .fns = ~ case_when(\n      str_detect(., \"adelie\") ~ str_replace(., \"adelie\", \"Adelie\"),\n      str_detect(., \"pinstrap\") ~ str_replace(., \"pinstrap\", \"Chinstrap\"),\n      TRUE ~ .\n    )\n  ))"},{"path":"working-with-rows.html","id":"working-with-rows","chapter":"19 Working with rows","heading":"19 Working with rows","text":"","code":""},{"path":"working-with-rows.html","id":"filtering-rows-based-on-conditions-across-multiple-columns","chapter":"19 Working with rows","heading":"19.1 Filtering rows based on conditions across multiple columns","text":"","code":"\npenguins |> \n  filter(\n    if_any(.cols = contains(\"culmen\"),\n           .fns = ~. < 40)\n  ) |> \n  glimpse()\npenguins |> \n  filter(\n    if_all(.cols = contains(\"culmen\"),\n           .fns = ~. < 40)\n  ) |> \n  glimpse()"},{"path":"working-with-rows.html","id":"filter-rows-based-on-missing-values","chapter":"19 Working with rows","heading":"19.2 filter rows based on missing values","text":"\nfirst outcome can seem counter-intuitive, can \nexplained ! operator. if_all evaluating\nwhether columns meet condition containing NA.\n\ncan try different combinations if_all, if_any \noperator\n","code":"\npenguins |> \n  filter(\n    if_all(.cols = where(is.numeric),\n           .fns = ~!is.na(.))\n  ) "},{"path":"working-with-rows.html","id":"slicing","chapter":"19 Working with rows","heading":"19.3 slicing","text":"Helper functions include slice_head(), slice_tail(), slice_max(), slice_min() slice_sample()\ncan use functions quickly easily filter data situations","code":"\npenguins |> \n  arrange(desc(body_mass_g)) |> \n  slice(1:10)\npenguins |> \n  arrange(desc(body_mass_g)) |> \n  rownames_to_column(var = \"row_number\") |> \n  slice(c(1,123,307))\npenguins |> \n  arrange(desc(body_mass_g)) |> \n  rownames_to_column(var = \"row_number\") |> \n  slice(c(-1:-340))\npenguins |> \n  slice_max(order_by = body_mass_g,\n            n = 20) |> # we can also use prop e.g. prop =.1 to slice the top 10%\n  select(species, body_mass_g)"},{"path":"working-with-rows.html","id":"groupwise-slicing","chapter":"19 Working with rows","heading":"19.4 groupwise slicing","text":"","code":"\npenguins |> \n  group_by(species) |> \n  slice_max(order_by = body_mass_g,\n            n = 3) |> \n  select(species, body_mass_g) |> \n  ungroup()"},{"path":"working-with-rows.html","id":"bootstrapping-with-slice","chapter":"19 Working with rows","heading":"19.5 bootstrapping with slice","text":"","code":"\nset.seed(342)\nbootstraps <- map(1:100, ~slice_sample(penguins, prop = .1, replace = TRUE))\n\nbootstraps %>%\n    map_dbl(~ mean(.$body_mass_g, na.rm = TRUE)) |> \n  tibble(x = _ ) |> \nggplot(aes(x = x)) +\ngeom_histogram(fill = \"grey80\", color = \"black\")+\n  geom_vline(data = penguins,\n             aes(xintercept = mean(body_mass_g, na.rm = T)),\n             linewidth = 2, colour = \"red\", linetype  =\"dashed\")"},{"path":"group-work.html","id":"group-work","chapter":"20 Group work","heading":"20 Group work","text":"R4DS book demonstrates functions can used run multiple models simultaneously. technique valuable extracting meaningful insights data. well-known example approach involves Gapminder dataset. cover brief version :find well culmen length can predict culmen depth build linear regression model.created model, can retrieve results parameters test statistics\nsummary function:\nsummary(model)Now know important covariates consider - appropriate method analysis perspective include covariates within single modelHowever, may occasions wish apply simple models subpopulation turn:","code":"\nmodel <- lm(culmen_depth_mm ~ culmen_length_mm, data = penguins)\n\nsummary(model)## \n## Call:\n## lm(formula = culmen_depth_mm ~ culmen_length_mm, data = penguins)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -4.1381 -1.4263  0.0164  1.3841  4.5255 \n## \n## Coefficients:\n##                  Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)      20.88547    0.84388  24.749  < 2e-16 ***\n## culmen_length_mm -0.08502    0.01907  -4.459 1.12e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.922 on 340 degrees of freedom\n##   (2 observations deleted due to missingness)\n## Multiple R-squared:  0.05525,    Adjusted R-squared:  0.05247 \n## F-statistic: 19.88 on 1 and 340 DF,  p-value: 1.12e-05\nmodel <- lm(culmen_depth_mm ~ culmen_length_mm * species, data = penguins)\n\nsummary(model)Call:\nlm(formula = culmen_depth_mm ~ culmen_length_mm * species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.6574 -0.6675 -0.0524  0.5383  3.5032 \n\nCoefficients:\n                                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                       11.40912    1.13812  10.025  < 2e-16 ***\nculmen_length_mm                   0.17883    0.02927   6.110 2.76e-09 ***\nspeciesChinstrap                  -3.83998    2.05398  -1.870 0.062419 .  \nspeciesGentoo                     -6.15812    1.75451  -3.510 0.000509 ***\nculmen_length_mm:speciesChinstrap  0.04338    0.04558   0.952 0.341895    \nculmen_length_mm:speciesGentoo     0.02601    0.04054   0.642 0.521590    \n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 0.9548 on 336 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.7697,    Adjusted R-squared:  0.7662 \nF-statistic: 224.5 on 5 and 336 DF,  p-value: < 2.2e-16\n\npenguins |> \n  group_by(species) |> \n  nest() |> \n  mutate(model = map(data, ~ lm(culmen_depth_mm ~ culmen_length_mm, data = .))) |> \n  mutate(tidy = map(model, broom::tidy)) |> \n  unnest(tidy)A tibble:6 × 8\nGroups:species [3]\n\nAdelie  <tibble>    <S3: lm>    (Intercept) 11.4091245  1.33893250  \nAdelie  <tibble>    <S3: lm>    culmen_length_mm    0.1788343   0.03443569  \nGentoo  <tibble>    <S3: lm>    (Intercept) 5.2510084   1.05480901  \nGentoo  <tibble>    <S3: lm>    culmen_length_mm    0.2048443   0.02215802  \nChinstrap   <tibble>    <S3: lm>    (Intercept) 7.5691401   1.55052928  \nChinstrap   <tibble>    <S3: lm>    culmen_length_mm    0.2222117   0.03167825  \n6 rows | 1-6 of 8 columns\n"},{"path":"pivot.html","id":"pivot","chapter":"21 Pivot","heading":"21 Pivot","text":"","code":""},{"path":"pivot.html","id":"pivot-wider","chapter":"21 Pivot","heading":"21.1 pivot wider","text":"\nUn-tidy data violates one three principles one way \nanother:\n\n• variable forms column • observation forms row • \ntype observation unit table\ndata untidy value measures underlying attribute (number observations) split across three columns. wk1,wk2 wk3 represent underlying variable observations split across three weeks.can use pivot create tidy representation dataWe can tidy dataframe removing \"wk\" prefix:\nNote week column still treated character\nstring. using names_transform can fix \n","code":"\nwk1 <- c(1,2,4,5)\nwk2 <- c(3,4,1,0)\nwk3 <- c(0,0,2,0)\npenguin_id <- c(\"N15A1\" , \"N15A2\" , \"N18A1\", \"N71A2\")\n\npeng_obs <- tibble(penguin_id, wk1,wk2,wk3)\npeng_obs |> \n  pivot_longer(\n    cols = \"wk1\":\"wk3\",\n    names_to = \"week\",\n    values_to = \"observations\"\n  )\npeng_obs |> \n  pivot_longer(\n    cols = \"wk1\":\"wk3\",\n    names_to = \"week\",\n    names_prefix = \"wk\",\n    values_to = \"observations\"\n  )\npeng_obs |> \n  pivot_longer(\n    cols = \"wk1\":\"wk3\",\n    names_to = \"week\",\n    names_prefix = \"wk\",\n    names_transform = as.integer,\n    values_to = \"observations\"\n  )"},{"path":"pivot.html","id":"pivot-longer","chapter":"21 Pivot","heading":"21.2 pivot longer","text":"Suppose like make data frame wider like present results human-readable table. , can use pivot_wider provide arguments main parameters:id_cols: columns identifiers observations. column names\nremain unchanged data frame. values form rows transformed data\nframe. default, columns except specified names_from values_from\nbecome id_cols.id_cols: columns identifiers observations. column names\nremain unchanged data frame. values form rows transformed data\nframe. default, columns except specified names_from values_from\nbecome id_cols.names_from: columns transformed wider format. values \nconverted columns. specify one column names_from, \nnewly created column names combination column values.names_from: columns transformed wider format. values \nconverted columns. specify one column names_from, \nnewly created column names combination column values.values_from: values columns used columns created \nnames_from.values_from: values columns used columns created \nnames_from.","code":""},{"path":"pivot.html","id":"pivot-wider-for-summary-tables","chapter":"21 Pivot","heading":"21.3 pivot wider for summary tables","text":"","code":"\npenguins |> \n  group_by(species, island) |> \n  summarise(mean = mean(body_mass_g, na.rm = T))\npenguins |> \n  group_by(species, island) |> \n  summarise(mean = mean(body_mass_g, na.rm = T)) |> \n  pivot_wider(names_from = c(species, island),\n              values_from = mean,\n              names_prefix = \"mean_\")"},{"path":"writing-functions-in-tidyverse.html","id":"writing-functions-in-tidyverse","chapter":"22 Writing Functions in Tidyverse","heading":"22 Writing Functions in Tidyverse","text":"goal understand use tidy evaluation write functions incorporate tidyverse functions e.g. (mutate, select, filter) etc.example code select variable:Put exact working code functionThis error occurs becaus tidy evaluation\nTidy evaluation: framework controlling expressions \nvariables code evaluated tidyverse functions.\n\n\nAllows programmers select variables based position,\nname, type\n\n\nAllows programmers select variables based position,\nname, type\n\n\nUseful passing variable names inputs functions use\ntidyverse packages like dplyr ggplot2\n\n\nUseful passing variable names inputs functions use\ntidyverse packages like dplyr ggplot2\n\n\n{dplyr} verbs rely tidy evaluation resolve programming\ncommands\n\n\n{dplyr} verbs rely tidy evaluation resolve programming\ncommands\n","code":"\npenguins |> \n  select(species)\ntest_function <- function(select_var){\n  penguins |> \n  select(select_var)\n}\n\ntest_function(select_var = species)Error: object 'species' not found\n"},{"path":"writing-functions-in-tidyverse.html","id":"data-masking","chapter":"22 Writing Functions in Tidyverse","heading":"22.1 Data masking","text":"Data masking handy feature tidyverse makes easier program dataframes. allows reference columns wihout using $, whereas almost base R functions use unmasked programming.However, makes harder create functionsData masking used arrange(), count(), filter(), group_by(), mutate(), summarise(). check type tidy evaluation function uses, check help file.passing quoted arguments function, can use directly expression, function evaluate part data frame.However, can avoid embracing curly operators {{.}} allows data-masked argument evaluation delayed data frame columns defined. {{ operator can tunnel data-variables (.e. columns data frames) arg-variables (function arguments).try another data-masked function","code":"\ntest_filter_species <- function(filter_var) {\n  penguins %>%\n    filter(species == filter_var)\n}\n\ntest_filter_species(\"Adelie\") %>%\n  glimpse()## Rows: 0\n## Columns: 19\n## $ study_name        <chr> \n## $ sample_number     <dbl> \n## $ species           <chr> \n## $ region            <chr> \n## $ island            <chr> \n## $ stage             <chr> \n## $ individual_id     <chr> \n## $ clutch_completion <chr> \n## $ date_egg          <chr> \n## $ culmen_length_mm  <dbl> \n## $ culmen_depth_mm   <dbl> \n## $ flipper_length_mm <dbl> \n## $ body_mass_g       <dbl> \n## $ sex               <chr> \n## $ delta_15_n_o_oo   <dbl> \n## $ delta_13_c_o_oo   <dbl> \n## $ comments          <chr> \n## $ date_egg_proper   <date> \n## $ flipper_range     <fct>\ntest_filter_general <- function(filter_condition) {\n  penguins %>%\n    filter(filter_condition)\n}\n\ntest_filter_general(\"flipper_length_mm > 180\") %>%\n  glimpse()Error in `filter()`:\nℹ In argument: `filter_condition`.\nCaused by error:\n! `..1` must be a logical vector, not the string \"fliper_length_mm > 180\".\nBacktrace:\n  1. test_filter_general(\"flipper_length_mm > 180\") %>% glimpse()\n 12. dplyr:::dplyr_internal_error(...)\n\ntest_filter_general <- function(filter_condition) {\n  penguins %>%\n    filter({{filter_condition}})\n}\n\ntest_filter_general(flipper_length_mm > 180) %>%\n  glimpse()## Rows: 329\n## Columns: 19\n## $ study_name        <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708…\n## $ sample_number     <dbl> 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, …\n## $ species           <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Pengu…\n## $ region            <chr> \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"A…\n## $ island            <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", …\n## $ stage             <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, …\n## $ individual_id     <chr> \"N1A1\", \"N1A2\", \"N2A1\", \"N3A1\", \"N3A2\", \"N4A1\", \"N4A…\n## $ clutch_completion <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\"…\n## $ date_egg          <chr> \"11/11/2007\", \"11/11/2007\", \"16/11/2007\", \"16/11/200…\n## $ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0…\n## $ culmen_depth_mm   <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2…\n## $ flipper_length_mm <dbl> 181, 186, 195, 193, 190, 181, 195, 193, 190, 186, 18…\n## $ body_mass_g       <dbl> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3475, 4250…\n## $ sex               <chr> \"MALE\", \"FEMALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMAL…\n## $ delta_15_n_o_oo   <dbl> NA, 8.94956, 8.36821, 8.76651, 8.66496, 9.18718, 9.4…\n## $ delta_13_c_o_oo   <dbl> NA, -24.69454, -25.33302, -25.32426, -25.29805, -25.…\n## $ comments          <chr> \"Not enough blood for isotopes.\", NA, NA, NA, NA, \"N…\n## $ date_egg_proper   <date> 2007-11-11, 2007-11-11, 2007-11-16, 2007-11-16, 200…\n## $ flipper_range     <fct> small, small, medium, medium, small, small, medium, …\nsummary_table <- function(df, var){\n  df |> \n    summarise(mean = mean({{var}}, na.rm = T),\n              sd = sd({{var}}, na.rm = T))\n}\n\nsummary_table(penguins, body_mass_g)"},{"path":"writing-functions-in-tidyverse.html","id":"alternative-to","chapter":"22 Writing Functions in Tidyverse","heading":"22.1.1 Alternative to {{}}","text":"{{.}} shortcut !!enquo(.) rlang::enquo() captures quote argument expression. result enquo() quosure, combination quoted expression associated environment.!! unquote operator. used unquote unsplice contents quosure. words, takes quoted expression quosure evaluates . can see work one previous examples:","code":"\ntest_filter_general <- function(filter_condition) {\n  \n  filter_quo <- enquo(filter_condition)\n  \n  penguins %>%\n    filter(!!filter_quo)\n}\n\ntest_filter_general(flipper_length_mm > 180) %>%\n  glimpse()## Rows: 329\n## Columns: 19\n## $ study_name        <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708…\n## $ sample_number     <dbl> 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, …\n## $ species           <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Pengu…\n## $ region            <chr> \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"A…\n## $ island            <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", …\n## $ stage             <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, …\n## $ individual_id     <chr> \"N1A1\", \"N1A2\", \"N2A1\", \"N3A1\", \"N3A2\", \"N4A1\", \"N4A…\n## $ clutch_completion <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\"…\n## $ date_egg          <chr> \"11/11/2007\", \"11/11/2007\", \"16/11/2007\", \"16/11/200…\n## $ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0…\n## $ culmen_depth_mm   <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2…\n## $ flipper_length_mm <dbl> 181, 186, 195, 193, 190, 181, 195, 193, 190, 186, 18…\n## $ body_mass_g       <dbl> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3475, 4250…\n## $ sex               <chr> \"MALE\", \"FEMALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMAL…\n## $ delta_15_n_o_oo   <dbl> NA, 8.94956, 8.36821, 8.76651, 8.66496, 9.18718, 9.4…\n## $ delta_13_c_o_oo   <dbl> NA, -24.69454, -25.33302, -25.32426, -25.29805, -25.…\n## $ comments          <chr> \"Not enough blood for isotopes.\", NA, NA, NA, NA, \"N…\n## $ date_egg_proper   <date> 2007-11-11, 2007-11-11, 2007-11-16, 2007-11-16, 200…\n## $ flipper_range     <fct> small, small, medium, medium, small, small, medium, …"},{"path":"writing-functions-in-tidyverse.html","id":"tidy-select","chapter":"22 Writing Functions in Tidyverse","heading":"22.2 tidy-select","text":"using functions use tidy-select, put variable names quotes use th all_of any_of functions.any_of(): selecting listed variablesany_of(): selecting listed variablesall_of(): strict selection. variables character vector missing, error thrownall_of(): strict selection. variables character vector missing, error thrownCan also use !all_of() select variables found character vector supplied all_of()Can also use !all_of() select variables found character vector supplied all_of()","code":"\nmy_select_function <- function(select_variable){\n  penguins |> \n    dplyr::select(select_variable)\n  }\n\nmy_select_function(species) |> \n  glimpse()Error: object 'species' not found\n\nmy_select_function <- function(select_variable){\n  penguins |> \n    dplyr::select(select_variable)\n  }\n\nmy_select_function(\"species\") |> \n  glimpse()Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nPlease use `all_of()` or `any_of()` instead.\n# Was:\ndata %>% select(select_variable)\n\n# Now:\ndata %>% select(all_of(select_variable))\n\nmy_select_function <- function(select_variable){\n  penguins |> \n    dplyr::select(dplyr::all_of(select_variable))\n  }\n\nmy_select_function(select_variable = c(\"species\", \"sex\")) |> \n  glimpse()## Rows: 344\n## Columns: 2\n## $ species <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygosc…\n## $ sex     <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"FEMALE\", \"M…"},{"path":"writing-functions-in-tidyverse.html","id":"practice","chapter":"22 Writing Functions in Tidyverse","heading":"22.3 Practice","text":"Write function uses filter take two penguin species selects one numeric variable e.g. body_mass_g compares violin plot (geom_violin())example used enquo enable conversion character strings, means function arguments can provided without \"quotes\".","code":"\ncompare_species_plot <- function(data, species_1, species_2, feature) {\n    \n  filtered_data <- data |> \n        filter(species %in% c(species_1, species_2))\n    \n    # Create a conditional ggplot\n    ggplot(filtered_data, aes(x = species, y = {{feature}}))+ \n      geom_violin()\n        \n\n}\n\ncompare_species_plot(penguins, \"Adelie\", \"Chinstrap\", culmen_length_mm)\ncompare_species_plot <- function(data, species_1, species_2, feature) {\n    \n   \n    \n    # Quote species_1 and species_2 using quosures\n    species_1_quo <- quo_name(enquo(species_1))\n    species_2_quo <- quo_name(enquo(species_2))\n    \n\n    filtered_data <- data |> \n        filter(species %in% c(species_1_quo, species_2_quo))\n    \n    # Create a conditional ggplot\n    ggplot(filtered_data, aes(x = species, y = {{feature}})) +\n        geom_violin()\n}\n\n# Example usage without quotes for species names\n\ncompare_species_plot(penguins, Adelie, Chinstrap, culmen_length_mm)"},{"path":"writing-functions-in-tidyverse.html","id":"practice-1","chapter":"22 Writing Functions in Tidyverse","heading":"22.4 Practice","text":"Can write custom function tidyverse?","code":"\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] janitor_2.2.0      knitr_1.43         webexercises_1.1.0 glossary_1.0.0    \n##  [5] lubridate_1.9.2    forcats_1.0.0      stringr_1.5.0      dplyr_1.1.2       \n##  [9] purrr_1.0.1        readr_2.1.4        tidyr_1.3.0        tibble_3.2.1      \n## [13] ggplot2_3.4.2      tidyverse_2.0.0   \n## \n## loaded via a namespace (and not attached):\n##  [1] sass_0.4.6        utf8_1.2.3        generics_0.1.3    xml2_1.3.5       \n##  [5] stringi_1.7.12    hms_1.1.3         digest_0.6.33     magrittr_2.0.3   \n##  [9] evaluate_0.21     grid_4.3.1        timechange_0.2.0  bookdown_0.34    \n## [13] fastmap_1.1.1     jsonlite_1.8.7    fansi_1.0.4       scales_1.2.1     \n## [17] jquerylib_0.1.4   cli_3.6.1         rlang_1.1.1       munsell_0.5.0    \n## [21] withr_2.5.0       cachem_1.0.8      yaml_2.3.7        tools_4.3.1      \n## [25] tzdb_0.4.0        memoise_2.0.1     colorspace_2.1-0  vctrs_0.6.3      \n## [29] R6_2.5.1          lifecycle_1.0.3   snakecase_0.11.0  fs_1.6.2         \n## [33] pkgconfig_2.0.3   pillar_1.9.0      bslib_0.5.0       gtable_0.3.3     \n## [37] glue_1.6.2        xfun_0.39         tidyselect_1.2.0  rstudioapi_0.15.0\n## [41] htmltools_0.5.5   rmarkdown_2.23    compiler_4.3.1    downlit_0.4.3"},{"path":"data-visualisation-with-ggplot2.html","id":"data-visualisation-with-ggplot2","chapter":"23 Data visualisation with ggplot2","heading":"23 Data visualisation with ggplot2","text":"","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"intro-to-grammar","chapter":"23 Data visualisation with ggplot2","heading":"23.1 Intro to grammar","text":"ggplot2 package widely used valued simple, consistent approach making data visuals.'grammar graphics' relates different components plot function like different parts linguistic grammar. example, plots require axes, x y axes form one part ‘language’ plot. Similarly, plots data represented axes, often points, lines bars. visual way data represented forms another component grammar graphics. Furthermore, colour, shape size points lines can used encode additional information plot. information usually clarified key, legend, can also considered part ‘grammar’.philosophy ggplot much better explained package author, Hadley Wickham (Wickham, Chang, et al. (2023)). now, just need aware ggplots constructed specifying different components want display, based underlying information data frame.\nFigure 23.1: example can produce ggplot\n","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"before-we-start","chapter":"23 Data visualisation with ggplot2","heading":"23.1.0.1 Before we start","text":"workspace ready work Palmer penguins data. Load workspace now.Think basic checks start work today.","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"checklist-1","chapter":"23 Data visualisation with ggplot2","heading":"23.1.0.2 Checklist","text":"\nToday going make NEW R script project space\npreviously working. part organising \nworkspace analysis workflow well documented easy \nfollow\nOpen new R script - moving data wrangling data visualisationOpen new R script - moving data wrangling data visualisationSave file scripts folder call 02_visualisation_penguins.RSave file scripts folder call 02_visualisation_penguins.RAdd following script run :Add following script run :find Environment fills objects script 1\nsource() function handy way allowing\ndifferent scripts different parts R project, \nallow access objects built elsewhere. way building \nanalysis stages.\n\ncommand work remembered save name\nscript exactly put script inside subfolder\ncalled scripts.\n\nproject look like one ?\n\nFigure 23.2: neat project layout\n\nFigure 23.3: sucessfully saved 02_visualisation_penguins.R visible \n","code":"\n# LOAD R OBJECTS AND FUNCTIONS ----\nsource(\"scripts/01_import_penguins_data.R\")\n# import tidied penguins data and functions\n#__________________________----"},{"path":"data-visualisation-with-ggplot2.html","id":"what-if-source-isnt-working","chapter":"23 Data visualisation with ggplot2","heading":"23.1.0.3 What if source isn't working?","text":"source working, figure project set-can complete worksheet put following commands top script instead source(\"scripts/01_import_penguins_data.R\")","code":"\n#___________________________----\n# SET UP ----\n## An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n### Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. ----\n#__________________________----\n\n# PACKAGES ----\nlibrary(tidyverse) # tidy data packages\nlibrary(janitor) # cleans variable names\nlibrary(lubridate) # make sure dates are processed properly\n#__________________________----\n\n# IMPORT DATA ----\npenguins <- read_csv (\"data/penguins_raw.csv\")\n\npenguins <- janitor::clean_names(penguins) # clean variable names\n#__________________________----"},{"path":"data-visualisation-with-ggplot2.html","id":"building-a-plot","chapter":"23 Data visualisation with ggplot2","heading":"23.2 Building a plot","text":"start building plot going use penguin data working previously. First must specify data frame contains relevant data plot. can two ways:‘sending penguins data set ggplot function’:specifying dataframe within ggplot() functionThe output identical\nRunning command produce empty grey panel. \nneed specify different columns data frame\nrepresented plot.\n","code":"\n# Building a ggplot step by step ----\n## Render a plot background ----\npenguins  |>  \n  ggplot()\nggplot(data = penguins)"},{"path":"data-visualisation-with-ggplot2.html","id":"aesthetics---aes","chapter":"23 Data visualisation with ggplot2","heading":"23.2.1 Aesthetics - aes()","text":"can call different columns data dataset based column names. Column names given ‘aesthetic’ elements ggplot function, wrapped aes() function.want scatter plot, point x y coordinate. want x axis represent flipper length ( x = flipper_length_mm ), y axis represent body mass ( y = body_mass_g ).give specifications separated comma. Quotes required giving variables within aes().\ninterested quotes aren’t required can read non-standard\nevaluation.\nfar grid lines x y axis. ggplot() knows variables required plot, thus scale, information display data points.","code":"\n## Set axes ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))"},{"path":"data-visualisation-with-ggplot2.html","id":"geometric-representations---geom","chapter":"23 Data visualisation with ggplot2","heading":"23.3 Geometric representations - geom()","text":"Given want scatter plot, need specify geometric representation data point form, using geom_point(). many geometric object types.\nFigure 23.4: geom shapes\nadding layer (hence + sign) points plot. can think similar e.g. Adobe Photoshop uses layers images can reordered modified individually. add plots layer layer order geoms may important final aesthetic design.ggplot, layer added plot according position code. first show full breakdown components layer. layer requires information ondataaestheticsgeometric typeany summary datapositionThis quite complicate way write new layers - usual see simpler compact approachNow scatter plot! row (except two rows missing data) penguins data set now x coordinate, y coordinate, designated geometric representation (point).can see smaller penguins tend smaller flipper lengths.","code":"\n## Add a geom ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  layer(                # layer inherits data and aesthetic arguments from previous\n    geom=\"point\",       # draw point objects\n    stat=\"identity\",    # each individual data point gets a geom (no summaries)\n    position=position_identity()) # data points are not moved in any way e.g. we could specify jitter or dodge if we want to avoid busy overlapping data\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point() # geom_point function will always draw points, and unless specified otherwise the arguments for position and stat are both \"identity\"."},{"path":"data-visualisation-with-ggplot2.html","id":"and","chapter":"23 Data visualisation with ggplot2","heading":"23.3.1 |> and +","text":"ggplot2, early component tidyverse package, written pipe introduced. + sign ggplot2 functions similar way pipe functions tidyverse: allowing code written left right.","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"colour","chapter":"23 Data visualisation with ggplot2","heading":"23.3.2 Colour","text":"colors lines points can set directly using colour=\"red\", replacing “red” color name. colors filled objects, like bars, can set using fill=\"red\".However current plot informative colour used convey information species penguin.order achieve need use aes() , make colour conditional upon variable., aes() function containing relevant column name, given within geom_point() function.\ncommon mistake get confused use (use)\naes()\n\nspecifying fixed aesthetic e.g. red everything \ngo inside aes() instead specify e.g. colour = “red” \nshape =21.\n\nwish modify aethetic according variable \ndata go inside aes()\ne.g. aes(colour = species)\n\nmay (may ) noticed grammar ggplot (\ntidyverse general) accepts British/Americanization \nspelling!!!\ndata visualisations can start gain insights data quickly, can see Gentoo penguins tend larger longer flippers\nAdd carriage returns (new lines) |> + symbols.\n\ncases, R blind white space new lines, \nsimply make code readable, allow us add readable\ncomments.\n","code":"\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(colour=\"red\")\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))"},{"path":"data-visualisation-with-ggplot2.html","id":"more-layers","chapter":"23 Data visualisation with ggplot2","heading":"23.3.3 More layers","text":"can see relationship body size flipper length. want model relationship trend line? can add another ‘layer’ plot, using different geometric representation data. case trend line, fact summary data rather representation point.geom_smooth() function draws trend line data. default behaviour draw local regression line (curve) points, however can hard interpret. want add straight line based linear model (‘lm’) relationship x y.first encounter linear models course, learn lot later .example may notice assigning colour variable (species) geometric layers. means option simplify code. Aesthetics set \"top layer\" ggplot() inherited subsequent layers.\nNote - trend line blocking certain points, \n‘top layer’ plot. geom layers appear early \ncommand drawn first, can obscured geom layers \ncome .\n\nhappens switch order geom_point() \ngeom_smooth() functions ? notice trend\nline?\n","code":"\n## Add a second geom ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))+\n  geom_smooth(method=\"lm\",    #add another layer of data representation.\n              se=FALSE,\n              aes(colour=species)) # note layers inherit information from the top ggplot() function but not previous layers - if we want separate lines per species we need to either specify this again *or* move the color aesthetic to the top layer. \npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ ### now colour is set here it will be inherited by ALL layers\n  geom_point()+\n  geom_smooth(method=\"lm\",    #add another layer of data representation.\n              se=FALSE)"},{"path":"data-visualisation-with-ggplot2.html","id":"co-ordinate-space","chapter":"23 Data visualisation with ggplot2","heading":"23.3.4 Co-ordinate space","text":"ggplot automatically pick scale axis, type coordinate space. plots Cartesian (linear X vs linear Y) coordinate space.plot, let’s say want x y origin set 0. can add xlim() ylim() functions, define limits axes:, can control coordinate space using coord() functions. Say want flip x y axes, add coord_flip():","code":"\n## Set axis limits ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  xlim(0,240) + ylim(0,7000)\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  xlim(0,240) + ylim(0,7000)+\n  coord_flip()"},{"path":"data-visualisation-with-ggplot2.html","id":"labels","chapter":"23 Data visualisation with ggplot2","heading":"23.4 Labels","text":"default, axis labels column names gave aesthetics aes(). can change axis labels using xlab() ylab() functions. Given column names often short can cryptic, functionality particularly important effectively communicating results.","code":"\n## Custom labels ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  labs(x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\")"},{"path":"data-visualisation-with-ggplot2.html","id":"titles-and-subtitles","chapter":"23 Data visualisation with ggplot2","heading":"23.4.0.1 Titles and subtitles","text":"","code":"\n## Add titles ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  labs(x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       title= \"Penguin Size, Palmer Station LTER\",\n       subtitle= \"Flipper length and body mass for three penguin species\")"},{"path":"data-visualisation-with-ggplot2.html","id":"themes","chapter":"23 Data visualisation with ggplot2","heading":"23.5 Themes","text":"Finally, overall appearance plot can modified using theme() functions. default theme grey background.\nmay prefer theme_classic(), theme_minimal() even theme_void(). Try .\nlot customisation available theme()\nfunction. look making custom themes later\nlessons\n\ncan also try installing running even wider range \npre-built themes install R package ggthemes.\n\nFirst need run \ninstall.packages(\"ggthemes\") command. Remember one\ntimes command written script \ntyped directly console. ’s ’s rude send\nsomeone script install packages computer - think \nlibrary() polite request instead!\n\naccess range themes available type\nhelp(ggthemes) follow documentation find \ncan .\n","code":"\n## Custom themes ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  labs(x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       title= \"Penguin Size, Palmer Station LTER\",\n       subtitle= \"Flipper length and body mass for three penguin species\")+\n  theme_void()"},{"path":"data-visualisation-with-ggplot2.html","id":"more-geom-shapes","chapter":"23 Data visualisation with ggplot2","heading":"23.6 More geom shapes","text":"","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"jitter","chapter":"23 Data visualisation with ggplot2","heading":"23.6.1 Jitter","text":"geom_jitter() command adds random scatter points can reduce -plotting. Compare two plots:","code":"\n## geom point\n\nggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +\n  geom_point(aes(color = species),\n              alpha = 0.7, \n              show.legend = FALSE) \n\n## More geoms ----\nggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +\n  geom_jitter(aes(color = species),\n              width = 0.1, # specifies the width, change this to change the range of scatter\n              alpha = 0.7, # specifies the amount of transparency in the points\n              show.legend = FALSE) # don't leave a legend in a plot, if it doesn't add value"},{"path":"data-visualisation-with-ggplot2.html","id":"boxplots","chapter":"23 Data visualisation with ggplot2","heading":"23.6.2 Boxplots","text":"Box plots, ‘box & whisker plots’ another essential tool data analysis. Box plots summarize distribution set values displaying minimum maximum values, median (.e. middle-ranked value), range middle 50% values (inter-quartile range).\nwhisker line extending IQR box define Q3 + (1.5 x IQR), Q1 - (1.5 x IQR) respectively. can watch short video learn box plots .create box plot data use (prizes ) geom_boxplot()\nNote specifying colour variables using aes()\ngeometric shapes support internal colour “fill” external\ncolour “colour”. Try changing aes fill colour code ,\nnote happens.\npoints indicate outlier values [.e., greater Q3 + (1.5 x IQR)].can overlay boxplot scatter plot entire dataset, fully communicate raw summary data. reduce width jitter points slightly.\nexample switched using show.legend=FALSE inside\ngeom layer using theme(legend.position=“none”). ? \nexample reducing redundant code. specify\nshow.legend=FALSE every geom layer plot, theme\nfunction applies every layer. Save code, save time, reduce\nerrors!\n","code":"\nggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +\n  geom_boxplot(aes(fill = species),\n              alpha = 0.7, \n              width = 0.5, # change width of boxplot\n              show.legend = FALSE)\nggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +\n  geom_boxplot(aes(fill = species), # note fill is \"inside\" colour and colour is \"edges\" - try it for yourself\n              alpha = 0.2, # fainter boxes so the points \"pop\"\n              width = 0.5, # change width of boxplot\n              outlier.shape=NA)+\n  geom_jitter(aes(colour = species),\n                width=0.2)+\n  theme(legend.position = \"none\")"},{"path":"data-visualisation-with-ggplot2.html","id":"density-and-histogram","chapter":"23 Data visualisation with ggplot2","heading":"23.6.3 Density and histogram","text":"Compare following two sets code:first might struggle see/understand difference two charts. shapes roughly .first block code produced frequency histogram, bar represents actual number observations made within 'bin', second block code shows 'relative density' within bin. density histogram area curve sub-group sum 1. allows us compare distributions shapes sub-groups different sizes. example far fewer Adelie penguins dataset, density histogram occupy area graph two species.","code":"\npenguins |> \n    ggplot(aes(x=culmen_length_mm, fill=species),\n           position = \"identity\")+\n    geom_histogram(bins=50)\npenguins |> \n    ggplot(aes(x=culmen_length_mm, fill=species))+\n    geom_histogram(bins=50, \n                   aes(y=..density..),\n                   position = \"identity\")"},{"path":"data-visualisation-with-ggplot2.html","id":"more-colours","chapter":"23 Data visualisation with ggplot2","heading":"23.7 More Colours","text":"two main differences comes colors ggplot2. arguments, color fill, can specified single color \nassigned variables.already seen tutorial, variables inside aesthetics encoded variables outside properties unrelated variables.","code":"\npenguins |> \n    ggplot(aes(x=culmen_length_mm))+\n    geom_histogram(bins=50, \n                   aes(y=..density..,\n                       fill=species), \n                   position = \"identity\",\n                   colour=\"black\")"},{"path":"data-visualisation-with-ggplot2.html","id":"choosing-and-using-colour-palettes","chapter":"23 Data visualisation with ggplot2","heading":"23.7.0.1 Choosing and using colour palettes","text":"can specify colours want assign variables number different ways.ggplot2, colors assigned variables modified via scale_color_* scale_fill_* functions. order use color data, importantly need know dealing categorical continuous variable. color palette chosen depending type variable:sequential diverging color palettes used continuous variablessequential diverging color palettes used continuous variablesqualitative color palettes (unordered) categorical variables:qualitative color palettes (unordered) categorical variables:can pick sets colours assign categorical variable. number specified colours match number categories. can use wide number preset colour names can use hexadecimals.can also use range inbuilt colour palettes:\ncan explore schemes available command\nRColorBrewer::display.brewer.()\nalso many, many extensions provide additional colour palettes. favourite packages include ggsci wesanderson","code":"\n## Custom colours ----\n\npenguin_colours <- c(\"darkolivegreen4\", \"darkorchid3\", \"goldenrod1\")\n\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))+\n  scale_color_manual(values=penguin_colours)+\n  theme_minimal()\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))+\n  scale_color_brewer(palette=\"Set1\")+\n  theme_minimal()"},{"path":"data-visualisation-with-ggplot2.html","id":"accessibility","chapter":"23 Data visualisation with ggplot2","heading":"23.8 Accessibility","text":"","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"colour-blindness","chapter":"23 Data visualisation with ggplot2","heading":"23.8.0.1 Colour blindness","text":"easy get carried away colour palettes, remember times figures must accessible. One way check accessible figures use colour blindness checker colorBlindness","code":"\n## Check accessibility ----\n\nlibrary(colorBlindness)\ncolorBlindness::cvdPlot() # will automatically run on the last plot you made"},{"path":"data-visualisation-with-ggplot2.html","id":"guides-to-visual-accessibility","chapter":"23 Data visualisation with ggplot2","heading":"23.8.0.2 Guides to visual accessibility","text":"Using colours tell categories apart can useful, can see example , choose carefully. aesthetics can access geoms include shape, size - can combine complimentary ways enhance accessibility plots. hierarchy \"interpretability\" different types data","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"multiple-plots","chapter":"23 Data visualisation with ggplot2","heading":"23.9 Multiple plots","text":"","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"facets","chapter":"23 Data visualisation with ggplot2","heading":"23.9.0.1 Facets","text":"Adding combinations different aesthetics allows layer information onto 2D plot, sometimes though things just become busy. point becomes difficult see trends differences plot want break single plot sub-plots; called ‘faceting’. Facets commonly used much data display clearly single plot. revisit faceting , however now, let’s try facet plot according sex.use tilde symbol ‘~’ indicate column name form facet.","code":"\n## Facetting ----\npenguins |> \n  drop_na(sex) |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  facet_wrap(~sex)"},{"path":"data-visualisation-with-ggplot2.html","id":"patchwork","chapter":"23 Data visualisation with ggplot2","heading":"23.9.0.2 Patchwork","text":"many times might want combine separate figures multi-panel plots. Probably easiest way patchwork package (Pedersen (2022)).","code":"\n## Patchwork ----\nlibrary(patchwork)\n\np1 <- penguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = culmen_length_mm))+\n  geom_point(aes(colour=species))+\n  scale_color_manual(values=penguin_colours)+\n  theme_minimal()\n\np2 <- penguins |> \n  ggplot(aes(x=culmen_depth_mm, \n             y = culmen_length_mm))+\n  geom_point(aes(colour=species))+\n  scale_color_manual(values=penguin_colours)+\n  theme_minimal()\n\np3 <- penguins |>     \n  group_by(sex,species) |> \n    summarise(n=n()) |> \n     drop_na(sex) |> \n     ggplot(aes(x=species, y=n)) + \n  geom_col(aes(fill=sex), \n               width=0.8,\n               position=position_dodge(width=0.9), \n               alpha=0.6)+\n     scale_fill_manual(values=c(\"darkorange1\", \"azure4\"))+\n     theme_classic()\n\n (p1+p2)/p3+\n  plot_layout(guides = \"collect\") "},{"path":"data-visualisation-with-ggplot2.html","id":"activity-replicate-this-figure","chapter":"23 Data visualisation with ggplot2","heading":"23.10 Activity: Replicate this figure","text":"\nclose can get replicating figure ?\n\nMake NEW script assignment - replicate_figure.R\n\nMake sure use tips links end chapter, \ndone save file\n","code":"\npal <- c(\n  \"Adelie\" = \"#FF8C00\", \n  \"Chinstrap\" = \"#A034F0\", \n  \"Gentoo\" = \"#159090\")\n\npenguins |> \n  ggplot(aes(x = species,\n             y = body_mass_g,\n             fill = species,\n             colour = species))+\n  geom_violin(alpha = 0.2)+\n  geom_boxplot(width = 0.2,\n               alpha = 0.6)+\n  scale_fill_manual(values = pal)+\n  scale_colour_manual(values = pal)+\n  theme_classic()+\n  theme(legend.position = \"none\")+\n    labs(\n    x = \"\",\n    y = \"Body mass (g)\",\n    title = \"Body mass of brush-tailed penguins\",\n    subtitle = \"Box and violin plot of body mass by species\")"},{"path":"data-visualisation-with-ggplot2.html","id":"saving","chapter":"23 Data visualisation with ggplot2","heading":"23.11 Saving","text":"One easiest ways save figure made ggsave() function. default save last plot made screen.specify output path figures folder, provide file name. decided call plot plot (imaginative!) want save .PNG image file. can also specify resolution (dpi 300 good enough computer screens).\ngot far still time try one \nfollowing:\n\n\nMaking another type figure using penguins dataset, use \nreading use inspiration.\n\n\nMaking another type figure using penguins dataset, use \nreading use inspiration.\n\n\nUse data\n\n\nUse data\n","code":"\n# OUTPUT FIGURE TO FILE\n\nggsave(\"outputs/YYYYMMDD_ggplot_workshop_final_plot.png\", dpi=300)"},{"path":"data-visualisation-with-ggplot2.html","id":"quitting-1","chapter":"23 Data visualisation with ggplot2","heading":"23.11.0.1 Quitting","text":"\nMake sure saved script! Remember Download image\nfile RStudio Cloud onto computer.\n\nrun SessionInfo() end script gather\npackages versions using. useful \ncite R versions \npackages writing reports later.\n","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"finished-2","chapter":"23 Data visualisation with ggplot2","heading":"23.12 Finished","text":"Make sure saved scripts 💾 \"scripts\" folder.","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"what-we-learned","chapter":"23 Data visualisation with ggplot2","heading":"23.12.0.1 What we learned","text":"learnedThe anatomy ggplotsThe anatomy ggplotsHow add geoms different layersHow add geoms different layersHow use colour, colour palettes, facets, labels themesHow use colour, colour palettes, facets, labels themesPutting together multiple figuresPutting together multiple figuresHow save export imagesHow save export images","code":""},{"path":"data-visualisation-with-ggplot2.html","id":"further-reading-guides-and-tips-on-data-visualisation","chapter":"23 Data visualisation with ggplot2","heading":"23.13 Further Reading, Guides and tips on data visualisation","text":"R Cheat SheetsR Cheat SheetsFundamentals Data Visualization: book tells everything need know presenting figures accessbility clarityFundamentals Data Visualization: book tells everything need know presenting figures accessbility clarityBeautiful Plotting R: incredibly handy ggplot guide build improve figuresBeautiful Plotting R: incredibly handy ggplot guide build improve figuresThe ggplot2 book: original Hadley Wickham book ggplot2The ggplot2 book: original Hadley Wickham book ggplot2","code":""},{"path":"extensions-for-ggplot2.html","id":"extensions-for-ggplot2","chapter":"24 Extensions for ggplot2","heading":"24 Extensions for ggplot2","text":"https://exts.ggplot2.tidyverse.org/gghighlightggforce","code":""},{"path":"extensions-for-ggplot2.html","id":"ggdist","chapter":"24 Extensions for ggplot2","heading":"24.1 ggdist","text":"","code":""},{"path":"extensions-for-ggplot2.html","id":"rainclouds","chapter":"24 Extensions for ggplot2","heading":"24.1.1 Rainclouds","text":"","code":"\nlibrary(ggdist)\n\npenguins |> \n    ggplot(aes(x = species,\n               y = culmen_length_mm,\n              fill = species)) +\n  ggdist::stat_halfeye(\n    point_colour = NA,\n    .width = 0,\n    # shift raincloud up\n    justification = -.2)+\n  geom_boxplot(# remove outlier dots\n    outlier.shape = NA,\n    # shrink width of box\n    alpha = .4,\n    # fade box\n               width = .1)+\n  ggdist::stat_dots(aes(colour = species),\n                  # put dots underneath\n                    side = \"left\",\n                  # move position down\n                    justification = 1.1,\n                  # size of dots \n                    dotsize = .2,\n                    \n                  # adjust bins (grouping) of dots\n                    binwidth = .4)+\n  scale_fill_manual(values = pal) +\n  scale_colour_manual(values = pal)+\n  guides(fill = \"none\")+\n  coord_flip() # rotate figure"},{"path":"extensions-for-ggplot2.html","id":"interval-stats","chapter":"24 Extensions for ggplot2","heading":"24.1.2 Interval stats","text":"","code":"\npenguins |> \n  drop_na(sex) |> \n    ggplot(aes(x = species,\n               y = culmen_length_mm))+\n  ggdist::stat_interval(.width = c(.5, .66, .95))+\n  ggdist::stat_halfeye(aes(fill = sex),\n                       .width = 0,\n                       shape = 21,\n                       colour = \"white\",\n                       slab_alpha = .4,\n                       size = .5,\n                       position = position_nudge(x = .05))+\n  scale_color_viridis_d(option = \"mako\", direction = -1, end = .9)"},{"path":"extensions-for-ggplot2.html","id":"density","chapter":"24 Extensions for ggplot2","heading":"24.2 Density","text":"","code":"\nlibrary(ggdensity)\n\npenguins |>  \n    ggplot(aes(x = culmen_length_mm, \n               y = culmen_depth_mm,\n               colour = species)) +\n  geom_point(alpha = .2) +\n  ggdensity::geom_hdr_lines()+\n   scale_colour_manual(values = pal)"},{"path":"extensions-for-ggplot2.html","id":"ggridges","chapter":"24 Extensions for ggplot2","heading":"24.3 ggridges","text":"","code":"\nlibrary(ggridges)\n\npenguins |>  \n    ggplot(aes(x = culmen_length_mm, \n               y = species,\n               fill = species)) +\n  geom_density_ridges() + # use hjust and vjust to position text\n  scale_fill_manual(values = pal) +\n  scale_colour_manual(values = pal)+\n  theme(legend.position = \"none\")"},{"path":"extensions-for-ggplot2.html","id":"bump-charts","chapter":"24 Extensions for ggplot2","heading":"24.4 Bump charts","text":"","code":"\nlibrary(ggbump)\n\npenguin_summary <- penguins |> \n  mutate(date_egg = dmy(date_egg)) |> \n  filter(clutch_completion == \"Yes\") |> \n  mutate(year = year(date_egg)) |> \n  group_by(species, year) |> \n  summarise(n = n())\n\npenguin_summary |>\n  ggplot(aes(x = year, \n             y = n,\n             colour = species))+\n  geom_point(size = 7)+\n  geom_bump()+\n  geom_text(data = penguin_summary |> filter(year == max(year)),\n                                             aes(x = year + 0.1,\n                                                 label = species,\n                                                  hjust = 0),\n            size = 5)+\n  scale_x_continuous(limits = c(2007, 2009.5),\n                     breaks = (2007:2009))+\n  labs(y = \"Total number of complete clutches\")+\n  scale_fill_manual(values = pal) +\n  scale_colour_manual(values = pal)+\n  theme(legend.position = \"none\")"},{"path":"extensions-for-ggplot2.html","id":"dumbell-charts","chapter":"24 Extensions for ggplot2","heading":"24.5 Dumbell charts","text":"","code":"\nlibrary(ggalt)\n\nsummary_counts <- penguins |> \n  group_by(sex, species) |> \n  summarise(mean = mean(body_mass_g, na.rm = T)) |> \n  pivot_wider(names_from = sex, values_from = mean)\n\nggplot(summary_counts, \n       aes(y=species, x=FEMALE, xend=MALE)) +\n  geom_dumbbell(size=3, color=\"#e3e2e1\",\n                colour_x = \"#5b8124\", colour_xend = \"#bad744\") +\n  geom_text( x=summary_counts[[3,2]], y=3, aes(label=\"Female\"),\n             color=\"#9fb059\", size=3, vjust=-2, fontface=\"bold\")+\n  geom_text(x=summary_counts[[3,3]], y=3, aes(label=\"Male\"),\n             color=\"#bad744\", size=3, vjust=-2, fontface=\"bold\")+\n  labs(x = \"Body mass (g)\",\n       y = \"\")"},{"path":"extensions-for-ggplot2.html","id":"facets-1","chapter":"24 Extensions for ggplot2","heading":"24.6 Facets","text":"ggh4x package adds awesome features easy facet work including facet_nested():","code":"\nlibrary(ggh4x)\n\npenguins |> \n  mutate(Nester = ifelse(species==\"Gentoo\", \"Crustaceans\", \"Fish & Krill\")) |> \n  ggplot(aes(x = culmen_length_mm,\n             y = culmen_depth_mm,\n             colour = species))+\n  geom_point()+\n  facet_nested(~ Nester + species)+\n  scale_colour_manual(values = pal)+\n  theme(legend.position = \"none\")"},{"path":"extensions-for-ggplot2.html","id":"highlighting","chapter":"24 Extensions for ggplot2","heading":"24.7 Highlighting","text":"","code":"\nlibrary(gghighlight)\n\npenguins |> \n  ggplot(aes(body_mass_g,\n             fill = species),\n         position = \"identity\")+\n  geom_histogram()+\n  gghighlight()+\n  scale_fill_manual(values = pal)+\n  facet_wrap(~ species)\nlibrary(ggbeeswarm)\nlibrary(gghighlight)\npenguins |> \n    ggplot(aes(x = species,\n               y = body_mass_g,\n               fill = species))+\n    geom_beeswarm(shape = 21, \n                  colour = \"white\")+\n    scale_fill_manual(values = pal)+\n    gghighlight(body_mass_g > 4000)"},{"path":"extensions-for-ggplot2.html","id":"text","chapter":"24 Extensions for ggplot2","heading":"24.8 Text","text":"","code":""},{"path":"extensions-for-ggplot2.html","id":"ggforce","chapter":"24 Extensions for ggplot2","heading":"24.8.1 ggforce","text":"","code":"\npenguins |> \n    ggplot(\n        aes(x = culmen_length_mm,\n            y= body_mass_g,\n            colour = species)) +\n    geom_point(aes(fill = species), shape = 21, colour = \"white\") +\n    geom_smooth(method = \"lm\", se = FALSE,linetype = \"dashed\", alpha = .4)+\nggforce::geom_mark_ellipse(aes(\n    label = species,\n    filter = species == 'Adelie'),\n    con.colour  = \"#526A83\",\n    con.cap = 0,\n    con.arrow = arrow(ends = \"last\",\n                      length = unit(0.5, \"cm\")),\n    show.legend = FALSE) +\n    gghighlight(species == \"Adelie\")+\n  scale_colour_manual(values = pal)+\n  scale_fill_manual(values = pal)"},{"path":"extensions-for-ggplot2.html","id":"textpaths","chapter":"24 Extensions for ggplot2","heading":"24.8.2 textpaths","text":"","code":"\nlibrary(geomtextpath)\n\npenguins |> \n    ggplot(aes(x = culmen_length_mm, \n               colour = species,\n               label = species))+\n  geom_textdensity( hjust = 0.35, vjust = .1)+ # use hjust and vjust to position text\n  theme(legend.position = \"none\")"},{"path":"extensions-for-ggplot2.html","id":"ggtext","chapter":"24 Extensions for ggplot2","heading":"24.8.3 ggtext","text":"https://rfortherestofus.com/2020/05/color-titles-ggtext#:~:text=Adding%20color%20to%20titles%20using,HTML%2C%20not%20as%20raw%20text.","code":"\nlibrary(ggtext)\n\npenguins |> \n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |> \n  group_by(species) |> \n    summarise(n=n()) |> \nggplot(aes(x = species,\n           y = n,\n           fill = species))+\n        geom_col()+\n  geom_label(aes(label = n),\n            fill = \"white\",\n            nudge_y = 1,\n            colour = \"black\",\n            fontface = \"bold\")+\n  labs(x = \"\",\n       y = \"Count\",\n       title = paste(\n         'There are almost half the observations on <br> <span style = \"color:#A034F0\">Chinstrap<\/span> penguins,  as there are <br> on <span style = \"color:#FF8C00\">Adelie<\/span> and <span style =\"color:#159090\">Gentoo<\/span>penguins'\n       ))+\n  scale_fill_manual(\n    # when reordering levels - be careful about keeping colours consistent\n    values = c(\"#FF8C00\", \"#159090\", \"#A034F0\"))+\n  coord_flip()+\n  scale_y_continuous(limits = c(0, 200))+\n  theme(legend.position = \"none\",\n        axis.text.y = element_text(\n      color = c(\"#FF8C00\", \"#159090\", \"#A034F0\")),\n      plot.title = element_markdown())"},{"path":"extensions-for-ggplot2.html","id":"layouts-and-compositions","chapter":"24 Extensions for ggplot2","heading":"24.9 Layouts and compositions","text":"Patchwork, text images!!!!","code":"\nlibrary(patchwork)\nlibrary(png)\nlibrary(ggpubr)\n\npenguin_pic <- png::readPNG(\"images/lter_penguins.png\")\n\npenguin_fig <- ggplot() +\n  background_image(penguin_pic)\ntext <- tibble(\n  x = 0, y = 0, label = 'Simpsons Paradox is a statistical phenomenon where an association between two variables in a population emerges, disappears or reverses when the population is divided into subpopulations such as <span style = \"color:#FF8C00\">Adelie<\/span>, <span style =\"color:#159090\">Gentoo<\/span>, and <span style = \"color:#A034F0\">Chinstrap<\/span> penguin species'\n)\n\n\n\npt <- ggplot(text, aes(x = x, y = y)) +\n  ggtext::geom_textbox(\n    aes(label = label),    # Map the 'label' column from the 'text' data to the text labels\n    box.color = NA,         # Make the text box border color transparent\n    width = unit(10, \"lines\"),  # Set the width of the text boxes to 15 lines\n    color = \"grey40\",       # Set the text color to a light gray\n    size = 3,             # Set the text size to 4 (adjust as needed)\n    lineheight = 1.4        # Set the line height for text within the boxes\n  ) +\n  # Customize the plot coordinate system\n  coord_cartesian(expand = FALSE, clip = \"off\") +\n\n  # Apply a theme with a blank (void) background\n  theme_void()\n\npt\nlayout <- \"\nAACCC\nAACCC\nBBDDD\nBBDDD\n\"\n\np1 <- ggplot(penguins, aes(x= culmen_length_mm, \n                     y= culmen_depth_mm)) +\n    geom_point()+\n  geom_smooth(method=\"lm\",\n              se=FALSE)+\n  theme(legend.position=\"none\")+\n    labs(x=\"Bill length (mm)\",\n         y=\"Bill depth (mm)\")\n\np2 <- ggplot(penguins, aes(x= culmen_length_mm, \n                     y= culmen_depth_mm,\n                     colour=species)) +\n    geom_point()+\n  geom_smooth(method=\"lm\",\n              se=FALSE)+\n  scale_colour_manual(values=pal)+\n  theme(legend.position=\"none\")+\n    labs(x=\"Bill length (mm)\",\n         y=\"Bill depth (mm)\")\n\np1 + p2 + \n  pt +  penguin_fig + \n  plot_layout(design = layout)"},{"path":"extensions-for-ggplot2.html","id":"scales","chapter":"24 Extensions for ggplot2","heading":"24.10 Scales","text":"","code":""},{"path":"extensions-for-ggplot2.html","id":"activity-create-a-publication-style-multi-panel-figure","chapter":"24 Extensions for ggplot2","heading":"24.11 Activity: Create a Publication-Style Multi-Panel Figure","text":"Objective: Design create multi-panel data visualization figure style research publication. exercise challenge skills data visualization, data manipulation, creating complex figures.Steps:Choose Dataset: Select dataset suitable creating multi-panel figure. related scientific research topic, public data (e.g., government sources data repositories), dataset interests .Choose Dataset: Select dataset suitable creating multi-panel figure. related scientific research topic, public data (e.g., government sources data repositories), dataset interests .Data Preprocessing: Use dplyr tidyr preprocess data. may need aggregate, filter, reshape data fit structure want figure.Data Preprocessing: Use dplyr tidyr preprocess data. may need aggregate, filter, reshape data fit structure want figure.Design Figure: Decide structure multi-panel figure. create subplots facets represent different aspects data. example, might multiple box plots, scatter plots, visualizations arranged grid.Design Figure: Decide structure multi-panel figure. create subplots facets represent different aspects data. example, might multiple box plots, scatter plots, visualizations arranged grid.Create Plot: Use ggplot2 create individual panels subplots. Customize appearance panel, including labels, colors, titles.Create Plot: Use ggplot2 create individual panels subplots. Customize appearance panel, including labels, colors, titles.Combine Panels: Use patchwork package another method arrange individual panels single figure. may involve adjusting layout, labeling, legends make figure coherent.Combine Panels: Use patchwork package another method arrange individual panels single figure. may involve adjusting layout, labeling, legends make figure coherent.Add Annotations: Add relevant annotations figure, titles, subtitles, captions, necessary notes explain data results.Add Annotations: Add relevant annotations figure, titles, subtitles, captions, necessary notes explain data results.Customize Theme: Apply custom theme entire figure. can modify fonts, colors, grid lines, elements match style publication.Customize Theme: Apply custom theme entire figure. can modify fonts, colors, grid lines, elements match style publication.Tips:Plan figure carefully, considering story message want convey.\nExperiment different geoms, scales, themes achieve desired visual effect.\nUse effective data visualization principles, avoiding misleading scales, providing clear labels legends, ensuring figure accessible wide audience.","code":""},{"path":"custom-ggplot-themes.html","id":"custom-ggplot-themes","chapter":"25 Custom ggplot themes","heading":"25 Custom ggplot themes","text":"Custom ggplot themesIt often case start default particular 'style' figures, may making several similar figures within research paper. Creating custom functions can extend making custom ggplot themes. probably already used theme variants theme_bw(), theme_void(), theme_minimal() - incredibly useful, might find still wish make consistent changes.plot can make dros_weight tibble:addition title theme_classic() can improve style quicklyBut still want make changes, rather work one figure, potentially repeat several times subsequent figures, can decide make new function instead. See full breakdown arguments theme() function.\nNote using pre-set theme, modifying , \nimportant get order syntax correct e.g\n\ntheme_classic + theme() # correct\n\ntheme() + theme_classic() # work intended\nfunction set, can now use many figures wish. use future probably save unique script, clear title comments future use.easily use source(\"custom_theme_function.R\") make available scripts using.","code":"\nplot <- dros_weight %>% \n  ggplot(aes(x=sex,\n         y=weight_mg))+\n  geom_jitter(width = 0.1)\n\nplot\nplot+\n  ggtitle(\"Comparison of weights (mg) between \\nmale and female Drosophila\")+\n  theme_classic()\n# custom theme sets defaults for font and size, but these can be changed without changing the function\ntheme_custom <- function(base_size=12, base_family=\"serif\"){\n  theme_classic(base_size = base_size, \n                base_family = base_family,\n                )  %+replace%\n# update theme minimal \ntheme(\n  # specify default settings for plot titles - use rel to set titles relative to base size\n  plot.title=element_text(size=rel(1.5),\n      face=\"bold\",\n      family=base_family),\n  #specify defaults for axis titles\n  axis.title=element_text(\n    size=rel(1),\n    family=base_family),\n  # specify position for y axis title\n  axis.title.y=element_text(margin = margin(r = 10, l= 10)),\n  # specify position for x axis title\n  axis.title.x = element_text(margin = margin( t = 10, b = 10)),\n  # set major y grid lines\n  panel.grid.major.y = element_line(colour=\"gray\", size=0.5),\n  # add axis lines\n  axis.line=element_line(),\n   # Adding a 0.5cm margin around the plot\n  plot.margin = unit(c(0.2, 0.5, 0.5, 0.5), units = , \"cm\"),    \n   # Setting the font for the legend text\n  legend.text = element_text(face = \"italic\"),   \n    # Removing the legend title\n          legend.title = element_blank(),    \n   # Setting the position for the legend - 0 is left/bottom, 1 is top/right\n          legend.position = c(0.9, 0.8)             \n)\n  \n}\nplot+\ntheme_custom()"},{"path":"making-tables-with-gt.html","id":"making-tables-with-gt","chapter":"26 Making tables with gt","heading":"26 Making tables with gt","text":"","code":"\nlibrary(gt)\nlibrary(gtExtras)\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] gtExtras_0.5.0       gt_0.10.0            ggbeeswarm_0.7.2    \n##  [4] gghighlight_0.4.0    ggh4x_0.2.6          ggpubr_0.6.0        \n##  [7] png_0.1-8            ggdensity_1.0.0      ggdist_3.3.0        \n## [10] ggbump_0.1.0         ggtext_0.1.2         ggalt_0.4.0         \n## [13] ggridges_0.5.4       geomtextpath_0.1.1   colorBlindness_0.1.9\n## [16] patchwork_1.1.2      janitor_2.2.0        knitr_1.43          \n## [19] webexercises_1.1.0   glossary_1.0.0       lubridate_1.9.2     \n## [22] forcats_1.0.0        stringr_1.5.0        dplyr_1.1.2         \n## [25] purrr_1.0.1          readr_2.1.4          tidyr_1.3.0         \n## [28] tibble_3.2.1         ggplot2_3.4.2        tidyverse_2.0.0     \n## \n## loaded via a namespace (and not attached):\n##  [1] tidyselect_1.2.0     vipor_0.4.5          farver_2.1.1        \n##  [4] fastmap_1.1.1        ash_1.0-15           digest_0.6.33       \n##  [7] timechange_0.2.0     lifecycle_1.0.3      magrittr_2.0.3      \n## [10] compiler_4.3.1       rlang_1.1.1          sass_0.4.6          \n## [13] tools_4.3.1          utf8_1.2.3           yaml_2.3.7          \n## [16] ggsignif_0.6.4       xml2_1.3.5           RColorBrewer_1.1-3  \n## [19] abind_1.4-5          KernSmooth_2.23-21   withr_2.5.0         \n## [22] grid_4.3.1           proj4_1.0-13         fansi_1.0.4         \n## [25] colorspace_2.1-0     paletteer_1.5.0      extrafontdb_1.0     \n## [28] scales_1.2.1         MASS_7.3-60          cli_3.6.1           \n## [31] rmarkdown_2.23       generics_0.1.3       rstudioapi_0.15.0   \n## [34] tzdb_0.4.0           cachem_1.0.8         maps_3.4.1          \n## [37] vctrs_0.6.3          carData_3.0-5        jsonlite_1.8.7      \n## [40] car_3.1-2            bookdown_0.34        gridGraphics_0.5-1  \n## [43] hms_1.1.3            rstatix_0.7.2        beeswarm_0.4.0      \n## [46] systemfonts_1.0.4    fontawesome_0.5.1    jquerylib_0.1.4     \n## [49] glue_1.6.2           rematch2_2.1.2       cowplot_1.1.1       \n## [52] distributional_0.3.2 stringi_1.7.12       gtable_0.3.3        \n## [55] downlit_0.4.3        extrafont_0.19       munsell_0.5.0       \n## [58] pillar_1.9.0         htmltools_0.5.5      R6_2.5.1            \n## [61] textshaping_0.3.6    evaluate_0.21        backports_1.4.1     \n## [64] gridtext_0.1.5       memoise_2.0.1        broom_1.0.5         \n## [67] snakecase_0.11.0     bslib_0.5.0          Rcpp_1.0.11         \n## [70] Rttf2pt1_1.3.12      xfun_0.39            fs_1.6.2            \n## [73] pkgconfig_2.0.3"},{"path":"getting-to-work-with-shiny.html","id":"getting-to-work-with-shiny","chapter":"27 Getting to work with Shiny","heading":"27 Getting to work with Shiny","text":"https://ourcodingclub.github.io/tutorials/shiny/https://psyteachr.github.io/shiny-tutorials/https://debruine.github.io/shinyintro/first-app.htmlAdd change layouts: https://shiny.posit.co/r/articles/build/layout-guide/https://albert-rapp.de/posts/15_use_js_with_shiny/15_use_js_with_shiny.htmlhttps://albert-rapp.de/posts/06_shiny_app_learnings/06_shiny_app_learningsShinyjs: https://deanattali.com/shinyjs/exampleShiny modules -\nhttps://rviews.rstudio.com/2021/10/20/-beginner-s-guide--shiny-modules/core, Shiny essentially R package, similar dplyr ggplot2. However, Shiny unique allows build web applications using R language, instead relying traditional web development technologies like JavaScript HTML5. R-based approach makes Shiny efficient choice creating web applications tailored data presentation analysis.illustrate, take look example basic Shiny app recreate today's tutorial","code":""},{"path":"getting-to-work-with-shiny.html","id":"image","chapter":"27 Getting to work with Shiny","heading":"27.1 IMAGE","text":"Shiny apps useful several purposes:Interactive Data Visualization Presentations Websites: Shiny apps allow create interactive data visualizations, can enhance presentations, reports, websites. Users can explore data, change parameters, see real-time updates, making information engaging informative.Sharing Results Collaborators: Shiny apps valuable sharing data analysis results collaborators, team members, clients. creating interactive dashboards tools, can make easier others interact understand data, even expertise R data analysis.Communicating Science Accessible Way: Shiny apps can powerful tool scientists, researchers, educators communicate complex scientific concepts research findings broader audience. provide accessible user-friendly interface explore understand data-driven insights.Bridging Gap R Users Non-R Users: Shiny acts bridge R users individuals may familiar R programming. Shiny, can create applications allow non-R users interact benefit R's data analysis capabilities without needing write R code .","code":""},{"path":"getting-to-work-with-shiny.html","id":"using-the-demo-app","chapter":"27 Getting to work with Shiny","heading":"27.2 Using the Demo App","text":"New project…\nFile menu, choose New Project.... see popup window like one . Choose New Directory.","code":""},{"path":"getting-to-work-with-shiny.html","id":"run-the-app","chapter":"27 Getting to work with Shiny","heading":"27.2.1 Run the app","text":"Click Run App top right corner source pane. app open new window. Play slider watch histogram change.","code":""},{"path":"getting-to-work-with-shiny.html","id":"modify-the-demo-app","chapter":"27 Getting to work with Shiny","heading":"27.2.2 Modify the Demo App","text":"Now ’re going make series changes demo app ’s .can close app closing window browser tab ’s running , leave running edit code. multiple screens, ’s useful app open one screen code another.","code":""},{"path":"layout.html","id":"layout","chapter":"28 Layout","heading":"28 Layout","text":"","code":""},{"path":"make-our-own-app.html","id":"make-our-own-app","chapter":"29 Make our own App","heading":"29 Make our own App","text":"Now seen basic Shiny app actin, return beginning create app.R file. basic app.R consists five key parts:Package Loading: top script, load necessary R packages app function. shiny requirement, can add others like dplyr ggplot2 needed. packages missing, encounter error, ensure installed.Data Loading: Next, load data necessary app. typically involves reading datasets R objects. Ensure data file source available specified format.UI Object: Create object called ui defines app's user interface. specifies app appear web browser. fluidPage() function creates responsive layout adjusts browser window's size. UI code go inside curly braces.Server Object: Create another object called server, contains app's logic. , specify app computes creates plots, tables, maps, content based user's input. app's logic code placed inside server function.App Execution: Finally, include command end app.R run app. informs Shiny user interface defined ui object, server logic (data, plots, tables, etc.) defined server object.create Shiny app, remove example code generated automatically created app.R replace structure provided . Check final app.R script resembles following:following steps, basic structure Shiny app place, ready add UI elements server logic create interactive web application.","code":"\n# Load the required packages\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)  # Contains readr, dplyr and ggplot2\nlibrary(palmerpenguins)    # The source of your data\n# Load the data\npenguins <- as_tibble(penguins)\n# Define the UI\nui <- fluidPage(\n  # Your UI components will be defined here\n)\n# Define the server logic\nserver <- function(input, output) {\n  # Your server logic will be defined here\n}\n# Run the app\nshinyApp(ui = ui, server = server)\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# ui.R ----\nui <- fluidPage(\n  # Your UI components will be defined here\n)\n\n# server.R ----\nserver <- function(input, output) {\n  # Your server logic will be defined here\n}\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"inputs.html","id":"inputs","chapter":"30 Inputs","heading":"30 Inputs","text":"Now basic structure Shiny app, can start adding input output elements make interactive. example app includes four input widgets: selectInput genotype, another selectInput histogram color, sliderInput number bins, textInput arbitrary text. widgets provide information display histogram accompanying table. example app, widgets placed sidebarPanel. can incorporate widgets app:code , added input widgets sidebarPanel section ui object. widgets allow users select genotype, choose histogram color, set number bins histogram, add arbitrary text.take moment understand selectInput() function configured:inputId = \"species\": unique identifier input element. crucial later referencing input within app script.label = \"1. Select species\": label want display input app. provides clarity users describing purpose input.choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", ...): , define list choices presented dropdown menu. choice two parts: display label (left) corresponding value app collect use output (right).selected = \"grey\": specifies default value selected dropdown menu app first loaded. example, 'grey' preselected.Now grasped selectInput() works, use customize Shiny app .\"explanation clarifies purpose settings selectInput() function, can use understanding configure input elements Shiny app. summary different Input functions available Shiny","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\")\n    ),\n    mainPanel(\n      # Output elements go here\n    )\n  )\n)\n# server.R ----\nserver <- function(input, output) {\n  # Your server logic will be defined here\n\n}\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"inputs.html","id":"textinput","chapter":"30 Inputs","heading":"30.1 textInput","text":"","code":""},{"path":"inputs.html","id":"textareainput","chapter":"30 Inputs","heading":"30.2 textAreaInput","text":"##selectInput##checkboxGroupInput##checkboxInput##radioButtons##dateInput##dateRangeInput##fileInputNext, need implement server logic output elements server.R section. server logic define inputs affect display histogram table, require additional code specific application's requirements.Remember Shiny allows create reactive expressions functions respond changes input values. can use reactive expressions generate histogram associated table based user input.proceed, can add details server.R handle inputs create corresponding outputs.","code":""},{"path":"inputs.html","id":"exercise-2","chapter":"30 Inputs","heading":"30.3 Exercise","text":"Create interface gets people enter name, date birth select type cake want selection -ChocolateChocolateSpongeSpongeRed VelvetRed VelvetCheesecakeCheesecake","code":""},{"path":"outputs.html","id":"outputs","chapter":"31 Outputs","heading":"31 Outputs","text":"","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\")\n    ),\n    mainPanel(\n      # Output elements go here\n        textOutput(\"demo_text\"),\n        \n        plotOutput(\"demo_plot\", width = \"500px\", height=\"300px\"),\n        \n        DT::dataTableOutput(\"demo_table\",\n                    width = \"50%\",\n                    height = \"auto\")\n    )\n  )\n)\n# server.R ----\n\n \nserver <- function(input, output) {\n   # Your server logic will be defined here\n  output$demo_text <- renderText({\n    paste(\"Figure 1.\", input$species, input$text)\n  })\n  \n  output$demo_plot <- renderPlot({\n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n    ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n      geom_histogram(fill = input$colour, show.legend = FALSE, bins = input$bin) +\n      labs(fill = \"Color\") +\n      theme_minimal()\n  })\n  \n  output$demo_table <- DT::renderDataTable({\n   penguins  |> \n      filter(species == input$species) |> \n    summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n})\n  \n}\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"outputs.html","id":"text-1","chapter":"31 Outputs","heading":"31.1 Text","text":"","code":""},{"path":"outputs.html","id":"plots","chapter":"31 Outputs","heading":"31.2 Plots","text":"","code":""},{"path":"outputs.html","id":"images","chapter":"31 Outputs","heading":"31.3 Images","text":"","code":""},{"path":"outputs.html","id":"tables","chapter":"31 Outputs","heading":"31.4 Tables","text":"","code":""},{"path":"outputs.html","id":"layouts-themes-html","chapter":"31 Outputs","heading":"31.5 Layouts, themes, HTML","text":"Exercise: Customize app's appearance adding custom color scheme, title different font, adjusting size plot.","code":"  \np(\"p creates a paragraph of text.\"),\n\n      \n      p(\"A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.\", style = \"font-family: 'times'; font-si16pt\"),\n      \n      strong(\"strong() makes bold text.\"),\n      \n      em(\"em() creates italicized (i.e, emphasized) text.\"),\n      \n      br(),\n      \n      code(\"code displays your text similar to computer code\"),\n      \n      div(\"div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div\", style = \"color:blue\"),\n      \n      br(),\n      \n      p(\"span does the same thing as div, but it works with\",\n        span(\"groups of words\", style = \"color:blue\"),\n        \"that appear inside a paragraph.\"),\n\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\")\n    ),\n    mainPanel(\n      # Output elements go here\n        \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n  \n        plotOutput(\"demo_plot\", width = \"500px\", height=\"300px\"),\n        \n        DT::dataTableOutput(\"demo_table\",\n                    width = \"50%\",\n                    height = \"auto\")\n    )\n  )\n)\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \n\n  output$demo_sp <- renderText({\n    paste(\"Figure 1.\", input$species)\n  })\n  \noutput$demo_text <- renderText({\n  (input$text)\n})\n   \n    \n  output$demo_plot <- renderPlot({\n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n    ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n      geom_histogram(fill = input$colour, show.legend = FALSE, bins = input$bin) +\n      labs(fill = \"Color\") +\n      theme_minimal()\n  })\n  \n  output$demo_table <- DT::renderDataTable({\n   penguins |>\n      filter(species == input$species) |> \n    summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n})\n  \n}\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"reactive.html","id":"reactive","chapter":"32 Reactive","heading":"32 Reactive","text":"common error trying use data title object instead function. Notice first argument ggplot longer data, data() set value data data(newdata), data <- newdata. now, just remember quirk shiny.","code":"Error in filter(., species == input$species) : \n  ℹ In argument: `species == input$species`.\nCaused by error in `input$species`:\n! Can't access reactive value 'species' outside of reactive consumer.\nℹ Do you need to wrap inside reactive() or observe()?\n\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\")\n    ),\n    mainPanel(\n      # Output elements go here\n        \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n  \n        plotOutput(\"demo_plot\", width = \"500px\", height=\"300px\"),\n        \n        DT::dataTableOutput(\"demo_table\",\n                    width = \"50%\",\n                    height = \"auto\")\n    )\n  )\n)\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \npenguins_filtered <- penguins |>\n      filter(species == input$species) \n  \n  output$demo_sp <- renderText({\n    paste(\"Figure 1.\", input$species)\n  })\n  \noutput$demo_text <- renderText({\n  (input$text)\n})\n   \n\n    \n  output$demo_plot <- renderPlot({\n    \n    ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n      geom_histogram(fill = input$colour, show.legend = FALSE, bins = input$bin) +\n      labs(fill = \"Color\") +\n      theme_minimal()\n  })\n  \n  output$demo_table <- DT::renderDataTable({\n   penguins_filtered |> \n    summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n})\n  \n}\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n \n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\")\n    ),\n    mainPanel(\n      # Output elements go here\n        \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n  \n        plotOutput(\"demo_plot\", width = \"500px\", height=\"300px\"),\n        \n        DT::dataTableOutput(\"demo_table\",\n                    width = \"50%\",\n                    height = \"auto\")\n    )\n  )\n)\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \npenguins_filtered <- reactive({\n  penguins |>\n      filter(species == input$species)\n})\n\n  output$demo_sp <- renderText({\n    paste(\"Figure 1.\", input$species)\n  })\n  \noutput$demo_text <- renderText({\n  (input$text)\n})\n   \n\n    \n  output$demo_plot <- renderPlot({\n    \n    ggplot(penguins_filtered(), aes(x = flipper_length_mm)) +\n      geom_histogram(fill = input$colour, show.legend = FALSE, bins = input$bin) +\n      labs(fill = \"Color\") +\n      theme_minimal()\n  })\n  \n  output$demo_table <- DT::renderDataTable({\n   \n    penguins_filtered() |> \n    summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n})\n  \n}\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"reactive.html","id":"observable","chapter":"32 Reactive","heading":"32.1 Observable","text":"want update things update button clicked, whenever user changes option?observeEvent(). function runs code whenever value first argument changes. reactive values inside function, trigger code run change.things now updated plot button?","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n \n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\"),\n      demo_button <- actionButton(\"update\", \"Plot\")\n    ),\n    mainPanel(\n      # Output elements go here\n        \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n  \n        plotOutput(\"demo_plot\", width = \"500px\", height=\"300px\"),\n        \n        DT::dataTableOutput(\"demo_table\",\n                    width = \"50%\",\n                    height = \"auto\")\n    )\n  )\n)\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \n \n\n  observeEvent(input$update, {\n    \n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n     bins <- input$bin\n     \n     colour <- input$colour\n \n\n    output$demo_sp <- renderText({\n      paste(\"Figure 1.\", input$species)\n    })\n\n    output$demo_text <- renderText({\n      (input$text)\n    })\n\n    output$demo_plot <- renderPlot({\n        ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n        geom_histogram(fill = colour, show.legend = FALSE, bins = bins) +\n        labs(fill = \"Color\") +\n        theme_minimal()\n    })\n\n    output$demo_table <- DT::renderDataTable({\n      penguins_filtered |> \n        summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n    })\n  })\n  \n}\n\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"customising.html","id":"customising","chapter":"33 Customising","heading":"33 Customising","text":"","code":""},{"path":"customising.html","id":"shiny-dashboard","chapter":"33 Customising","heading":"33.1 Shiny Dashboard","text":"","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\nlibrary(bslib)\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# Calculate column means for the value boxes\nmeans <- penguins |> \n  group_by(species) |> \n  summarise(mean = round(mean(flipper_length_mm, na.rm = T), 2))\n\n# Turn on thematic for theme-matched plots\nthematic::thematic_shiny(font = \"auto\")\ntheme_set(theme_bw(base_size = 16))\n\n# ui.R ----\nui <- page_sidebar(\n  title = \"Penguins flipper dashboard\",\n  sidebar = sidebar(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\"),\n      demo_button <- actionButton(\"update\", \"Plot\")\n    )\n  ,\n   layout_columns(\n    fill = FALSE,\n    value_box(\n      title = \"Adelie Flipper Length\",\n      value = scales::unit_format(unit = \"mm\")(means[[1,2]]),\n      showcase = bsicons::bs_icon(\"align-bottom\"),\n      theme_color = \"grey\"\n    ),\n    value_box(\n      title = \"Chinstrap Flipper\",\n      value = scales::unit_format(unit = \"mm\")(means[[2,2]]),\n      showcase = bsicons::bs_icon(\"align-center\"),\n      theme_color = \"grey\"\n    ),\n value_box(\n      title = \"Gentoo Flipper Length\",\n      value = scales::unit_format(unit = \"mm\")(means[[3,2]]),\n      showcase = bsicons::bs_icon(\"align-top\"),\n      theme_color = \"grey\"\n    )\n  ),\n    \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n \n      # Output elements go here\n      layout_columns(\n    card(\n      full_screen = TRUE,\n      card_header(\"Plot\"),\n      plotOutput(\"demo_plot\")\n    ),\n    card(\n      full_screen = TRUE,\n      card_header(\"Table\"),\n      DT::dataTableOutput(\"demo_table\",\n                    width = \"100%\",\n                    height = \"auto\")\n    )  \n)\n)\n  \n\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \n\n\n  observeEvent(input$update, {\n    \n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n     bins <- input$bin\n     \n     colour <- input$colour\n \n\n    output$demo_sp <- renderText({\n      paste(\"Figure 1.\", input$species)\n    })\n\n    output$demo_text <- renderText({\n      (input$text)\n    })\n\n    output$demo_plot <- renderPlot({\n        ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n        geom_histogram(fill = colour, show.legend = FALSE, bins = bins) +\n        labs(fill = \"Color\") +\n        theme_minimal(base_size = 16)\n    })\n\n    output$demo_table <- DT::renderDataTable({\n      penguins_filtered |> \n        summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n    })\n  })\n  \n}\n\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"customising.html","id":"width","chapter":"33 Customising","heading":"33.1.1 Width","text":"Try changing width see changeshttps://shiny.posit.co/blog/posts/bslib-dashboards/#layout-toolinghttps://mastering-shiny.org/action-dynamic.htmlhttps://www.jumpingrivers.com/blog/r-shiny-customising-shinydashboard/#:~:text=%20main%20way%20of%20including,css%20by%20convention.","code":"\n bs_themer()\n# add to server function"},{"path":"download.html","id":"download","chapter":"34 Download?","heading":"34 Download?","text":"","code":""},{"path":"sharing.html","id":"sharing","chapter":"35 Sharing","heading":"35 Sharing","text":"","code":"\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] bslib_0.5.0          palmerpenguins_0.1.1 shiny_1.7.4.1       \n##  [4] knitr_1.43           webexercises_1.1.0   glossary_1.0.0      \n##  [7] lubridate_1.9.2      forcats_1.0.0        stringr_1.5.0       \n## [10] dplyr_1.1.2          purrr_1.0.1          readr_2.1.4         \n## [13] tidyr_1.3.0          tibble_3.2.1         ggplot2_3.4.2       \n## [16] tidyverse_2.0.0     \n## \n## loaded via a namespace (and not attached):\n##  [1] sass_0.4.6        utf8_1.2.3        generics_0.1.3    xml2_1.3.5       \n##  [5] stringi_1.7.12    hms_1.1.3         digest_0.6.33     magrittr_2.0.3   \n##  [9] evaluate_0.21     grid_4.3.1        timechange_0.2.0  bookdown_0.34    \n## [13] fastmap_1.1.1     jsonlite_1.8.7    promises_1.2.0.1  fansi_1.0.4      \n## [17] scales_1.2.1      jquerylib_0.1.4   cli_3.6.1         rlang_1.1.1      \n## [21] ellipsis_0.3.2    munsell_0.5.0     withr_2.5.0       cachem_1.0.8     \n## [25] yaml_2.3.7        tools_4.3.1       tzdb_0.4.0        memoise_2.0.1    \n## [29] colorspace_2.1-0  httpuv_1.6.11     mime_0.12         vctrs_0.6.3      \n## [33] R6_2.5.1          lifecycle_1.0.3   fs_1.6.2          pkgconfig_2.0.3  \n## [37] later_1.3.1       pillar_1.9.0      gtable_0.3.3      Rcpp_1.0.11      \n## [41] glue_1.6.2        xfun_0.39         tidyselect_1.2.0  rstudioapi_0.15.0\n## [45] xtable_1.8-4      htmltools_0.5.5   rmarkdown_2.23    compiler_4.3.1   \n## [49] downlit_0.4.3"},{"path":"rmarkdown.html","id":"rmarkdown","chapter":"36 RMarkdown","heading":"36 RMarkdown","text":"R Markdown widely-used tool creating automated, reproducible, share-worthy outputs, reports. can generate static interactive outputs, Word, pdf, html, Powerpoint slides, many formats.R Markdown script combines R code text script actually becomes output document. can create entire formatted document, including narrative text (can dynamic change based data), tables, figures, bullets/numbers, bibliographies, etc.Documents produced Rmarkdown, allow analyses included easily - make link raw data, analysis & published report completely reproducible.Rmarkdown can make reproducible html, word, pdf, powerpoints websites dashboards3","code":""},{"path":"rmarkdown.html","id":"how-it-works","chapter":"36 RMarkdown","heading":"36.1 How it works","text":"create R Markdown document RStudio, go File > New File > R Markdown. Choose title, author, date, well default output format (HTML, PDF, Word). values can changed later. Click OK, RStudio create R Markdown document placeholder content.Delete content replace . example, let’s create report penguins using data palmerpenguins package. ’ve separated data year, ’ll use just 2007 data. Add following content add R Markdown document:document contains several sections, discuss . First, though, let’s skip finish line ’s called knitting document. Knit button top RStudio converts R Markdown document whatever format selected.make Rmd publish - hit knit button top docWe’ve set output format HTML (see output_format: html). features immediately visible R Markdown appear rendered document, including histogram. R Markdown document doesn’t directly include plot. Rather, includes code needed produce plot knitted.may seem convoluted constantly knit R Markdown documents Word, workflow allows us update reports point new code data. ability known reproducibility, central value R Markdown.","code":"---\ntitle: \"Penguins Report\"\nauthor: \"Phil\"\ndate: \"2024-01-12\"\noutput: word_document\n---\n  \n``{r setup, include = FALSE}\nknitr::opts_chunk$set(include = TRUE, \n                      echo = FALSE,\n                      message = FALSE,\n                      warning = FALSE)\n``\n\n``{r}\nlibrary(tidyverse)\n``\n\n``{r}\npenguins_raw <- read_csv(\"https://raw.githubusercontent.com/UEABIO/data-sci-v1/main/book/files/penguins_raw.csv\")\n``\n\n# Introduction\n\nWe are writing a report about the **Palmer Penguins**. These penguins are *really* amazing. There are three species:\n\n- Adelie\n- Gentoo\n- Chinstrap\n\n## Bill Length\n\nWe can make a histogram to see the distribution of bill lengths.\n\n``{r}\npenguins_raw |> \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n``\n\n``{r}\naverage_bill_length <- penguins_raw |> \n  summarize(avg_bill_length = mean(bill_length_mm,\n                                   na.rm = TRUE)) |> \n  pull(avg_bill_length)\n``\n\nThe chart shows the distribution of bill lengths. The average bill length is `r average_bill_length` millimeters."},{"path":"rmarkdown.html","id":"background-to-rmarkdown","chapter":"36 RMarkdown","heading":"36.2 Background to Rmarkdown","text":"Markdown “language” allows write document using plain text, can converted html formats. specific R. Files written Markdown ‘.md’ extension.Markdown “language” allows write document using plain text, can converted html formats. specific R. Files written Markdown ‘.md’ extension.R Markdown: variation markdown specific R - allows write document using markdown produce text embed R code display outputs. R Markdown files ‘.Rmd’ extension.R Markdown: variation markdown specific R - allows write document using markdown produce text embed R code display outputs. R Markdown files ‘.Rmd’ extension.rmarkdown - package: used R render .Rmd file desired output. ’s focus converting markdown (text) syntax, also need…rmarkdown - package: used R render .Rmd file desired output. ’s focus converting markdown (text) syntax, also need…knitr: R package Xie (2023) read code chunks, execute , ‘knit’ back document. tables graphs included alongside text.knitr: R package Xie (2023) read code chunks, execute , ‘knit’ back document. tables graphs included alongside text.Pandoc: Finally, pandoc actually convert output word/pdf/powerpoint etc. software separate R installed automatically RStudio.Pandoc: Finally, pandoc actually convert output word/pdf/powerpoint etc. software separate R installed automatically RStudio.process happens background (need know steps!) involves feeding .Rmd file knitr, executes R code chunks creates new .md (Markdown) file includes R code rendered output..md file processed pandoc create finished product: Microsoft Word document, HTML file, Powerpoint document, pdf, etc.","code":""},{"path":"rmarkdown.html","id":"rmarkdown-parts","chapter":"36 RMarkdown","heading":"36.3 Rmarkdown parts","text":"can see, three basic components Rmd file:YAMLYAMLMarkdown textMarkdown textR code chunks.R code chunks.","code":""},{"path":"rmarkdown.html","id":"yaml-metadata","chapter":"36 RMarkdown","heading":"36.3.1 YAML Metadata","text":"YAML section beginning R Markdown document. name YAML comes recursive acronym YAML ain’t markup language, whose meaning isn’t important purposes. Three dashes indicate beginning end, text inside contains metadata R Markdown document. YAML:can see, provides title, author, date, output format. elements YAML given key: value syntax, key label piece metadata (example, title) followed value quotes.example , clicked default output html file, can see YAML says output: html_document. However can also change say powerpoint_presentation word_document even pdf_document.\nCan edit YAML Rmarkdown file markdown folder \nname author, today’s date title file \ncalled “Penguins Palmer Archipelago, Antarctica”.\n","code":"\n---\ntitle: \"Penguins Report\"\nauthor: \"Philip Leftwich\"\ndate: \"2024-01-12\"\noutput: html_document\n---"},{"path":"rmarkdown.html","id":"code-chunks","chapter":"36 RMarkdown","heading":"36.3.2 Code chunks","text":"R Markdown documents different structure R script files might familiar (.R extension). R script files treat content code unless comment line putting pound sign (#) front . following code, first line comment second line code.R Markdown, situation reversed. Everything YAML treated text unless specify otherwise creating known code chunks. chunk opened line starts three back-ticks, curly brackets contain parameters chunk { }. chunk ends three back-ticks.R Markdown treats anything code chunk R code knit. example, code chunk produce histogram final Word document.\nnotes contents curly brackets { }:\n\nstart ‘r’ indicate language name within \nchunk R. possible include programming\nlanguage chunks SQL,\nPython Bash.\n\nr can optionally write chunk “name” – \nnecessary can help organise work. Note name\nchunks, ALWAYS use unique names else R \ncomplain try render.\n\nlanguage name optional chunk name put comma, \ncan include options , written tag=value, \n:\n\n\neval = FALSE run R code\n\n\neval = FALSE run R code\n\n\necho = FALSE print chunk’s R source code output\ndocument\n\n\necho = FALSE print chunk’s R source code output\ndocument\n\n\nwarning = FALSE print warnings produced R\ncode\n\n\nwarning = FALSE print warnings produced R\ncode\n\n\nmessage = FALSE print messages produced R\ncode\n\n\nmessage = FALSE print messages produced R\ncode\n\n\ninclude = either TRUE/FALSE whether include chunk outputs\n(e.g. plots) document\n\n\ninclude = either TRUE/FALSE whether include chunk outputs\n(e.g. plots) document\n\n\n.width = .height = - size ouput e.g. .width =\n“75%”\n\n\n.width = .height = - size ouput e.g. .width =\n“75%”\n\n\nfig.align = “center” adjust figure aligned across \npage\n\n\nfig.align = “center” adjust figure aligned across \npage\n\n\nfig.show=‘hold’ chunk prints multiple figures \nwant printed next (pair .width = c(“33%”,\n“67%”).\n\n\nfig.show=‘hold’ chunk prints multiple figures \nwant printed next (pair .width = c(“33%”,\n“67%”).\nspecial code chunk top R Markdown document, known setup code chunk, gives instructions happen knitting document.cases ’re using R Markdown generate report non-R user, likely want hide code, messages, warnings show output (include visualizations generate). , create setup code chunk looks like :include = FALSE option first line applies setup code chunk . tells R Markdown include output setup code chunk knitting. options within knitr::opts_chunk$set() apply future code chunks. However, can also override global code chunk options individual chunks. wanted document show plot code used make , set echo = TRUE code chunk :","code":"\n```{r}\n# Import our data\ndata <- read_csv(\"data.csv\")\n```\n```{r}\nlibrary(tidyverse)\n```\n```{r}\n\npenguins_raw |>  \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n```{r}\nknitr::opts_chunk$set(include = TRUE, \n                      echo = FALSE,\n                      message = FALSE,\n                      warning = FALSE)\n```\n```{r}\npenguins %>% \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```"},{"path":"rmarkdown.html","id":"text-2","chapter":"36 RMarkdown","heading":"36.3.3 Text","text":"narrative document, including titles headings. written “markdown” language, used across many different software.core ways write text. See extensive documentation available R Markdown “cheatsheets” RStudio website4.","code":""},{"path":"rmarkdown.html","id":"new-lines","chapter":"36 RMarkdown","heading":"36.3.3.1 New lines","text":"Uniquely R Markdown, initiate new line, enter *two spaces** end previous line Enter/Return.","code":""},{"path":"rmarkdown.html","id":"text-emphasis","chapter":"36 RMarkdown","heading":"36.3.3.2 Text emphasis","text":"Surround normal text characters change appears output.Underscores (_text_) single asterisk (*text*) italiciseDouble asterisks (**text**) bold textBack-ticks (` text `) display text codeThe actual appearance font can set using specific templates (specified YAML metadata).","code":""},{"path":"rmarkdown.html","id":"titles-and-headings","chapter":"36 RMarkdown","heading":"36.3.3.3 Titles and headings","text":"hash symbol text portion R Markdown script creates heading. different chunk R code script, hash symbol mechanism comment/annotate/de-activate, normal R script.Different heading levels established different numbers hash symbols start new line. One hash symbol title primary heading. Two hash symbols second-level heading. Third- fourth-level headings can made successively hash symbols.","code":"\n# First-level heading / Title\n\n## Second level heading  \n\n### Third-level heading\n"},{"path":"rmarkdown.html","id":"bullets-and-numbering","chapter":"36 RMarkdown","heading":"36.3.3.4 Bullets and numbering","text":"Use asterisks (*) created bullets list. Finish previous sentence, enter two spaces, Enter/Return twice, start bullets. Include space asterisk bullet text. bullet enter two spaces Enter/Return. Sub-bullets work way indented. Numbers work way instead asterisk, write 1), 2), etc. R Markdown script text might look.bullets (two spaces colon):","code":"* Bullet 1 (followed by two spaces and Enter/Return)  \n* Bullet 2 (followed by two spaces and Enter/Return)  \n  * Sub-bullet 1 (followed by two spaces and Enter/Return)  \n  * Sub-bullet 2 (followed by two spaces and Enter/Return)  "},{"path":"rmarkdown.html","id":"in-text-code","chapter":"36 RMarkdown","heading":"36.3.4 In-text code","text":"can also include minimal R code within back-ticks. Within back-ticks, begin code “r” space, RStudio knows evaluate code R code. See example .book printed `r Sys.Date()`typed -line within section otherwise Markdown text, knows produce r output instead:book printed 2023-11-01","code":""},{"path":"rmarkdown.html","id":"running-code","chapter":"36 RMarkdown","heading":"36.3.5 Running code","text":"can run code R Markdown document two ways. first way knitting entire document. second way run code chunks manually (also known interactively) hitting little green play button top-right code chunk. arrow next green play button run code point.one downside running code interactively can sometimes make mistakes cause R Markdown document fail knit. , order knit, R Markdown document must contain code uses. working interactively , say, load data separate file, unable knit document. working R Markdown, always keep code within single document.code must also always appear right order.","code":""},{"path":"rmarkdown.html","id":"useful-tips","chapter":"36 RMarkdown","heading":"36.4 Useful tips","text":"\nworking directory .rmd files little different working\nscripts.\n\n.Rmd file, working directory wherever Rmd\nfile saved.\n\nexample .Rmd file subfolder\n~/markdownfiles/markdown.Rmd code read_csv(“data/data.csv”)\nwithin markdown look .csv file \nsubfolder called data inside ‘markdown’ folder \nroot project folder .RProj file lives.\n\ntwo options using .Rmd files\n\n\nDon’t put .Rmd file subfolder make sure lives \ndirectory .RProj file - way relative filepaths \nR scripts Rmarkdown files\n\n\nDon’t put .Rmd file subfolder make sure lives \ndirectory .RProj file - way relative filepaths \nR scripts Rmarkdown files\n\n\nUse package describe file locations -\nlater\n\n\nUse package describe file locations -\nlater\n","code":""},{"path":"rmarkdown.html","id":"exercises-setting-code-chunks","chapter":"36 RMarkdown","heading":"36.5 Exercises: Setting code chunks","text":"Question 1. global option document set show R code used render chunks FALSETRUEknitr::opts_chunk$set(echo = TRUE)Question 2. Options set individual code chunks override global options TRUEFALSEIn second chunk see echo = FALSE prevented code printed, see rendered outputQuestion 3. wanted see R code, output need select combo code chunk options? echo = FALSE, eval = FALSEecho = TRUE, eval = TRUEecho = FALSE, eval = TRUEecho = TRUE, eval = FALSEFor relatively simple report, may elect organize R Markdown script “self-contained” involve external scripts.Set Rmd file 'read' penguins data file.Everything need run R markdown imported created within Rmd file, including code chunks package loading. “self-contained” approach appropriate need much data processing (e.g. brings clean semi-clean data file) rendering R Markdown take long.scenario, one logical organization R Markdown script might :Set global knitr optionsSet global knitr optionsLoad packagesLoad packagesImport dataImport dataProcess dataProcess dataProduce outputs (tables, plots, etc.)Produce outputs (tables, plots, etc.)Save outputs, applicable (.csv, .png, etc.)Save outputs, applicable (.csv, .png, etc.)","code":""},{"path":"rmarkdown.html","id":"heuristic-file-paths-with-here","chapter":"36 RMarkdown","heading":"36.5.1 Heuristic file paths with here()","text":"package Müller (2020) function () (::()), make easy tell R find save files - essence, builds file paths. becomes especially useful dealing alternate filepaths generated .Rmd files, can used exporting/importing scripts, functions data.() works within R project:package first loaded within R project, places small file called “.” root folder R project “benchmark” “anchor”package first loaded within R project, places small file called “.” root folder R project “benchmark” “anchor”scripts, reference file R project’s sub-folders, use function () build file path relation anchorIn scripts, reference file R project’s sub-folders, use function () build file path relation anchorTo build file path, write names folders beyond root, within quotes, separated commas, finally ending file name file extension shown belowTo build file path, write names folders beyond root, within quotes, separated commas, finally ending file name file extension shown belowhere() file paths can used importing exportinghere() file paths can used importing exportingSo use () wrapped inside functions importing/exporting (like read_csv() ggsave()) include () can still use RProject location root directory 'knitting' Rmarkdown files, even markdown tidied away separate sub-folder.means previous relative filepaths replaced :\nTry replacing previous code examples \nre-knitting .Rmd file.\n\nmight want start using () now \nread export data scripts. Make sure consistent \nwhether use () heuristic file paths relative\nfile paths across .R .Rmd files project -\notherwise might encounter errors.\n","code":"```{r, include=FALSE}\n# GLOBAL KNITR OPTIONS ----\nknitr::opts_chunk$set(echo = TRUE)\n# ____________________----\n\n# PACKAGES ----\nlibrary(tidyverse)\nlibrary(here)\n\n``````{r, include=FALSE}\n# READ DATA ----\n\npenguins <- read_csv(here(\"data\", \"penguins_raw.csv\"))\n\nhead(penguins)\n\n```"},{"path":"rmarkdown.html","id":"activity-can-you-change-the-global-options-of-your-rmd-file-so-that-it-doesnt-display-any-code-warnings-or-messages","chapter":"36 RMarkdown","heading":"36.6 Activity: Can you change the global options of your Rmd file so that it doesn't display any code, warnings or messages?","text":"made edits chunk options try hitting 'knit' .","code":""},{"path":"rmarkdown.html","id":"ggplot","chapter":"36 RMarkdown","heading":"36.7 ggplot","text":"","code":""},{"path":"rmarkdown.html","id":"size-options-for-figures","chapter":"36 RMarkdown","heading":"36.7.1 Size options for figures","text":"fig.width fig.height enable set width height R produced figures.\ndefault value set 7 (inches). play options, prefer using one (fig.width).fig.width fig.height enable set width height R produced figures.\ndefault value set 7 (inches). play options, prefer using one (fig.width).fig.asp sets height--width ratio figure. ’s easier mind play ratio give width height separately. default value fig.asp NULL often set (0.8), often corresponds expected result.fig.asp sets height--width ratio figure. ’s easier mind play ratio give width height separately. default value fig.asp NULL often set (0.8), often corresponds expected result.Size options figures produced R consequences relative sizes elements figures. ggplot2 figure, elements remain size defined used theme, whatever chosen size figure. Therefore huge size can lead small text vice versa.\nbase font size 11 pts default. can change \nbase_size argument theme ’re using.\nfind result like, ’ll need combine sizes set theme set chunk options. customised theme, default size (7) looks good .texts axis longer figures overloaded, can choose bigger size (8 9) relatively reduce figure elements. ’s worth noting text sizes, can also modify base size theme obtain similar figures.","code":"\n# snake_case names need to be made\n\npenguins <- janitor::clean_names(penguins)\npenguin_colours <- c(\"darkolivegreen4\", \"darkorchid3\", \"goldenrod1\")\n\nplot <- penguins %>% \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))+\n  scale_color_manual(values=penguin_colours)+\n  theme_minimal(base_size = 11)```{r fig.asp = 0.8, fig.width = 3}\nplot\n# figure elements are too big\n``````{r fig.asp = 0.8, fig.width = 10}\nplot\n# figure elements are too small\n``````{r fig.asp = 0.8, fig.width = 7}\nplot\n``````{r fig.asp = 0.8, fig.width = 7}\nplot + theme(base_size = 14)\n# figure width stays the same, but modify the text size in ggplot\n```"},{"path":"rmarkdown.html","id":"size-of-final-figure-in-document","chapter":"36 RMarkdown","heading":"36.7.2 Size of final figure in document","text":"previous examples, see relative size elements within th figures changed - area occupied figures remained . order change need .width .heightFigures made R R Markdown document exported (default png format) inserted final rendered document. Options .width .height enable us choose size figure final document.rare need re-scale height--width ratio figures produced R ratio kept modify one option therefore use .width. like use percentage define size output figures. example hre size set 50%","code":"```{r fig.asp = 0.8, fig.width = 7, out.width = \"50%\"}\nplot \n# The final rendered size of the image changes according to out.width\n```"},{"path":"rmarkdown.html","id":"changing-default-values-of-chunk-options","chapter":"36 RMarkdown","heading":"36.7.3 Changing default values of chunk options","text":"can also change default values chunk options writing beginning R Markdown document.values applied chunks unless specify value chunk locally. can set values often used (differ default one) avoid repeating chunk.","code":"```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n fig.width = 6,\n fig.asp = 0.8,\n out.width = \"80%\"\n)\n```"},{"path":"rmarkdown.html","id":"static-images","chapter":"36 RMarkdown","heading":"36.8 Static images","text":"can include images R Markdown:","code":"```{r setup, include=FALSE}\nknitr::include_graphics(\"path/to/image.png\")\n```"},{"path":"rmarkdown.html","id":"tables-1","chapter":"36 RMarkdown","heading":"36.9 Tables","text":"","code":""},{"path":"rmarkdown.html","id":"markdown-tables","chapter":"36 RMarkdown","heading":"36.9.1 Markdown tables","text":"render ","code":"| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\n"},{"path":"rmarkdown.html","id":"gt","chapter":"36 RMarkdown","heading":"36.9.2 gt()","text":"gt Iannone et al. (2023) package making simple produce nice-looking display tables. lot customisation options.\nwon’t able see tables unless try re-knitting \n.Rmd file.\n","code":"\npenguins |>  \n    group_by(species) |>  \n    summarise(`Body Mass (g)`= mean(body_mass_g, na.rm = T),\n              `Flipper Length (mm)`= mean(flipper_length_mm, na.rm = T)) |>  \n  gt::gt()"},{"path":"rmarkdown.html","id":"source-files","chapter":"36 RMarkdown","heading":"36.10 Source files","text":"One variation “self-contained” approach R Markdown code chunks “source” (run) R scripts.can make R Markdown script less cluttered, simple, easier organize. can also help want display final figures beginning report.approach, final R Markdown script simply combines pre-processed outputs document. already used source() function feed R objects one script another, now can thing report.advantage data cleaning organising happens \"elsewhere\" need repeat code. make changes analysis scripts, reflected changes report next time compile (knit) .\nDon’t try using () unless script\ndependencies ALSO use . knitting Rmd file treats \nabsolute file path relative .Rmd file (even running\nscripts written outside document).\n\n’s usually simpler save .Rmd file \nplace .RProj file\n","code":"source(\"scripts/your-script.R\")"},{"path":"rmarkdown.html","id":"activity-connecting-scripts-and-reports","chapter":"36 RMarkdown","heading":"36.11 Activity: Connecting scripts and reports","text":"Create new Rmarkdown file.Create new Rmarkdown file.Create new .R fileCreate new .R fileSave (without changes) folder .Rproj file call linked_report_penguins.Rmd.Save (without changes) folder .Rproj file call linked_report_penguins.Rmd.\nnow source pre-written scripts data loading wrangling\nR project, just use source command read script -\ncan call objects made externally - case penguin plot\n- put code block hit knit.\n","code":"```{r setup, include=FALSE}\n# GLOBAL KNITR OPTIONS ----\nknitr::opts_chunk$set(echo = TRUE)\n# ____________________----\n\n``````{r read-data, include=FALSE}\n# READ DATA ----\n\nsource(\"scripts/penguins.R\")\n\n```"},{"path":"rmarkdown.html","id":"activity-test-yourself-1","chapter":"36 RMarkdown","heading":"36.12 Activity: Test yourself","text":"Make summary figure want penguins data ggplotMake summary figure want penguins data ggplotMake summary table summarise make beautiful kableExtra gt()Make summary table summarise make beautiful kableExtra gt()Write sentences explaining presentingWrite sentences explaining presentingKnit report htmlKnit report htmlUse chunk options optimise figure layout text make raw code rendered outputs visible. example literate programmingUse chunk options optimise figure layout text make raw code rendered outputs visible. example literate programming","code":""},{"path":"rmarkdown.html","id":"hygiene-tips","chapter":"36 RMarkdown","heading":"36.12.1 Hygiene tips","text":"recommend three chunks top documentGlobal chunk optionsGlobal chunk optionsAll packagesAll packagesReading dataReading data","code":"\n```{r setup , include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, \n                      fig.align = \"center\",\n                      fig.width = 6,\n                      fig.asp = 0.8,\n                      out.width = \"80%\n                      )\n                      \n```\n\n```{r library}\nlibrary(tidyverse)\n```\n\n```{r read-data}\nsource(\"scripts/02_visualisation_penguins.R\")\n```"},{"path":"rmarkdown.html","id":"common-knit-issues","chapter":"36 RMarkdown","heading":"36.13 Common knit issues","text":"issues cause Rmd document fail knit entirety. failed knit usually easy fix, needs READ error message, little detective work.","code":""},{"path":"rmarkdown.html","id":"duplication","chapter":"36 RMarkdown","heading":"36.13.1 Duplication","text":"","code":"\n```{r title-one}\n```\n\n```{r title-one}\n```"},{"path":"rmarkdown.html","id":"not-the-right-order","chapter":"36 RMarkdown","heading":"36.13.2 Not the right order","text":"","code":"plot(my_table)\n\nmy_table <- table(mtcars$cyl)"},{"path":"rmarkdown.html","id":"forgotten-trails","chapter":"36 RMarkdown","heading":"36.13.3 Forgotten trails","text":": Missing “,”, “(”, “}”, “’”","code":""},{"path":"rmarkdown.html","id":"path-not-taken","chapter":"36 RMarkdown","heading":"36.13.4 Path not taken","text":"Rmd document different location .Rproj file causing issues relative filepaths","code":""},{"path":"rmarkdown.html","id":"spolling","chapter":"36 RMarkdown","heading":"36.13.5 Spolling","text":"Incorrectly labelled chunk optionsIncorrectly labelled chunk optionsIncorrectly evaluated R codeIncorrectly evaluated R code","code":""},{"path":"rmarkdown.html","id":"visual-editor","chapter":"36 RMarkdown","heading":"36.14 Visual editor","text":"RStudio comes pretty nifty Visual Markdown Editor includes:SpellcheckSpellcheckEasy table & equation insertionEasy table & equation insertionEasy citations reference list buildingEasy citations reference list buildingYou can switch modes button push, try !","code":""},{"path":"rmarkdown.html","id":"quarto","chapter":"36 RMarkdown","heading":"36.15 Quarto","text":"visual editor precursor new type publishing tool - Quarto. tool takes R Markdown done R extends languages, including Python, Julia, Observable JS. write book, Quarto gaining traction. Luckily, concepts ’ve learned chapter apply Quarto well. Quarto documents YAML section, code chunks, Markdown text. can export Quarto documents HTML, PDF, Word. However, R Markdown Quarto documents syntactic differences.","code":""},{"path":"rmarkdown.html","id":"further-reading-guides-and-tips","chapter":"36 RMarkdown","heading":"36.15.1 Further Reading, Guides and tips","text":"R Cheat SheetsR Cheat SheetsXie (2015) Dynamic documents RmarkdownXie (2015) Dynamic documents RmarkdownThe fully comprehensive guide(https://rmarkdown.rstudio.com/articles_intro.html)(https://rmarkdown.rstudio.com/authoring_quick_tour.html)https://www.apreshill.com/blog/2022-04--dont-talk--quarto/https://www.apreshill.com/blog/2022-04--dont-talk--quarto/https://www.njtierney.com/post/2022/04/11/rmd--qmd/https://www.njtierney.com/post/2022/04/11/rmd--qmd/","code":""},{"path":"github.html","id":"github","chapter":"37 Github","heading":"37 Github","text":"","code":""},{"path":"github.html","id":"lets-git-it-started","chapter":"37 Github","heading":"37.1 Let's Git it started","text":"Git version control system. Originally built help groups developers work collaboratively big software projects. helps us manage RStudio projects - tracked changes.Git GitHub big part data science community. can use GitHub number waysTo source code repurpose analyses built others usesTo source code repurpose analyses built others usesManage analysis projects parts :\n🔢 Data\n✍ ️Scripts\n📊 Figures\n📝 ReportsManage analysis projects parts :🔢 Data✍ ️Scripts📊 Figures📝 ReportsAre version controlled open accessVersion control lets recover mistakes & analysis backed externallyVersion control lets recover mistakes & analysis backed externallyWhen come publish reports - analysis accessible othersWhen come publish reports - analysis accessible othersBuild library projects show can Data ScienceBuild library projects show can Data Science","code":""},{"path":"github.html","id":"what-is-github","chapter":"37 Github","heading":"37.1.1 What is Github?","text":"Watch video today's session:","code":""},{"path":"github.html","id":"will-this-be-fun","chapter":"37 Github","heading":"37.1.2 Will this be fun?","text":".Using GitHub version control bit like cleaning teeth. exactly fun, good promotes excellent hygiene. also takes two minutes.talk projects GitHub refer Repositories / repos.Repos GitHub unit RStudio Project - place can easily store information/data/etc. related whatever project working .way set RStudio Projects now extra steps itMake new GitHub repository (fork existing one)Make new GitHub repository (fork existing one)Make New project RStudio Cloud - selecting GitHub Repository optionMake New project RStudio Cloud - selecting GitHub Repository optionClone GitHub repo RStudio ProjectClone GitHub repo RStudio ProjectMake sure RStudio Github can talk otherMake sure RStudio Github can talk otherGo normal business:Go normal business:comes saving files, also periodically make commit - takes multi-file snapshot entire projectWhen comes saving files, also periodically make commit - takes multi-file snapshot entire projectAt end session push changes GitHub.end session push changes GitHub.changes working RStudio feel little different first, quickly become routine - big step forward Data Science skills.","code":""},{"path":"github.html","id":"the-payoff","chapter":"37 Github","heading":"37.1.3 The Payoff","text":"portfolio: build library data science projects can show offA portfolio: build library data science projects can show offbe keen: track development R packages GitHUbbe keen: track development R packages GitHUbversion control: keep safe archive edits changesversion control: keep safe archive edits changesplay others: easy ways collaborate data science projectsplay others: easy ways collaborate data science projectsFor full rundown use Git R go wrong checking Happy Git","code":""},{"path":"github.html","id":"set-up-github","chapter":"37 Github","heading":"37.2 Set up GitHub","text":"First things first need set GitHub account.Head GitHub sign free account.\nMake careful note \n\n\nusername choose\n\n\nusername choose\n\n\nUse email signed RStudio Cloud\n\n\n\nUse email signed RStudio Cloud\n\n\n\nNote password carefully!\n\n\nNote password carefully!\n","code":""},{"path":"github.html","id":"activity-1-fork-clone-an-existing-repo-on-github-make-edits-push-back","chapter":"37 Github","heading":"37.3 Activity 1: Fork & clone an existing repo on GitHub, make edits, push back","text":". Go github.com log (need account - sign uea.ac.uk e-mail)b. Search bar, look repo Philip-Leftwich/5023Y-Happy-Gitc. Click repo name, look existing repo structured. FORK repo","code":""},{"path":"github.html","id":"what-the-hell-is-a-fork","chapter":"37 Github","heading":"37.3.1 What the hell is a fork?","text":"fork generate personal copy another user's repository.e. Press Clone/download copy URL, create new project RStudio Cloud selecting New project Git repository option - make sure 5023Y Workspacef. Open some_cool_animals.Rmd document, accompanying htmlg. Add name top documenth. WAIT. forgotten add great image facts important species - Baby Yoda, including image (file repo, info add ).FACTSAlso known \"Child\"Also known \"Child\"likes unfertilised frog eggs & control knobslikes unfertilised frog eggs & control knobsstrong forcestrong force\n \n\n \n. ’ve added Grogu, knit Rmd document update htmlj. Add Git credentials go section talking githubk. Stage, Commit & Push files (glossary)Staged - pick files intend bind commitCommit - write short descriptive message, binds changes single commitPush - \"Pushes\" changes local repo remote repo GitHub, (push)l. GitHub, refresh see files updated. Cool! Now ’ve used something someone else created, customized , saved updated version.","code":""},{"path":"github.html","id":"talking-to-github","chapter":"37 Github","heading":"37.4 Talking to GitHub","text":"Getting set talk GitHub can seem like pain. Eventually work computer - copy R & RStudio installed - . now use RStudio Cloud - looks like per project. takes seconds put commands directly console.Run first line console put GitHub username e-mail connected GitHub account.\nMake sure go RStudio Cloud profile > Authentication\nselect Github Enabled & Private repo access also enabled\nneed give RStudio Cloud GitHub Personal Access Token, can retrieve going Github.com finding Settings > Developer Settings > Generate TokenSelect \"scopes\" name token.Make note need whenever set new project want talk GitHub. GitHub recently removed password authentication favour PATs, RStudio Cloud seem updated yet - ok though - just enter line code - copy+paste PAT prompted. - Option set/replace credentials.\nstart working computer, \nre-input PAT expires. RStudio Cloud works little\ndifferently.\n\ntheory need input PAT per project.\nSometimes seems forget asks one session\nnext. might want write somewhere.\n\nforget PAT - ’s ok - can’t retrieve - \ncan just generate new one o Github.\n","code":"\nusethis::use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.org\")\ngitcreds::gitcreds_set()"},{"path":"github.html","id":"see-changes","chapter":"37 Github","heading":"37.4.1 See changes","text":"first immediate benefit using GitHub RStudio Project seeing changes made since last commit.RStudio Git pane lists every file ’s added, modified deleted. icon describes change:changed file\nadded new file Git seen \ndeleted file\ncan get details changes made file right-clicking selecting diffThis opens new window highlighting differences current file previous commit.","code":""},{"path":"github.html","id":"how-to-use-version-control---when-to-commit-push-and-pull","chapter":"37 Github","heading":"37.5 How to use version control - when to commit, push and pull","text":"Repositories (repos) GitHub unit RStudio Project - place can easily store information/data/etc. related whatever project working .create Repository GitHub communicating Project RStudio, can changes moving two directionspull information GitHub RStudioorpush information RStudio GitHub safely stored /collaborators can access .Github also keeps complete history different versions file can accessed/reviewed collaborators time, anywhere, long internet.mentioned term commit times (37.11). fundamental unit work Git commit. commit takes snapshot code specified point time.create commit two stages:stage files, telling Git changes included next commit.stage files, telling Git changes included next commit.commit staged files, describing changes message.commit staged files, describing changes message.","code":""},{"path":"github.html","id":"stage","chapter":"37 Github","heading":"37.5.1 Stage","text":"\nstaging section allows finescale control \nfiles included commit. theory \nseparate changes made different files different commitments.\nFirst save files, select files inclusion staging , tick checkbox select commit box.new window open 'Review Changes' - see diffs bottom pane, files selected latest commit.","code":""},{"path":"github.html","id":"commit","chapter":"37 Github","heading":"37.5.2 Commit","text":"new 'Review Changes' window see list files staged last window.click file name see changes made highlighted bottom panel. Added content highlighted green, removed content highlighted red.commit changes (take snapshot) must enter mandatory commit message \"commit message\" box.\nFigure 37.1: Green = added content, Red = deleted content\ncommit message short meaningful (collaborators)Describe , . Git stores associated differences commits, message doesn’t need say exactly changed - kept track Git. Instead provide summary focuses reasons change. Make understandable someone else!tradition enter first message new project \"First Commit\".click > commit, new window open summarises commit - can close \ncommit changes - simply saving new version \nfile. committing exact line changes made, \nmodifying files selected commit.\n","code":""},{"path":"github.html","id":"push","chapter":"37 Github","heading":"37.5.3 Push","text":"moment, commits local, order send GitHub select Push point github credentials need place - get prompted provide , close windows follow steps trying .git pane empty point - little message top detailing many commits ahead master repo GitHub. says branch one commits ahead master, commits still local pushed yet.confirm changes made project pushed Github, open GitHub page (get link Tools > Project Options > Git/SVN).see files listed, alongside file names see last commit message made commit.","code":""},{"path":"github.html","id":"a-couple-of-general-tips","chapter":"37 Github","heading":"37.5.4 A couple of general tips:","text":"\n\nPull start every session \nretrieves master repo GitHub - update end \nevery session. helps prevent conflicts\n\n\nPull start every session \nretrieves master repo GitHub - update end \nevery session. helps prevent conflicts\n\n\nCommit/push small, meaningful increments \noften. can make multiple commits \nsession - always push end \nsession\n\n\nCommit/push small, meaningful increments \noften. can make multiple commits \nsession - always push end \nsession\n\n\nway GitHub Repo becomes master\ncopy project.\n\n\nway GitHub Repo becomes master\ncopy project.\n","code":""},{"path":"github.html","id":"activity-2-github-classrooms-enabled-r-projects-with-subfolders","chapter":"37 Github","heading":"37.6 Activity 2: GitHub Classrooms enabled R Projects with subfolders","text":"GitHub Classrooms way set repos assigments - accept assignment GitHub Classroom automatically forks private repo .make regular commits pushes save work go - grading project repositories GitHub classrooms assignment work.\naccept assignment GitHub classrooms - repo won’t\nappear main profile, belongs class\nrather . can always find searching \nOrganisations - ’s probably easiest just check\nURL Project Options RStudio\n. Follow invite linkb. invited sign-Github (already) & join UEABIO organisationc. Clone assignment work locally RStudio Cloud - 5023Y Workspaced. local project folder, create subfolders ‘data’ ‘figures’, 'scripts'.f. Open new .R script (.Rmd prefer practice )g. Attach tidyverse, janitor, optionally packagesh. Read infant_mortality.csv dataThis file look death rate every country world across six decades. See README informationi. Stage, commit & push point - notice empty folder ‘final_graphs’ doesn’t show (won’t commit empty folder) - set git credentials againj. Back script, write short script read clean data.script pre-written, puts data tidy format, cleans names, makes sure year treated date data filters four countries interest.Assign new objectk. Make ggplot plotting infant mortality rate countryHINT - use geom_line() remember separate countries colourl. Update graph direct labels (using annotate) vertical horizontal lines geom_vline geom_hline.m. Use ggsave() write graph .png ‘final_graphs’ subfoldern. Save, stage, commito one cool fun thing! make interactive version plot using plotly Sievert et al. (2023) just fun!p Now save, stage, commit & pushq. Check changes stored GitHub(NOTE organisations rather repos)Make sure finish exercises next week become GitHub pro!!!!!!!!!","code":"\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(janitor)\nlibrary(plotly)\n\ninfant_mortality <- read_csv(\"data/infant_mortality.csv\") \n\nsubset_infant_mortality <- infant_mortality %>%\n  pivot_longer(cols=\"1960\":\"2020\", \n               names_to=\"year\",               \n               values_to=\"infant_mortality_rate\") %>%\n  mutate(year=lubridate::years(year)) %>% # set ymd format\n  mutate(year=lubridate::year(year)) %>% # extract year\n  janitor::clean_names() %>% # put names in snake case\n  filter(country_name %in% \n           c(\"United States\", \n             \"Japan\", \n             \"Afghanistan\", \n             \"United Kingdom\")) # extract four countries\n\n# View(subset_infant_mortality)\n\n# subset the date according to (US,UK, Japan = lowest infant death rates, Afghanistan = highest infant death rates)\nggplot(data = subset_infant_mortality) +\n  geom_line(aes(x = year,\n                 y = infant_mortality_rate,\n                 color = country_name))\nmortality_figure <- ggplot(data = subset_infant_mortality,\n                           aes(x = year,\n                 y = infant_mortality_rate,\n                 color = country_name)) +\n  geom_line() +\n  scale_color_manual(values = c(\"black\", \"blue\", \"magenta\", \"orange\")) +\n  annotate(geom = \"text\",\n           x = 2023,\n           y = 50,\n           label = \"Afghanistan\",\n           size = 4,\n           colour=\"black\") +\n    annotate(geom = \"text\",\n           x = 2023,\n           y = -2,\n           label = \"Japan\",\n           size = 4,\n           colour=\"blue\") +\n    annotate(geom = \"text\",\n           x = 2023,\n           y = 15,\n           label = \"United Kingdom\",\n           size = 4,\n           colour=\"orange\") +\n    annotate(geom = \"text\",\n           x = 2023,\n           y = 5,\n           label = \"United States\",\n           size = 4,\n           colour=\"magenta\") +\n  geom_vline(xintercept = 2000,\n             lty = 2) +\n  theme_minimal()+\n  theme(legend.position=\"none\")+\n  xlim(1970, 2025)+\n  labs(x=\"Year\",\n       y=\"Deaths per 100,000\")+\n  ggtitle(\"Mortality rate, infant (per 1,000 live births) \\nhas been steadily falling in Afghanistan from 1970 to present\")\nggsave(\"figures/infant mortality graph.png\", plot = mortality_figure, dpi=900, width = 7, height = 7)\nggplotly(mortality_figure, tooltip = c(\"infant_mortality_rate\"))\n## uses plotly package"},{"path":"github.html","id":"find-your-classroom-repos","chapter":"37 Github","heading":"37.7 Find your classroom repos","text":"work GitHub classrooms repos become part organisation UEABIO.want find repos GitHub can couple waysBookmark direct URL (noted ) first visit repoBookmark direct URL (noted ) first visit repoHead (https://github.com/UEABIO) - able see repos belong .Head (https://github.com/UEABIO) - able see repos belong .RStudio Cloud head Tools > Project Options > Git find URL.RStudio Cloud head Tools > Project Options > Git find URL.","code":""},{"path":"github.html","id":"git-history","chapter":"37 Github","heading":"37.8 Git History","text":"far used Git track, stage commit file changes GitHub. Now look briefly review changes want revert changes.","code":""},{"path":"github.html","id":"commit-history","chapter":"37 Github","heading":"37.8.1 Commit History","text":"view commit history RStudio, simply click 'History' button 🕒 Git Panel.window split two parts. top pane lists every commit made repository, associated messsages (top bottom, recent last).Click commit bottom pane shows changes made compared previous commit, also summary made commit, commit message date made.also SHA (Secure Hash Algorithm), unique identifier commit, Parent SHA identifies commit immediately preceded .can also review commit history Github clicking 'commits' link repository","code":""},{"path":"github.html","id":"reverting-changes","chapter":"37 Github","heading":"37.8.2 Reverting changes","text":"One powerful things Git ability revert previous versions files, made mistake, broke something, just changed mind!depends stage making changes. go scenarios turn.","code":""},{"path":"github.html","id":"changes-saved-but-not-staged-committed-or-pushed","chapter":"37 Github","heading":"37.8.2.1 Changes saved but not staged, committed or pushed","text":"saved changes file, yet staged , can click offending file Git pane select 'revert'. roll back file last 'commit' (warning reverting undone).Changes can made part file opening 'Diff' window. Select line wish discard double-clicking line select 'Discard line/chunk'","code":""},{"path":"github.html","id":"staged-but-not-committed","chapter":"37 Github","heading":"37.8.2.2 Staged but not committed","text":"Simply unclick staged check box, revert described .","code":""},{"path":"github.html","id":"staged-and-committed-but-not-pushed","chapter":"37 Github","heading":"37.8.2.3 Staged and committed but not pushed","text":"made mistake forgot include file last commit, can fix mistake, save changes tick box 'Amend previous commit' 'Review Changes' pane.want make change several commits ago two options:Option 1 - easier Git 🤷Look commit history RStudio - find commit want go back click 'View file @' button show file contents.Copy contents file clipboard paste current file. Save, stage, commit normal.Option 2 - Go Git history, find commit write SHA.Now go Terminal tab (next Console) typeThis might look something like thisThis command copy selected file past replace present. may asked want reload file now (say yes). stage, commit usual.","code":"git checkout <SHA> <filename>git checkout 2b4693d1 first_doc.Rmd"},{"path":"github.html","id":"staged-committed-and-pushed","chapter":"37 Github","heading":"37.8.2.4 Staged, committed and pushed","text":"use either strategies described , although using Terminal now better command git revert.First need identify SHA commit want revert . use git revert command Terminal. Adding ---commit option stops us deal intermediate commits. Adding ..HEAD tells GIT make old commit new/old \"HEAD\" lead project.","code":"git revert --no-commit d27e79f1..HEAD\n"},{"path":"github.html","id":"collaborate-with-git","chapter":"37 Github","heading":"37.9 Collaborate with Git","text":"GitHub great collaboration. can seem little scary complicated first, totally worth !Github works distributed system means person working project copy. Changes merged together remote repository GitHub.small projects can use exactly system . Everybody connects local repository remote one.Pull repository start session make sure working -date version.Pull repository start session make sure working -date version.Work aspect project, staging, committing pushing go.Work aspect project, staging, committing pushing go.small projects works well person files work , two people working file time can cause 'merge conflict'. bigger projects collaborator creates copy (fork) repository, pull request must sent owner main repository incorporate changes, includes review step changes integrated.","code":""},{"path":"github.html","id":"final-git-tips","chapter":"37 Github","heading":"37.10 Final Git tips","text":"Reminders:Commit often, push end sessionCommit often, push end sessionIf want track file repository (maybe working collaboration) can get Git ignore right-click selecting Ignore.want track file repository (maybe working collaboration) can get Git ignore right-click selecting Ignore.Check Github repo online make sure changes pushedCheck Github repo online make sure changes pushedIf goes wrong! trash project! ok, long GitHub repository online good final option delete RStudio project computer RStudio Cloud clone project GitHub !goes wrong! trash project! ok, long GitHub repository online good final option delete RStudio project computer RStudio Cloud clone project GitHub !","code":""},{"path":"github.html","id":"glossary-github","chapter":"37 Github","heading":"37.11 Glossary-GitHub","text":"","code":""},{"path":"github.html","id":"summing-up-github","chapter":"37 Github","heading":"37.12 Summing up GitHub","text":"","code":""},{"path":"github.html","id":"what-we-learned-1","chapter":"37 Github","heading":"37.12.1 What we learned","text":"learned:fork clone GitHub ProjectsHow fork clone GitHub ProjectsHow use GitHub classroomsHow use GitHub classroomsHow make RStudio GitHub talk otherHow make RStudio GitHub talk otherHow use version control, stage, commit pushHow use version control, stage, commit pushRemember bookmark Happy GitRemember bookmark Happy GitYou usedgitcreds Csárdi (2022)gitcreds Csárdi (2022)usethis Wickham, Bryan, et al. (2023)usethis Wickham, Bryan, et al. (2023)","code":""},{"path":"github.html","id":"sharing-a-github-repo---dealing-with-conflict-when-collaborating","chapter":"37 Github","heading":"37.13 Sharing a Github repo - Dealing with conflict when collaborating","text":"","code":""},{"path":"github.html","id":"how-to-avoid-a-conflict","chapter":"37 Github","heading":"37.13.1 How to avoid a conflict","text":"best simplest way avoid Github conflicts follow simple guidelines. two people sharing repo commit work usually go smoothly. However, try merge changes part file get merge conflict.see message like , first thing panic. Merge conflicts can easily fixed.can avoid merge conflicts altogether following simple organisation tips:Partition project, work independent R scripts, changes made one person affect files someone else working .Partition project, work independent R scripts, changes made one person affect files someone else working .Communicate - organise times one person might work shared file, two people work file timeCommunicate - organise times one person might work shared file, two people work file timeAlways Pull latest version repo start working, try pulling just push order collect latest changes & always push Github end session.Always Pull latest version repo start working, try pulling just push order collect latest changes & always push Github end session.","code":"git merge issue-5\n# Auto-merging index.html\n# CONFLICT (content): Merge conflict in index.html\n# Automatic merge failed; fix conflicts and then commit the result.\n"},{"path":"github.html","id":"dealing-with-a-conflict","chapter":"37 Github","heading":"37.13.2 Dealing with a conflict","text":"imagine made mistake two people tried push changes file time!second person trying push change Github get error\nFigure 37.2: Git conflict\nmessage says pull changes Github, generate different error mesage. case indicating merge conflict differences line file. Git pane, file now flagged orange 'U'. stands 'unresolved'\nFigure 37.3: git conflict\nresolve conflict, file now needs edited. Git flagged locations conflicts occurred <<<<<<<, ======= >>>>>>>. file needs edited merging appropriate changes file reads conflict markers removed.","code":""},{"path":"github.html","id":"commit-resolutions","chapter":"37 Github","heading":"37.13.3 Commit resolutions","text":"Proceed normal, commit file changes, change file orange U blue M push Github, collaborators need informed Pull updated repo get new changes.","code":""},{"path":"github.html","id":"try-and-create-and-solve-a-merge-error.","chapter":"37 Github","heading":"37.13.4 Try and create and solve a merge error.","text":"\nMerge Conflict Challenge part group try \nintentionally create merge conflict, go steps\nneeded resolve issues continue developing merged\nfiles. See sections help steps:\n\nStep 0: Ensure starting project Step 1: Project\nco-ordinator makes change commits - small change \nREADME.md Step 2: Collaborator makes change commits \nline Step 3: Collaborator pushes file GitHub Step 4: Owner pushes\nchanges gets error Step 5: Owner pulls GitHub get\nCollaborator changes Step 6: Owner edits file resolve \nconflict Step 7: Owner commits resolved changes Step 8: Owner pushes\nresolved changes GitHub Step 9: Collaborator pulls resolved\nchanges GitHub Step 10: can view commit history\n","code":""},{"path":"github.html","id":"abort","chapter":"37 Github","heading":"37.13.5 Abort!","text":"Sometimes just made mistake. get merge conflict, repository placed ‘Merging’ state resolve . ’s commandline command abort merge altogether:terminal typeOf course, still haven’t synced collaborator’s changes, things still unresolved. least repository now usable local machine. Let know asap can fix issue","code":"git merge --abort\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] kableExtra_1.3.4   here_1.0.1         janitor_2.2.0      gitcreds_0.1.2    \n##  [5] usethis_2.2.2      webexercises_1.1.0 glossary_1.0.0     lubridate_1.9.2   \n##  [9] forcats_1.0.0      stringr_1.5.0      dplyr_1.1.2        purrr_1.0.1       \n## [13] readr_2.1.4        tidyr_1.3.0        tibble_3.2.1       ggplot2_3.4.2     \n## [17] tidyverse_2.0.0   \n## \n## loaded via a namespace (and not attached):\n##  [1] gtable_0.3.3      xfun_0.39         bslib_0.5.0       tzdb_0.4.0       \n##  [5] vctrs_0.6.3       tools_4.3.1       generics_0.1.3    parallel_4.3.1   \n##  [9] fansi_1.0.4       highr_0.10        pkgconfig_2.0.3   webshot_0.5.5    \n## [13] lifecycle_1.0.3   compiler_4.3.1    farver_2.1.1      munsell_0.5.0    \n## [17] snakecase_0.11.0  htmltools_0.5.5   sass_0.4.6        yaml_2.3.7       \n## [21] pillar_1.9.0      crayon_1.5.2      jquerylib_0.1.4   cachem_1.0.8     \n## [25] rvest_1.0.3       tidyselect_1.2.0  digest_0.6.33     stringi_1.7.12   \n## [29] bookdown_0.34     labeling_0.4.2    rprojroot_2.0.3   fastmap_1.1.1    \n## [33] grid_4.3.1        colorspace_2.1-0  cli_3.6.1         magrittr_2.0.3   \n## [37] utf8_1.2.3        withr_2.5.0       scales_1.2.1      bit64_4.0.5      \n## [41] timechange_0.2.0  httr_1.4.6        rmarkdown_2.23    bit_4.0.5        \n## [45] hms_1.1.3         memoise_2.0.1     evaluate_0.21     knitr_1.43       \n## [49] viridisLite_0.4.2 rlang_1.1.1       downlit_0.4.3     glue_1.6.2       \n## [53] xml2_1.3.5        svglite_2.1.1     rstudioapi_0.15.0 vroom_1.6.3      \n## [57] jsonlite_1.8.7    R6_2.5.1          systemfonts_1.0.4 fs_1.6.2"},{"path":"reading-in-data.html","id":"reading-in-data","chapter":"38 Reading in data","heading":"38 Reading in data","text":"","code":""},{"path":"write-to-sql.html","id":"write-to-sql","chapter":"39 write to sql","heading":"39 write to sql","text":"","code":""},{"path":"querying-sql.html","id":"querying-sql","chapter":"40 querying sql","heading":"40 querying sql","text":"","code":""},{"path":"iteration.html","id":"iteration","chapter":"41 Iteration","heading":"41 Iteration","text":"’ve seen write function can used create concise re-usable operations can applied multiple times script without copy paste, functions really come combined iteration. Iteration process running operation group objects, minimising code replication.","code":""},{"path":"iteration.html","id":"data-structures","chapter":"41 Iteration","heading":"41.1 Data structures","text":"Functional programming R requires good understanding types data structure available R. quick introduction","code":""},{"path":"iteration.html","id":"vector","chapter":"41 Iteration","heading":"41.1.1 Vector","text":"","code":"\nvector_one <- (1:3)\n\nvector_two <- c(\"apples\", \"bananas\", \"pears\")"},{"path":"iteration.html","id":"list","chapter":"41 Iteration","heading":"41.1.2 List","text":"","code":"\nnew_list <- list(vector_one, vector_two)\n\nnames(new_list) <- c(\"numbers\", \"fruit\")"},{"path":"iteration.html","id":"matrix","chapter":"41 Iteration","heading":"41.1.3 Matrix","text":"","code":"\nnew_matrix <- cbind(vector_one, vector_two)\n\nis.matrix(new_matrix)\n\n\nmatrix(nrow = 2, ncol = 2)## [1] TRUE\n##      [,1] [,2]\n## [1,]   NA   NA\n## [2,]   NA   NA"},{"path":"iteration.html","id":"dataframe","chapter":"41 Iteration","heading":"41.1.4 Dataframe","text":"","code":"\nnew_dataframe <- data.frame(vector_one, vector_two)"},{"path":"iteration.html","id":"tibble","chapter":"41 Iteration","heading":"41.1.5 tibble","text":"","code":"\nnew_tibble <- tibble(vector_one, vector_two)"},{"path":"iteration.html","id":"simple-iteration-functions","chapter":"41 Iteration","heading":"41.2 Simple iteration functions","text":"","code":""},{"path":"iteration.html","id":"rep-1","chapter":"41 Iteration","heading":"41.2.1 rep()","text":"function rep() lets repeat first argument set number times.default amount repetition times = print entire vector start finish repeat.second argument vector number elements first vector, repeat specified values eachOr use argument rep first element first followed second etc.think happen set times 3 2?","code":"\nrep(1:5, 5)\n\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), 2)##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n## [1] \"Adelie\"    \"Gentoo\"    \"Chinstrap\" \"Adelie\"    \"Gentoo\"    \"Chinstrap\"\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), c(2, 1, 3))## [1] \"Adelie\"    \"Adelie\"    \"Gentoo\"    \"Chinstrap\" \"Chinstrap\" \"Chinstrap\"\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), each = 3)## [1] \"Adelie\"    \"Adelie\"    \"Adelie\"    \"Gentoo\"    \"Gentoo\"    \"Gentoo\"   \n## [7] \"Chinstrap\" \"Chinstrap\" \"Chinstrap\"\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), times = 2, each = 3)##  [1] \"Adelie\"    \"Adelie\"    \"Adelie\"    \"Gentoo\"    \"Gentoo\"    \"Gentoo\"   \n##  [7] \"Chinstrap\" \"Chinstrap\" \"Chinstrap\" \"Adelie\"    \"Adelie\"    \"Adelie\"   \n## [13] \"Gentoo\"    \"Gentoo\"    \"Gentoo\"    \"Chinstrap\" \"Chinstrap\" \"Chinstrap\""},{"path":"iteration.html","id":"seq-1","chapter":"41 Iteration","heading":"41.2.2 seq()","text":"function seq() useful generating sequence numbers pattern.Use seq() create vector integers 0 10.initially similar just making vector withBut seq extra functions. can set argument count numbers 1 (default). Use seq() create vector numbers 0 100 10s.also argument length., useful want know many steps divide something ","code":"\nseq(1,5)## [1] 1 2 3 4 5\nc(1:5)## [1] 1 2 3 4 5\nseq(0, 100, by = 10)##  [1]   0  10  20  30  40  50  60  70  80  90 100\nseq(0, 100, length.out = 12)##  [1]   0.000000   9.090909  18.181818  27.272727  36.363636  45.454545\n##  [7]  54.545455  63.636364  72.727273  81.818182  90.909091 100.000000"},{"path":"iteration.html","id":"replicate-1","chapter":"41 Iteration","heading":"41.2.3 replicate()","text":"Replicate first example function whose purpose iterate functionsFor example rnorm function generates numbers normal distribution.Nesting inside replicate() function repeat command specified number timesHere introduce two approaches iterative operations - using loops using package purrr.loops iterate code across series inputs, less common R programming languages. Nevertheless, introduce learning tool referencefor loops iterate code across series inputs, less common R programming languages. Nevertheless, introduce learning tool referenceThe purrr package tidyverse approach iterative operations - works “mapping” function across many inputs (values, columns, datasets, etc.)purrr package tidyverse approach iterative operations - works “mapping” function across many inputs (values, columns, datasets, etc.)","code":"\nreplicate(3, # times to replicate function\n          expr = rnorm(n = 5, \n                       mean = 1,\n                       sd = 1))##            [,1]        [,2]       [,3]\n## [1,]  1.2431513  2.18451380  2.2123819\n## [2,]  1.5756564  0.25297244  1.1631301\n## [3,]  0.8755848  1.01707686  0.5347344\n## [4,]  2.4954751 -0.01397108 -0.1592592\n## [5,] -0.4872208  1.32018052  0.7511214"},{"path":"iteration.html","id":"for-loops","chapter":"41 Iteration","heading":"41.3 For Loops","text":"loops essential part many programming languages, often less utilised R ability apply functions elements vector. However, include completeness.loop three core parts:sequence items iterate throughThe sequence items iterate throughThe operations conduct per item sequenceThe operations conduct per item sequenceThe container results (optional)container results (optional)basic syntax : (item sequence) {operations using item}. Note parentheses curly brackets. results printed console, stored container R object.simple loop example . every number vector add 2. container object , results function printed directly console.make slightly complicated function - first making new tibble, first four vectors - made 10 numbers randomly generated roughly close 0 mean s.d. 1. combine make tibbleEach vector randomly generated actual averages slightly different, can test :code works, repetitive, applying function .simple loopNow run loop:time mean calculate one column df stored element previously empty output vector.() loops useful quickly iterating list, R prefers store everything new object loop iteration, loops can become quite slow complex, running many processes many iterations. alternative apply family functions base R purrr::map tidyverse broadly can used alternative loops.","code":"for(i in list){\n    # PERFORM SOME ACTION\n}\nfor (num in c(1,2,3,4,5)) {  # the SEQUENCE is defined (numbers 1 to 5) and loop is opened with \"{\"\n  print(num + 2)             # The OPERATIONS (add two to each sequence number and print)\n}                            # The loop is closed with \"}\"                            ## [1] 3\n## [1] 4\n## [1] 5\n## [1] 6\n## [1] 7[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\nset.seed(1234)\n\n# a simple tibble\ndf <- tibble(\n  a =  rnorm(10),\n  b =  rnorm(10),\n  c =  rnorm(10),\n  d = rnorm(10)\n)\n\ndf\nmean(df$a)\n\nmean(df$b)\n\nmean(df$c)\n\nmean(df$d)## [1] -0.3831574\n## [1] -0.1181707\n## [1] -0.3879468\n## [1] -0.7661931\noutput <- vector(\"double\", ncol(df))  # 1. output having a predefined empty vector of the right size works best, here we choose to make the vector \"double\" specifying that it is empty and ready to receive number values, ncol(df) means that the vector will be as long as the number of columns in our tibble \noutput## [1] 0 0 0 0\nfor (i in seq_along(df)) {            # 2. sequence - determines what to loop over - here we are looping along df, rather than down the length of each vector\n  \n  output[[i]] <- mean(df[[i]])      # 3. body - each time the loop runs it allocates a value to output, \n}\noutput## [1] -0.3831574 -0.1181707 -0.3879468 -0.7661931"},{"path":"iteration.html","id":"activity-1-loop-exercise","chapter":"41 Iteration","heading":"41.3.1 Activity 1: Loop exercise","text":"made function converts values normal distribution z scores:Assuming column dataframe df comes different population. use loop apply function column independently?Hint copy df new object z_df z_df <- df destination tibble new z scores.","code":"\nz_score <- function(x) {\n  (x - min(x, na.rm = TRUE)) /  \n  diff(range(x, na.rm = TRUE))\n}\nz_df <- df\n\nfor (i in 1:ncol(df)) { # loop through each element\n  z_df[i] <- z_score(df[[i]]) #apply function and store in out[]\n}\nz_df"},{"path":"iteration.html","id":"apply-2","chapter":"41 Iteration","heading":"41.4 apply","text":"can perform exactly action apply - apply functions R allow iteration without use loop constructs. can used input list matrix.MARGIN = 1 means apply function rowsMARGIN = 2 means apply function columns","code":"\napply(df, MARGIN = 2,  z_score)##               a          b         c         d\n##  [1,] 0.3319492 0.15265375 0.7821670 1.0000000\n##  [2,] 0.7647291 0.00000000 0.4733256 0.5192783\n##  [3,] 1.0000000 0.06506096 0.4981101 0.4480343\n##  [4,] 0.0000000 0.31129943 0.9430704 0.5114592\n##  [5,] 0.8089534 0.57344857 0.3729606 0.1678518\n##  [6,] 0.8313814 0.26011813 0.0000000 0.3084450\n##  [7,] 0.5162933 0.14274906 1.0000000 0.0000000\n##  [8,] 0.5244878 0.02553760 0.2098653 0.2556247\n##  [9,] 0.5192926 0.04721860 0.7084006 0.5745131\n## [10,] 0.4243735 1.00000000 0.2532211 0.5222322\nis.matrix(apply(df, 2,  z_score))\n\nis.data.frame(apply(df, 2,  z_score))"},{"path":"iteration.html","id":"map","chapter":"41 Iteration","heading":"41.5 map","text":"map tidyverse equivalent apply work well %>% extended functions works better tibbles dataframesThe basic syntax map(.x = SEQUENCE, .f = FUNCTION, ARGUMENTS). bit detail:.x = inputs upon .f function iteratively applied - e.g. vector jurisdiction names, columns data frame, list data frames.x = inputs upon .f function iteratively applied - e.g. vector jurisdiction names, columns data frame, list data frames.f = function apply element .x input - function like print() already exists, custom function define. function often written tilde ~ (details ).\nnotes syntax:.f = function apply element .x input - function like print() already exists, custom function define. function often written tilde ~ (details ).\nnotes syntax:function needs arguments specified, can written parentheses tilde (e.g. .f = mean). provide arguments value iteration, provide within map() outside .f = argument, na.rm = T map(.x = my_list, .f = mean, na.rm=T).function needs arguments specified, can written parentheses tilde (e.g. .f = mean). provide arguments value iteration, provide within map() outside .f = argument, na.rm = T map(.x = my_list, .f = mean, na.rm=T).can use .x (simply .) within .f = function placeholder .x value iterationYou can use .x (simply .) within .f = function placeholder .x value iterationUse tilde syntax (~) greater control function - write function normal parentheses, : map(.x = my_list, .f = ~mean(., na.rm = T)). Use syntax particularly value argument change iteration, value .x .Use tilde syntax (~) greater control function - write function normal parentheses, : map(.x = my_list, .f = ~mean(., na.rm = T)). Use syntax particularly value argument change iteration, value .x .output usingmap() list - list object class like vector whose elements can different classes. , list produced map() contain many data frames, many vectors, many single values, even many lists! alternative versions map() explained produce types outputs (e.g. map_dfr() produce data frame, map_chr() produce character vectors, map_dbl() produce numeric vectors).Basic map() always return list, othr variants return different data types.Unlike apply map return one type data, removing potential changing data types occasionally happens using apply.Thre different ways applyig syntax map function","code":"\nmap_df(.x = df, \n       .f = z_score)\n\ndf %>% \n  map_df(z_score)\n\ndf %>% \n    map_df(~z_score(.))"},{"path":"iteration.html","id":"anonymous-functions-1","chapter":"41 Iteration","heading":"41.6 Anonymous functions","text":"previous chapter introduced anonymous functions, plan use function outside particular iteration example, might choose just write directly","code":"\nmap_df(.x = df, \n       .f = function(x) {\n  (x - min(x, na.rm = TRUE)) /  \n  diff(range(x, na.rm = TRUE))\n       }\n)"},{"path":"iteration.html","id":"exercise-for-for-loops","chapter":"41 Iteration","heading":"41.6.1 Exercise for For Loops","text":"part exercise real world example using simple () loops create graphs. data comes Living Planet Index, holds data various vertebrate species collected 1974 2014.First import data:take look using functions loops help us build figures.now four separate R objects holding data four bird species, standard approach might make four figures looking abundance time.want look four plots can use layout functions package patchwork.ok, arguably still requires lot code repetition. used lines code four times recreate four plots functionally . want make changes look plots make four separate edits & mistakes can easily creep .want apply loop, easiest thing first make objects R list:loop length list:now new object my_plots list containing four plots. loop allowed us code details figures , iterate across four different groups.want write loop save four plots - can modify script ?","code":"\nLPI_UK <- read_csv(\"data/LPI_data_loops.csv\")\n# Pick 4 species and make scatterplots with a simple regression model fits that show how the population has varied through time\n\n# Careful with the spelling of the names, it needs to match the names of the species in the LPI.UK dataframe\n\nhouse_sparrow <- filter(LPI_UK, Common.Name == \"House sparrow\")\ngreat_tit <- filter(LPI_UK, Common.Name == \"Great tit\")\ncorn_bunting <- filter(LPI_UK, Common.Name == \"Corn bunting\")\nmeadow_pipit <- filter(LPI_UK, Common.Name == \"Meadow pipit\")\nhouse_sparrow_scatter <- ggplot(house_sparrow, aes (x = year, y = abundance)) +\n    geom_point(size = 2, colour = \"#00868B\") +                                                \n    geom_smooth(method = lm, colour = \"#00868B\", fill = \"#00868B\") +          \n    theme_classic() +\n    labs(y = \"Abundance\\n\", x = \"\", title = \"House sparrow\")\n\ngreat_tit_scatter <- ggplot(great_tit, aes (x = year, y = abundance)) +\n    geom_point(size = 2, colour = \"#00868B\") +                                                \n    geom_smooth(method = lm, colour = \"#00868B\", fill = \"#00868B\") +          \n    theme_classic() +\n    labs(y = \"Abundance\\n\", x = \"\", title = \"Great tit\")\n\ncorn_bunting_scatter <- ggplot(corn_bunting, aes (x = year, y = abundance)) +\n    geom_point(size = 2, colour = \"#00868B\") +                                                \n    geom_smooth(method = lm, colour = \"#00868B\", fill = \"#00868B\") +          \n    theme_classic() +\n    labs(y = \"Abundance\\n\", x = \"\", title = \"Corn bunting\")\n\nmeadow_pipit_scatter <- ggplot(meadow_pipit, aes (x = year, y = abundance)) +\n    geom_point(size = 2, colour = \"#00868B\") +                                                \n    geom_smooth(method = lm, colour = \"#00868B\", fill = \"#00868B\") +          \n    theme_classic() +\n    labs(y = \"Abundance\\n\", x = \"\", title = \"Meadow pipit\")\n# put at the top of your script\nlibrary(patchwork)\n\nlayout <- \"AABB\n           CCDD\"\n\nhouse_sparrow_scatter+\n  great_tit_scatter+\n  corn_bunting_scatter+\n  meadow_pipit_scatter+\n  plot_layout(design=layout)\nSp_list <- list(house_sparrow, great_tit, corn_bunting, meadow_pipit)\nmy_plots <- list(length(Sp_list))\n\nfor (i in 1:length(Sp_list)) {                                    \n  # For every item along the length of Sp_list we want R to perform the following functions\n  data <- as.data.frame(Sp_list[i])                               \n  # Create a dataframe for each species\n  sp.name <- unique(data$Common.Name)                             \n  # Create an object that holds the species name, so that we can title each graph\n  plot <- ggplot(data, aes (x = year, y = abundance)) +               \n    # Make the plots and add our customised theme\n    geom_point(size = 2, colour = \"#00868B\") +                              \n    geom_smooth(method = lm, colour = \"#00868B\", fill = \"#00868B\") +        \n    theme_classic() +\n    labs(y = \"Abundance\\n\", x = \"\", title = sp.name)\n \n   # makes a list of all the plots generates\n  my_plots[[i]] <- plot \n  \n\n\n}\nwrap_plots(my_plots)+\n  plot_layout(design=layout) \n#wrap_plots function from patchwork can take a list of ggplots\nfor (i in 1:length(Sp_list)) {                                    \n  # For every item along the length of Sp_list we want R to perform the following functions\n  data <- as.data.frame(Sp_list[i])                               \n  # Create a dataframe for each species\n  sp.name <- unique(data$Common.Name)                             \n  # Create an object that holds the species name, so that we can title each graph\n  plot <- ggplot(data, aes (x = year, y = abundance)) +               \n    # Make the plots and add our customised theme\n    geom_point(size = 2, colour = \"#00868B\") +                                                \n    geom_smooth(method = lm, colour = \"#00868B\", fill = \"#00868B\") +          \n    theme_classic() +\n    labs(y = \"Abundance\\n\", x = \"\", title = sp.name)\n  \n    if(i %% 1==0){    # The %% operator is the remainder, this handy if line prints a number every time it completes a loop\n    print(i)\n    }\n# use paste to automatically add filename\n  ggsave(plot, file=paste(\"figure/\", sp.name, \".png\", sep=''), dpi=900) \n}"},{"path":"iteration.html","id":"automating-analyses-with-map","chapter":"41 Iteration","heading":"41.7 Automating analyses with map","text":"","code":""},{"path":"iteration.html","id":"writing-a-dataframe-into-multiple-csv-files","chapter":"41 Iteration","heading":"41.7.1 Writing a dataframe into multiple csv files","text":"’ll also use purrr::map() take character values Class column assigning names list. map() transforms input applying function element input, returns vector length input. immediate example, input list_of_dfs apply function dplyr::pull() extract Class variable data frame. repeat approach convert Class character type .character() take single value unique():Exporting list data frames multiple CSV files take lines code, relatively straightforward. three main steps:Define function tells R names CSV file , ’ve called output_csv() . data argument take data frame whilst names argument take character string form part file name individual CSV file.Define function tells R names CSV file , ’ve called output_csv() . data argument take data frame whilst names argument take character string form part file name individual CSV file.Create named list names match arguments function ’ve just defined (data names), contain objects like pass function respective arguments. case, list_of_dfs provide three data frames, names(list_of_dfs) provide names three data frames. necessary running pmap(), view basically super-powered version map() lets iterate multiple inputs simultaneously.Create named list names match arguments function ’ve just defined (data names), contain objects like pass function respective arguments. case, list_of_dfs provide three data frames, names(list_of_dfs) provide names three data frames. necessary running pmap(), view basically super-powered version map() lets iterate multiple inputs simultaneously.map() iterate two sets inputs output_csv() (inputs used arguments), writes three CSV files file names want. “writing” function, either use write_csv() readr (part tidyverse) fwrite() data.table, depending workflow / style.map() iterate two sets inputs output_csv() (inputs used arguments), writes three CSV files file names want. “writing” function, either use write_csv() readr (part tidyverse) fwrite() data.table, depending workflow / style.","code":"\nLPI_list <- LPI %>% \n  group_split(Class)\n [1] \"Actinopterygii\"            \"Amphibia\"                  \"Aves\"                      \"Cephalaspidomorphi\"       \n [5] \"Cetacea\"                   \"Chondrichthyes\"            \"Elasmobranchii\"            \"Holocephali\"              \n [9] \"Mammalia\"                  \"Myxini\"                    \"Perciformes\"               \"Reptilia\"                 \n[13] \"Sarcopterygii\"             \"Testudinidae\"              \"updated by Nancy - Feb/02\"\n\nLPI_list %>% \n  map(~write_csv(.x, \n  paste0(\"data/\", .x$Class[1], \".csv\")))"},{"path":"iteration.html","id":"reading-multiple-csv-files-into-one-object","chapter":"41 Iteration","heading":"41.7.2 Reading multiple csv files into one object","text":"method reading CSV files directory slightly different, ’ll need find way identify create character vector names files want load R. , ’ll use list.files(), produces character vector names files directories named directory:code takes list files, pipes map_df() function runs read_csv file, outputs everything 'nested' dataframe.","code":"\ndata_path <- \"data/\"\n\nlist.files(path = data_path, \n           pattern = \"*.csv\") [1] \"class-Actinopterygii.csv\"     \"class-Amphibia.csv\"           \"class-Aves.csv\"               \"class-Cephalaspidomorphi.csv\"\n [5] \"class-Cetacea.csv\"            \"class-Chondrichthyes.csv\"     \"class-Elasmobranchii.csv\"     \"class-Holocephali.csv\"       \n [9] \"class-Mammalia.csv\"           \"class-Myxini.csv\"             \"class-Perciformes.csv\"        \"class-Reptilia.csv\"          \n[13] \"class-Sarcopterygii.csv\"      \"class-Testudinidae.csv\"\n\ndata <- files %>%\n    map(~read_csv(.)) %>%    # read in all the files individually, using\n    # the function read_csv() from the readr package\n    reduce(rbind)        # reduce with rbind into one dataframe\ndata\n# Keep info on where data came from\n\ndata <- tibble(filename = files) %>% \n  mutate(file_contents = \n           map(filename, \n               ~ read_csv(file.path(data_path, .))))\n\ndata\nunnest(data)"},{"path":"iteration.html","id":"plotting-with-map","chapter":"41 Iteration","heading":"41.7.3 Plotting with map","text":"","code":"\n# map the plots to a dataframe\nnested_plots <- LPI_UK %>% \n    filter(Common.Name == \"House sparrow\" | \n               Common.Name == \"Great tit\" | \n               Common.Name == \"Corn bunting\" | \n               Common.Name == \"Meadow pipit\" ) %>% \n    group_by(Common.Name) %>% \n    nest() %>% \n    mutate(plots = map(data, ~ ggplot(., aes (x = year, y = abundance)) +              \n            geom_point(size = 2, colour = \"#00868B\") +                                                \n            geom_smooth(method = lm, colour = \"#00868B\", fill = \"#00868B\") +          \n            labs(y = \"Abundance\\n\", x = \"\")))\n# print the plots\nprint(nested_plots$plots)## [[1]]\n## \n## [[2]]\n## \n## [[3]]\n## \n## [[4]]"},{"path":"iteration.html","id":"activity-4-test-yourself","chapter":"41 Iteration","heading":"41.8 Activity 4: Test yourself","text":"Question 1. Predict output following executed R:4, 5, 101, 5, 94, 8, 12Question 2. Predict output following executed R:5, 6, 73, 4, 5, 6, 73, 4Question 3. Write function adds two numbers divides results 2.Question 4. Recode values datase. example, survey age data, may want convert crazy values (like anything 0 100) NA. Write function called recode.integer() 3 arguments: x, lb, ub. ’ll assume x numeric vector. function look values x, convert values lb ub NA, return resulting vector. function action:hints: multiple ways solve .","code":"\nfoo=function(d,n,max){\n   nums=seq(from=1, by=d, length.out=n)\n   return(nums[nums <= max])\n}\nfoo(4,5,10)\nfum=function(a,b) {\n  a = a[a<b]\n  return(a)\n}\n\nfum(3:7,(1:5)^2)\naddtwo <- function(num1, num2){\n(num1 + num2)/2\n}\nvector <- c(-5:30)\nrecode.integer(x = vector,\n               lb = 0,\n               ub = 10)\nrecode.integer <- function(x, lb, ub){\n  x[x<lb] <- NA\n  x[x>ub] <- NA\n  return(x)\n}\nrecode.integer <- function(x, lb, ub){\n    x <- x %>% as_tibble() %>% \n      mutate(value = replace(value, value<lb, NA)) %>% \n      mutate(value = replace(value, value>ub, NA))\nreturn(x)}\n\nrecode.numeric <- function(x, lb, ub){\nx <- if_else(x < lb, NA_integer_, x)\nx <- if_else(x > ub, NA_integer_, x)\nreturn(x)\n}"},{"path":"iteration.html","id":"activity-5","chapter":"41 Iteration","heading":"41.9 Activity 5","text":"hungry map() check blogpost","code":""},{"path":"iteration.html","id":"summary-1","chapter":"41 Iteration","heading":"41.10 Summary","text":"Making functions iterations advanced R skills, can often seem daunting. expect implement course, want give insight core programming skills might interested want develop.links may find usefulRStudio education cheat sheet purrRStudio education cheat sheet purrR4DS - intro programmingR4DS - intro programmingEpiR handbookEpiR handbook","code":"\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] here_1.0.1         patchwork_1.1.2    kableExtra_1.3.4   xml2_1.3.5        \n##  [5] rvest_1.0.3        faux_1.2.1         extrafont_0.19     knitr_1.43        \n##  [9] webexercises_1.1.0 glossary_1.0.0     lubridate_1.9.2    forcats_1.0.0     \n## [13] stringr_1.5.0      dplyr_1.1.2        purrr_1.0.1        readr_2.1.4       \n## [17] tidyr_1.3.0        tibble_3.2.1       ggplot2_3.4.2      tidyverse_2.0.0   \n## \n## loaded via a namespace (and not attached):\n##  [1] gtable_0.3.3      xfun_0.39         bslib_0.5.0       tzdb_0.4.0       \n##  [5] vctrs_0.6.3       tools_4.3.1       generics_0.1.3    fansi_1.0.4      \n##  [9] pkgconfig_2.0.3   webshot_0.5.5     lifecycle_1.0.3   compiler_4.3.1   \n## [13] munsell_0.5.0     htmltools_0.5.5   sass_0.4.6        yaml_2.3.7       \n## [17] Rttf2pt1_1.3.12   pillar_1.9.0      jquerylib_0.1.4   extrafontdb_1.0  \n## [21] cachem_1.0.8      tidyselect_1.2.0  digest_0.6.33     stringi_1.7.12   \n## [25] bookdown_0.34     rprojroot_2.0.3   fastmap_1.1.1     grid_4.3.1       \n## [29] colorspace_2.1-0  cli_3.6.1         magrittr_2.0.3    utf8_1.2.3       \n## [33] withr_2.5.0       scales_1.2.1      timechange_0.2.0  rmarkdown_2.23   \n## [37] httr_1.4.6        hms_1.1.3         memoise_2.0.1     evaluate_0.21    \n## [41] viridisLite_0.4.2 rlang_1.1.1       downlit_0.4.3     glue_1.6.2       \n## [45] svglite_2.1.1     rstudioapi_0.15.0 jsonlite_1.8.7    R6_2.5.1         \n## [49] systemfonts_1.0.4 fs_1.6.2"},{"path":"startingR.html","id":"startingR","chapter":"42 Starting up R","heading":"42 Starting up R","text":"One way another, regardless operating system using regardless whether using RStudio, default GUI, even command line, time open R get started. , first thing see (assuming looking R console, ) whole lot text make much sense. look something like :text pretty uninteresting, real data analysis never really pay much attention . important part ...... flashing cursor next . command prompt. see , means R waiting patiently something!","code":"R version 3.0.2 (2013-09-25) -- \"Frisbee Sailing\"\nCopyright (C) 2013 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin10.8.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n> >"},{"path":"startingR.html","id":"firstcommand","chapter":"42 Starting up R","heading":"42.1 Typing commands at the R console","text":"One easiest things can R use simple calculator, good place start. instance, try typing 10 + 20, hitting enter.5 , entered command, R \"execute\" command. see screen now :lot surprises extract. things worth talking , even simple example. Firstly, important understand read extract. example, typed 10 + 20 part. type > symbol: just R command prompt part actual command. neither type [1] 30 part. R printed response command.Secondly, important understand output formatted. Obviously, correct answer sum 10 + 20 30, surprisingly R printed part response. also printed [1] part, probably make lot sense right now. going see lot. talk means bit detail later , now can think [1] 30 R saying \"answer 1st question asked 30\". quite truth, close enough now. case really interesting moment: asked R calculate one thing, obviously one answer printed screen. Later change, [1] part start make bit sense. now, just want get confused concerned .","code":"> 10 + 20\n[1] 30"},{"path":"startingR.html","id":"an-important-digression-about-formatting","chapter":"42 Starting up R","heading":"42.1.1 An important digression about formatting","text":"Now taught rules going change pretty much immediately. want able copy code book directly R want test things conduct analyses. However, copy kind code (shows command prompt results) directly R get errorSo instead, going provide code slightly different format looks like ...two main differences.console, type >, now won’t show command prompt book.book, output commented ##, console appears directly code.two differences mean ’re working electronic version book, can easily copy code book console.example copied two lines code book get ","code":"> 10 + 20\n[1] 30\n10 + 20## [1] 30\n10 + 20\n## [1] 30## [1] 30"},{"path":"startingR.html","id":"be-very-careful-to-avoid-typos","chapter":"42 Starting up R","heading":"42.1.2 Be very careful to avoid typos","text":"go talk types calculations can R, things want point . first thing , R good software, still software. pretty stupid, stupid handle typos. takes faith meant type exactly type. example, suppose forgot hit shift key trying type +, result command ended 10 = 20 rather 10 + 20. happens:happened R attempted interpret 10 = 20 command, spits error message command make sense . human looks , looks keyboard sees + = key, pretty obvious command typo. R know , gets upset. , look perspective, makes sense. R \"knows\" 10 legitimate number, 20 legitimate number, = legitimate part language . words, perspective really look like user meant type 10 = 20, since individual parts statement legitimate stupid realise probably typo. Therefore, R takes faith exactly meant... \"discovers\" command nonsense tries follow instructions, typo . whinges, spits error.Even subtle fact typos produce errors , happen correspond \"well-formed\" R commands. instance, suppose forget hit shift key trying type 10 + 20, also managed press key next one meant . resulting typo produce command 10 - 20. Clearly, R way knowing meant add 20 10, subtract 20 10, happens time :case, R produces right answer, wrong question.extent, stating obvious , important. people wrote R smart. , user, smart. R dumb. dumb, mindlessly obedient. exactly ask . equivalent \"autocorrect\" R, good reason. advanced stuff -- even simplest statistics pretty advanced lot ways -- dangerous let mindless automaton like R try overrule human user. , responsibility careful. Always make sure type exactly mean. dealing computers, enough type \"approximately\" right thing. general, absolutely must precise say R ... like machines stupid anything absurdly literal interpretation.","code":"\n10 = 20## Error in 10 = 20: invalid (do_set) left-hand side to assignment\n10 - 20## [1] -10"},{"path":"startingR.html","id":"r-is-a-bit-flexible-with-spacing","chapter":"42 Starting up R","heading":"42.1.3 R is (a bit) flexible with spacing","text":"course, now uptight importance always precise, point exceptions. , accurately, situations R show bit flexibility previous description suggests. first thing R smart enough ignore redundant spacing. mean , typed 10 + 20 , equally done thisor thisand get exactly answer. However, mean can insert spaces old place. looked startup documentation Section 42 suggested type citation() get information cite R. ...... tells cite R manual (R2013?). see happens try changing spacing. insert spaces word parentheses, inside parentheses , well. , either two commandswill produce exactly response. However, insert spaces middle word. try , R gets upset:Throughout book vary way use spacing little bit, just give feel different ways spacing can used. try much though, since generally considered good practice consistent format commands.","code":"\n10    + 20## [1] 30\n10+20## [1] 30\ncitation()## To cite R in publications use:\n## \n##   R Core Team (2023). _R: A Language and Environment for Statistical\n##   Computing_. R Foundation for Statistical Computing, Vienna, Austria.\n##   <https://www.R-project.org/>.\n## \n## A BibTeX entry for LaTeX users is\n## \n##   @Manual{,\n##     title = {R: A Language and Environment for Statistical Computing},\n##     author = {{R Core Team}},\n##     organization = {R Foundation for Statistical Computing},\n##     address = {Vienna, Austria},\n##     year = {2023},\n##     url = {https://www.R-project.org/},\n##   }\n## \n## We have invested a lot of time and effort in creating R, please cite it\n## when using it for data analysis. See also 'citation(\"pkgname\")' for\n## citing R packages.\ncitation ()\ncitation(  )citat ion()## Error: <text>:1:7: unexpected symbol\n## 1: citat ion\n##           ^"},{"path":"startingR.html","id":"r-can-sometimes-tell-that-youre-not-finished-yet-but-not-often","chapter":"42 Starting up R","heading":"42.1.4 R can sometimes tell that you're not finished yet (but not often)","text":"One thing point . hit enter situation \"obvious\" R actually finished typing command, R just smart enough keep waiting. example, type 10 + press enter, even R smart enough realise probably wanted type another number. happens (illustrative purposes breaking code formatting rules section):blinking cursor next plus sign. means R still waiting finish. \"thinks\" still typing command, tried execute yet. words, plus sign actually another command prompt. different usual one (.e., > symbol) remind R going \"add\" whatever type now typed last time. example, go type 3 hit enter, get :far R concerned, exactly typed 10 + 20. Similarly, consider citation() command talked previous section. Suppose hit enter typing citation(. , R smart enough realise must coming -- since need add ) character -- waits. can even hit enter several times keep waiting:make use lot book. lot commands type pretty long, visually bit easier read break several lines. start , eventually get trouble (happens us ). Maybe start typing command, realise screwed . example,probably prefer R try running command, right? want get situation, just hit 'escape' key.6 R return normal command prompt (.e. >) without attempting execute botched command.said, often case R smart enough tell coming.\ninstance, way add space middle word, hit enter middle word either. hit enter typing citat get error, R thinks interested \"object\" called citat find :typed citation hit enter? case get something odd, something definitely want, least stage. happens:BLAH BLAH BLAH goes rather long time, know enough R yet understand gibberish actually means (course, actually say BLAH BLAH BLAH - says things understand need know edited length) incomprehensible output can quite intimidating novice users, unfortunately easy forget type parentheses; almost certainly accident. panic happens. Simply ignore gibberish. become experienced gibberish start make sense, find quite handy print stuff .7 now just try remember add parentheses typing commands.","code":"> 10+\n+ > 10 +\n+ 20\n[1] 30> citation(\n+ \n+ \n+ )> citblation( \n+ \n+ > citat\nError: object 'citat' not foundcitation\n## function (package = \"base\", lib.loc = NULL, auto = NULL) \n## {\n##     dir <- system.file(package = package, lib.loc = lib.loc)\n##     if (dir == \"\") \n##         stop(gettextf(\"package '%s' not found\", package), domain = NA)\n\nBLAH BLAH BLAH"},{"path":"startingR.html","id":"arithmetic","chapter":"42 Starting up R","heading":"42.2 Doing simple calculations with R","text":"Okay, now discussed tedious details associated typing R commands, get back learning use powerful piece statistical software world $2 calculator. far, know addition. Clearly, calculator addition bit stupid, tell perform simple calculations using R. first, terminology. Addition example \"operation\" can perform (specifically, arithmetic operation), operator performs +. people programming mathematics background, terminology probably feels pretty natural, people might feel like trying make something simple (addition) sound complicated (calling arithmetic operation). extent, true: addition operation interested , 'd bit silly introduce extra terminology. However, go along, start using different kinds operations, probably good idea get language straight now, still talking familiar concepts like addition!","code":""},{"path":"startingR.html","id":"adding-subtracting-multiplying-and-dividing","chapter":"42 Starting up R","heading":"42.2.1 Adding, subtracting, multiplying and dividing","text":", now terminology, learn perform arithmetic operations R. end, Table 42.1 lists operators correspond basic arithmetic learned primary school: addition, subtraction, multiplication division.Table 42.1: Basic arithmetic operations R. five operators used frequently throughout text, important familiar outset.can see, R uses fairly standard symbols denote different operations might want perform: addition done using + operator, subtraction performed - operator, . wanted find 57 times 61 (?), can use R instead calculator, like :handy.","code":"\n57 * 61## [1] 3477"},{"path":"startingR.html","id":"taking-powers","chapter":"42 Starting up R","heading":"42.2.2 Taking powers","text":"first four operations listed Table 42.1 things learned primary school, arithmetic operations built R. three arithmetic operations probably mention: taking powers, integer division, calculating modulus. three, one real importance purposes book taking powers, discuss one : two discussed Chapter ??.can still remember high school maths, familiar. people high school maths long time ago, others us listen hard high school. complicated. sure everyone probably remember moment read , act multiplying number \\(x\\) \\(n\\) times called \"raising \\(x\\) \\(n\\)-th power\". Mathematically, written \\(x^n\\). values \\(n\\) special names: particular \\(x^2\\) called \\(x\\)-squared, \\(x^3\\) called \\(x\\)-cubed. , 4th power 5 calculated like :\n\\[\n5^4 = 5 \\times 5 \\times 5 \\times 5\n\\]One way calculate \\(5^4\\) R type complete multiplication shown equation . , thisbut seem bit tedious. annoying indeed wanted calculate \\(5^{15}\\), since command end quite long. Therefore, make lives easier, use power operator instead. , command calculate \\(5^4\\) goes like :Much easier.","code":"\n5 * 5 * 5 * 5## [1] 625\n5 ^ 4## [1] 625"},{"path":"startingR.html","id":"bedmas","chapter":"42 Starting up R","heading":"42.2.3 Doing calculations in the right order","text":"Okay. point, know take one powerful pieces statistical software world, use $2 calculator. bonus, learned basic programming concepts. nothing (argue just saved $2) hand, much either. order use R effectively, need introduce programming concepts.situations want use calculator, might want multiple calculations. R lets , just typing longer commands. 8 fact, already seen example earlier, typed 5 * 5 * 5 * 5. However, try slightly different example:Clearly, problem R either. However, worth stopping second, thinking R just . Clearly, since gave us answer 9 must multiplied 2 * 4 (get interim answer 8) added 1 . , suppose decided just go left right: R decided instead add 1+2 (get interim answer 3) multiplied 4, come answer 12.answer , need know order operations R uses. remember back high school maths classes, actually order got taught school: \"BEDMAS\" order.9 , first calculate things inside Brackets (), calculate Exponents ^, Division / Multiplication *, Addition + Subtraction -. , continue example , want force R calculate 1+2 part multiplication, enclose brackets:fairly useful thing able . thing point order operations expect two operations priority: , R resolve ties? instance, multiplication division actually priority, expect give R problem like 4 / 2 * 3 solve? evaluates multiplication first division, calculate value two-thirds. evaluates division first calculates value 6. answer, case, R goes left right, case division step come first:said, helpful remember brackets always come first. , ever unsure order R things , easy solution enclose thing want first brackets. nothing stopping typing (4 / 2) * 3. enclosing division brackets make clear thing supposed happen first. instance needed , since R done division first anyway, first starting better make sure R want!","code":"\n1 + 2 * 4## [1] 9\n(1 + 2) * 4 ## [1] 12\n4 / 2 * 3## [1] 6"},{"path":"startingR.html","id":"assign","chapter":"42 Starting up R","heading":"42.3 Storing a number as a variable","text":"One important things able R (programming language, matter) store information variables. Variables R exactly thing variables talked last chapter research methods, similar. conceptual level can think variable label certain piece information, even several different pieces information. statistical analysis R data (variables measured study) stored variables R, well see later book find end creating variables things . However, delve messy details data sets statistical analysis, look basics create variables work .","code":""},{"path":"startingR.html","id":"variable-assignment-using---and--","chapter":"42 Starting up R","heading":"42.3.1 Variable assignment using <- and ->","text":"Since working numbers far, start creating variables store numbers. since people like concrete examples, invent one. Suppose trying calculate much money going make book. several different numbers might want store. Firstly, need figure many copies sell. exactly Harry Potter, assume going sell one copy per student class. 350 sales, create variable called sales. want assign value variable sales, value 350. using assignment operator, <-. :hit enter, R print output.10 just gives another command prompt. However, behind scenes R created variable called sales given value 350. can check happened asking R print variable screen. simplest way type name variable hit enter11.nice know. Anytime remember R got stored particular variable, can just type name variable hit enter.Okay, now know assign variables. Actually, bit know. Firstly, one curious features R several different ways making assignments. addition <- operator, can also use -> =, pretty important understand differences .12 start considering ->, since easy one (discuss use = Section 42.4.1. might expect just looking symbol, almost identical <-. just arrow (.e., assignment) goes left right. wanted define sales variable using ->, write like :effect: still means going sell 350 copies. Sigh. Apart superficial difference, <- -> identical. fact, far R concerned, actually operator, just \"left form\" \"right form\".13","code":"\nsales <- 350\nsales## [1] 350\n350 -> sales"},{"path":"startingR.html","id":"doing-calculations-using-variables","chapter":"42 Starting up R","heading":"42.3.2 Doing calculations using variables","text":"Okay, get back original story. quest become rich, written textbook. figure good strategy , started creating variables R. addition defining sales variable counts number copies going sell, can also create variable called royalty, indicating much money get per copy. say royalties $7 per book:nice thing variables (fact, whole point variables) can anything variable able information stores. , since R allows multiply 350 7it also allows multiply sales royaltyAs far R concerned, sales * royalty command 350 * 7 command. surprisingly, can assign output calculation new variable, call revenue. , new variable revenue gets value 2450. , get R print value revenue can verify done asked:fairly straightforward. slightly subtle thing can reassign value variable, based current value. instance, suppose one students (doubt influence psychotropic drugs) loves book much donates extra $550. simplest way capture command like :calculation, R taken old value revenue (.e., 2450) added 550 value, producing value 3000. new value assigned revenue variable, overwriting previous value. case, now know expecting make $3000 . Pretty sweet, thinks . least, thinks calculation work implied hourly wage making looks like.","code":"\nsales <- 350\nroyalty <- 7\n350 * 7## [1] 2450\nsales * royalty## [1] 2450\nrevenue <- sales * royalty\nrevenue## [1] 2450\nrevenue <- revenue + 550\nrevenue## [1] 3000"},{"path":"startingR.html","id":"rules-and-conventions-for-naming-variables","chapter":"42 Starting up R","heading":"42.3.3 Rules and conventions for naming variables","text":"examples seen far, variable names (sales revenue) just English-language words written using lowercase letters. However, R allows lot flexibility comes naming variables, following list rules14 illustrates:Variable names can use upper case alphabetic characters -Z well lower case characters -z. can also include numeric characters 0-9 variable name, well period . underscore _ character. words, can use SaL.e_s variable name (though think want ), use Sales?.Variable names include spaces: therefore sales valid name, .sales .Variable names case sensitive: , Sales sales different variable names.Variable names must start letter period. use something like _sales 1sales variable name. can use .sales variable name want, usually good idea. convention, variables starting . used special purposes, avoid .Variable names one reserved keywords. special names R needs keep \"safe\" us mere users, use names variables. keywords : , else, repeat, , function, , , next, break, TRUE, FALSE, NULL, Inf, NaN, NA, NA_integer_, NA_real_, NA_complex_, finally, NA_character_. feel especially obliged memorise : make mistake try use one keywords variable name, R complain like whiny little automaton .addition rules R enforces, informal conventions people tend follow naming variables. One already seen: .e., use variables start period. several others. obliged follow conventions, many situations advisable ignore , generally good idea follow can:Use informative variable names. general rule, using meaningful names like sales revenue preferred arbitrary ones like variable1 variable2. Otherwise hard remember contents different variables , becomes hard understand commands actually .Use short variable names. Typing pain -one likes . much prefer use name like sales name like sales...book....reading. Obviously bit tension using informative names (tend long) using short names (tend meaningless), use bit common sense trading two conventions.Use one conventional naming styles multi-word variable names. Suppose want name variable stores \"new salary\". Obviously include spaces variable name, ? three different conventions sometimes see R users employing. Firstly, can separate words using periods, give .new.salary variable name. Alternatively, separate words using underscores, my_new_salary. Finally, use capital letters beginning word (except first one), gives myNewSalary variable name. think strong reason prefer one ,15 important consistent.","code":""},{"path":"startingR.html","id":"usingfunctions","chapter":"42 Starting up R","heading":"42.4 Using functions to do calculations","text":"symbols +, -, * examples operators. seen, can quite lot calculations just using operators. However, order advanced calculations (later , actual statistics), going need start using functions.16 talk detail functions work Section 2.11, now just dive use . get started, suppose wanted take square root 225. square root, case high school maths bit rusty, just opposite squaring number. , instance, since \"5 squared 25\" can say \"5 square root 25\". usual notation \\[\n\\sqrt{25} = 5\n\\]though sometimes also see written like \n\\(25^{0.5} = 5.\\)\nsecond way writing kind useful \"remind\" mathematical fact \"square root \\(x\\)\" actually \"raising \\(x\\) power 0.5\". Personally, never found terribly meaningful psychologically, though admit quite convenient mathematically. Anyway, important. important remember square root , since going need later .calculate square root 25, can head pretty easily, since memorised multiplication tables kid. gets harder numbers get bigger, pretty much impossible whole numbers. something like R comes handy. say wanted calculate \\(\\sqrt{225}\\), square root 225. two ways using R. Firstly, since square root 255 thing raising 225 power 0.5, use power operator ^, just like earlier:However, second way can , since R also provides square root function, sqrt(). calculate square root 255 using function, insert number 225 parentheses. , command type :might expect previous discussion, spaces parentheses purely cosmetic. typed sqrt(225) sqrt( 225   ) gotten result. use function something, generally refer calling function, values type function (can one) referred arguments function.Obviously, sqrt() function really give us new functionality, since already knew square root calculations using power operator ^, though think looks nicer use sqrt(). However, lots functions R: fact, almost everything interest talk book R function kind. example, one function need use book absolute value function. Compared square root function, extremely simple: just converts negative numbers positive numbers, leaves positive numbers alone. Mathematically, absolute value \\(x\\) written \\(|x|\\) sometimes \\(\\mbox{abs}(x)\\). Calculating absolute values R pretty easy, since R provides abs() function can use purpose. feed positive number...absolute value function nothing . feed negative number, spits positive version number, like :honesty, nothing absolute value function just looking number erasing minus sign one. However, places later book use absolute values, thought might good idea explain meaning term early .moving , worth noting -- way R allows us put multiple operations together longer command, like 1 + 2*4 instance -- also lets us put functions together even combine functions operators desire. example, following perfectly legitimate command:R executes command, starts calculating value abs(-8), produces intermediate value 8. done , command simplifies sqrt( 1 + 8 ). solve square root17 first needs add 1 + 8 get 9, point evaluates sqrt(9), finally outputs value 3.","code":"\n225 ^ 0.5## [1] 15\nsqrt( 225 )## [1] 15\nabs( 21 )## [1] 21\nabs( -13 )## [1] 13\nsqrt( 1 + abs(-8) )## [1] 3"},{"path":"startingR.html","id":"functionarguments","chapter":"42 Starting up R","heading":"42.4.1 Function arguments, their names and their defaults","text":"two fairly important things need understand functions work R, use \"named\" arguments, default values\" arguments. surprisingly, say last hear functions work, last things desperately need discuss order get started. understand two concepts , introduce another function. round() function can used round value nearest whole number. example, type :Pretty straightforward, really. However, suppose wanted round two decimal places: , want get 3.14 output. round() function supports , allowing input second argument function specifies number decimal places want round number . words, :happening specified two arguments: first argument number needs rounded (.e., 3.1415), second argument number decimal places rounded (.e., 2), two arguments separated comma. simple example, quite easy remember one argument comes first one comes second, complicated functions easy. Fortunately, R functions make use argument names. round() function, example number needs rounded specified using x argument, number decimal points want rounded specified using digits argument. names available us, can specify arguments function name. like :Notice kind similar spirit variable assignment (Section 42.3), except used = , rather <-. cases specifying specific values associated label. However, differences earlier creating variables, specifying arguments, consequence important use = context.can see, specifying arguments name involves lot typing, also lot easier read. , commands book usually specify arguments name,18 since makes clearer . However, one important thing note specifying arguments using names, matter order type . use argument names, input arguments correct order. words, three commands produce output...one ...find correct order ? different ways, easiest one look help documentation function (see Section ??. However, ever unsure, probably best actually type argument name.Okay, first thing said need know: argument names. second thing need know default values. Notice first time called round() function actually specify digits argument , yet R somehow knew meant round nearest whole number. happen? answer digits argument default value 0, meaning decide specify value digits R act typed digits = 0. quite handy: vast majority time want round number want round nearest whole number, pretty annoying specify digits argument every single time. hand, sometimes actually want round something nearest whole number, even annoying R allow ! Thus, digits = 0 default value, get best worlds.","code":"\nround( 3.1415 )## [1] 3\nround( 3.14165, 2 )## [1] 3.14\nround( x = 3.1415, digits = 2 )## [1] 3.14\nround( 3.14165, 2 )\nround( x = 3.1415, digits = 2 )\nround( digits = 2, x = 3.1415 )## [1] 3.14\n## [1] 3.14\n## [1] 3.14\nround( 2, 3.14165 )## [1] 2"},{"path":"startingR.html","id":"RStudio1","chapter":"42 Starting up R","heading":"42.5 Letting RStudio help you with your commands","text":"Time bit digression. stage know type basic commands, including use R functions. probably beginning dawn lot R functions, arguments. probably also worried going remember ! Thankfully, bad. fact, data analysts bother try remember commands. really use tricks make lives easier. first (arguably important one) use internet. know particular R function works, Google . Second, can look R help documentation. talk two tricks Section ??. right now want call attention couple simple tricks RStudio makes available .","code":""},{"path":"startingR.html","id":"autocomplete-using-tab","chapter":"42 Starting up R","heading":"42.5.1 Autocomplete using \"tab\"","text":"first thing want call attention autocomplete ability RStudio.19Let's stick example assume want round number. time around, start typing name function want, hit \"tab\" key. RStudio display little window like one shown Figure ??. figure, typed letters ro command line, hit tab. window two panels. left, list variables functions start letters typed shown black text, grey text tells variable/function stored. Ignore grey text now: make much sense talked packages Section ??. Figure ?? can see quite things start letters ro: something called rock, something called round, something called round.Date . one want round, typing notice hit tab key window pops top entry (.e., rock) highlighted. can use arrow keys select one want. , none options look right , can hit escape key (\"esc\") left arrow key make window go away.case, thing want round option, select . , see panel right changes. Previously, telling us something rock data set (.e., \"Measurements 48 rock samples...\") distributed part R. select round, displays information round() function, exactly shown Figure ??. display really handy. first thing says round(x, digits = 0): telling round() function two arguments. first argument called x, default value. second argument digits, default value 0. lot situations, information need. RStudio goes bit , provides additional information function underneath. Sometimes additional information helpful, sometimes : RStudio pulls text R help documentation, experience helpfulness documentation varies wildly. Anyway, decided round() function want use, can hit right arrow enter key, RStudio finish typing rest function name .RStudio autocomplete tool works slightly differently already got name function typed now trying type arguments. instance, suppose typed round( console, hit tab. RStudio smart enough recognise already know name function want, already typed ! Instead, figures interested arguments function. pops little window. can see Figure ??. , window two panels, can interact window exactly way window shown Figure ??. left hand panel, can see list argument names. right hand side, displays information selected argument .","code":""},{"path":"startingR.html","id":"browsing-your-command-history","chapter":"42 Starting up R","heading":"42.5.2 Browsing your command history","text":"One thing R automatically keep track \"command history\". , remembers commands previously typed. can access history different ways. simplest way use arrow keys. hit key, R console show recent command typed. Hit , show command . want text screen go away, hit escape20 Using keys can really handy typed long command one typo . Rather type scratch, can use key bring command fix .second way get access command history look history panel RStudio. upper right hand side RStudio window see tab labelled \"History\". Click , see list recent commands displayed panel: look something like Figure ??. double click one commands, copied R console. (can achieve result selecting command want mouse clicking \"Console\" button).21","code":""},{"path":"startingR.html","id":"vectors","chapter":"42 Starting up R","heading":"42.6 Storing many numbers as a vector","text":"point covered functions enough detail get us safely next couple chapters (one small exception: see Section ??, return discussion variables. introduced variables Section 42.3 showed can use variables store single number. section, extend idea look store multiple numbers within one variable. R, name variable can store multiple values vector. create one.","code":""},{"path":"startingR.html","id":"creating-a-vector","chapter":"42 Starting up R","heading":"42.6.1 Creating a vector","text":"stick silly \"get rich quick textbook writing\" example. Suppose textbook company (actually one, ) sends sales data monthly basis. Since class start late February, might expect sales occur towards start year. suppose 100 sales February, 200 sales March 50 sales April, sales rest year. like variable -- call sales..month -- stores sales data. first number stored 0 since sales January, second 100, . simplest way R use combine function, c(). , type numbers want store comma separated list, like :22To use correct terminology , single variable called sales..month: variable vector consists 12 elements.","code":"\nsales.by.month <- c(0, 100, 200, 50, 0, 0, 0, 0, 0, 0, 0, 0)\nsales.by.month##  [1]   0 100 200  50   0   0   0   0   0   0   0   0"},{"path":"startingR.html","id":"a-handy-digression","chapter":"42 Starting up R","heading":"42.6.2 A handy digression","text":"Now learned put information vector, next thing understand pull information back . However, worth taking slight detour. following along, typing commands R , possible output saw printed sales..month vector slightly different showed . happened window (RStudio panel) contains R console really, really narrow. case, might seen output looks something like :much room screen, R printed results three lines. important thing notice. important point first line [1] front , whereas second line starts [5] third [9]. pretty clear happening . first row, R printed 1st element 4th element, starts row [1]. second row, R printed 5th element vector 8th one, begins row [5] can tell glance. might seem bit odd R , ways kindness, especially dealing larger data sets!","code":"\nsales.by.month##  [1]   0 100 200  50\n##  [5]   0   0   0   0\n##  [9]   0   0   0   0"},{"path":"startingR.html","id":"vectorsubset","chapter":"42 Starting up R","heading":"42.6.3 Getting information out of vectors","text":"get back main story, consider problem get information vector. point, might sneaking suspicion answer something [1] [9] things R printing . course correct. Suppose want pull February sales data . February second month year, try :Yep, February sales right. subtle detail aware : notice R outputs [1] 100, [2] 100. R extremely literal. typed sales..month[2], asked R find exactly one thing, one thing happens second element sales..month vector. , outputs [1] 100 R saying first number just asked 100. behaviour makes sense realise can use trick create new variables. example, create february.sales variable like :Obviously, new variable february.sales one element print new variable, R output begins [1] 100 value first () element february.sales. fact also happens value second element sales..month irrelevant. pick topic shortly (Section 42.9).","code":"\nsales.by.month[2]## [1] 100\nfebruary.sales <- sales.by.month[2]\nfebruary.sales## [1] 100"},{"path":"startingR.html","id":"altering-the-elements-of-a-vector","chapter":"42 Starting up R","heading":"42.6.4 Altering the elements of a vector","text":"Sometimes want change values stored vector. Imagine surprise publisher rings tell sales data May wrong. actually additional 25 books sold May, error something told . can fix sales..month variable? One possibility assign whole vector beginning, using c(). lot typing. Also, little wasteful: R redefine sales figures 12 months, 5th one wrong? Fortunately, can tell R change 5th element, using trick:Another way edit variables use edit() fix() functions. discuss detail right now, can check .","code":"\nsales.by.month[5] <- 25\nsales.by.month##  [1]   0 100 200  50  25   0   0   0   0   0   0   0"},{"path":"startingR.html","id":"veclength","chapter":"42 Starting up R","heading":"42.6.5 Useful things to know about vectors","text":"moving , want mention couple things vectors. Firstly, often find wanting know many elements vector (usually forgotten). can use length() function . quite straightforward:Secondly, often want alter elements vector . instance, suppose wanted figure much money made month. Since earning exciting $7 per book (seriously, actually pretty close authors get expensive textbooks expected purchase), want multiply element sales..month vector 7. R makes pretty easy, following example shows:words, multiply vector single number, elements vector get multiplied. true addition, subtraction, division taking powers. neat. hand, suppose wanted know much money making per day, rather per month. Since every month number days, need something slightly different. Firstly, create two new vectors:Obviously, profit variable one created earlier, days.per.month variable pretty straightforward. want divide every element profit corresponding element days.per.month. , R makes pretty easy:still like zeros, matters . Notice second element output 25, R divided second element profit (.e. 700) second element days.per.month (.e. 28). Similarly, third element output equal 1400 divided 31, . talk calculations involving vectors later (particular thing called \"recycling rule\"; Section ??), enough detail now.","code":"\nlength( x = sales.by.month )## [1] 12\nsales.by.month * 7##  [1]    0  700 1400  350  175    0    0    0    0    0    0    0\ndays.per.month <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\nprofit <- sales.by.month * 7\nprofit / days.per.month##  [1]  0.000000 25.000000 45.161290 11.666667  5.645161  0.000000  0.000000\n##  [8]  0.000000  0.000000  0.000000  0.000000  0.000000"},{"path":"startingR.html","id":"text","chapter":"42 Starting up R","heading":"42.7 Storing text data","text":"lot time data numeric nature, always. Sometimes data really needs described using text, using numbers. address , need consider situation variables store text. create variable stores word \"hello\", can type :interpreting , important recognise quote marks part string . just something use make sure R knows treat characters enclose piece text data, known character string. words, R treats \"hello\" string containing word \"hello\"; typed hello instead, R go looking variable name! can also use 'hello' specify character string.Okay, store text. Next, important recognise , R stores entire word \"hello\" single element: greeting variable vector five different letters. Rather, one element, element corresponds entire character string \"hello\". illustrate , actually ask R find first element greeting, prints whole string:course, reason create vector character strings. instance, continue example attempts look monthly sales data book, one variable might want include names 12 months.23 , type command like thisThis character vector containing 12 elements, name month. wanted R tell name fourth month, :","code":"\ngreeting <- \"hello\"\ngreeting## [1] \"hello\"\ngreeting[1]## [1] \"hello\"\nmonths <- c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \n            \"December\")\nmonths[4]## [1] \"April\""},{"path":"startingR.html","id":"simpletext","chapter":"42 Starting up R","heading":"42.7.1 Working with text","text":"Working text data somewhat complicated working numeric data, discuss basic ideas Section ??, purposes current chapter need bare bones sketch. thing want moving show example function can applied text data. far, functions seen (.e., sqrt(), abs() round()) make sense applied numeric data (e.g., calculate square root \"hello\"), seen one function can applied pretty much variable vector (.e., length()). might nice see example function can applied text.function going introduce called nchar(), count number individual characters make string. Recall earlier tried calculate length() greeting variable returned value 1: greeting variable contains one string, happens \"hello\". want know many letters word? Sure, count , boring, point terrible strategy wanted know number letters War Peace. nchar() function helpful:makes sense, since fact 5 letters string \"hello\". Better yet, can apply nchar() whole vectors. , instance, want R tell many letters names 12 months, can :nice know. nchar() function can bit , lot functions can extract information text sorts fancy things. However, goal teach ! goal right now just see example function actually work applied text.","code":"\nnchar( x = greeting )## [1] 5\nnchar( x = months )##  [1] 7 8 5 5 3 4 4 6 9 7 8 8"},{"path":"startingR.html","id":"logicals","chapter":"42 Starting up R","heading":"42.8 Storing \"true or false\" data","text":"Time move onto third kind data. key concept lot R relies idea logical value. logical value assertion whether something true false. implemented R pretty straightforward way. two logical values, namely TRUE FALSE. Despite simplicity, logical values useful things. see work.","code":""},{"path":"startingR.html","id":"assessing-mathematical-truths-1","chapter":"42 Starting up R","heading":"42.8.1 Assessing mathematical truths","text":"George Orwell's classic book 1984, one slogans used totalitarian Party \"two plus two equals five\", idea political domination human freedom becomes complete possible subvert even basic truths. terrifying thought, especially protagonist Winston Smith finally breaks torture agrees proposition. \"Man infinitely malleable\", book says. pretty sure true humans24 definitely true R. R infinitely malleable. rather firm opinions topic true, least regards basic mathematics. ask calculate 2 + 2, always gives answer, bloody 5:course, far R just calculations. asked explicitly assert \\(2+2 = 4\\) true statement. want R make explicit judgement, can use command like :done use equality operator, ==, force R make \"true false\" judgement.25 Okay, see R thinks Party slogan:Booyah! Freedom ponies ! something like . Anyway, worth look happens try force R believe two plus two five making assignment statement like 2 + 2 = 5 2 + 2 <- 5. , happens:R like much. recognises 2 + 2 variable (\"non-language object\" part saying), let try \"reassign\" . R pretty flexible, actually let quite remarkable things redefine parts R , just basic, primitive truths refuses give . change laws addition, change definition number 2.probably best.","code":"\n2 + 2## [1] 4\n2 + 2 == 4## [1] TRUE\n2+2 == 5## [1] FALSE\n2 + 2 = 5## Error in 2 + 2 = 5: target of assignment expands to non-language object"},{"path":"startingR.html","id":"logical-operations","chapter":"42 Starting up R","heading":"42.8.2 Logical operations","text":"now seen logical operations work, far seen simplest possible example. probably surprised discover can combine logical operations operations functions complicated way, like :thisNot , Table 42.2 illustrates, several logical operators can use, corresponding basic mathematical concepts.Table 42.2: logical operators. Technically calling \"binary relational operators\", quite frankly want . book -one can make .Hopefully pretty self-explanatory: example, less operator < checks see number left less number right. less, R returns answer TRUE:two numbers equal, one right larger, R returns answer FALSE, following two examples illustrate:contrast, less equal operator <= exactly says. returns value TRUE number left hand side less equal number right hand side. repeat previous two examples using <=, get:point hope pretty obvious greater operator > greater equal operator >= ! Next list logical operators equal operator != -- others -- says . returns value TRUE things either side identical . Therefore, since \\(2+2\\) equal \\(5\\), get:quite done yet. three logical operations worth knowing , listed Table 42.3.Table 42.3: logical operators.operator !, operator &, operator |. Like logical operators, behaviour less exactly expect given names. instance, ask assess claim \"either \\(2+2 = 4\\) \\(2+2 = 5\\)\" say true. Since \"either-\" statement, need one two parts true. | operator :hand, ask assess claim \"\\(2+2 = 4\\) \\(2+2 = 5\\)\" say false. Since statement need parts true. & operator :Finally, operator, simple annoying describe English. ask assess claim \"true \\(2+2 = 5\\)\" say claim true; claim \"\\(2+2 = 5\\) false\". right. write R command get :words, since 2+2 == 5 FALSE statement, must case !(2+2 == 5) TRUE one. Essentially, really done claim \"false\" thing \"true\". Obviously, really quite right real life. R lives much black white world: R everything either true false. shades gray allowed. can actually see much explicitly, like :course, \\(2+2 = 5\\) example, really need use \"\" ! \"equals \" == two separate operators. just used \"equals \" operator != like :many situations really need use ! operator. see later .26","code":"\n3*3 + 4*4 == 5*5## [1] TRUE\nsqrt( 25 ) == 5## [1] TRUE\n99 < 100## [1] TRUE\n100 < 100\n\n100 < 99## [1] FALSE\n## [1] FALSE\n100 <= 100\n\n100 <= 99## [1] TRUE\n## [1] FALSE\n2 + 2 != 5## [1] TRUE\n(2+2 == 4) | (2+2 == 5)## [1] TRUE\n(2+2 == 4) & (2+2 == 5)## [1] FALSE\n! (2+2 == 5)## [1] TRUE\n! FALSE## [1] TRUE\n2+2 != 5## [1] TRUE"},{"path":"startingR.html","id":"storing-and-using-logical-data","chapter":"42 Starting up R","heading":"42.8.3 Storing and using logical data","text":"point, introduced numeric data (Sections 42.3 2.6) character data (Section 24.8). might surprised discover TRUE FALSE values R producing actually third kind data, called logical data. , asked R 2 + 2 == 5 said [1] FALSE reply, actually producing information can store variables. instance, create variable called ..Party.correct, store R's opinion:Alternatively, can assign value directly, typing TRUE FALSE command. Like :Better yet, kind tedious type TRUE FALSE , R provides shortcut: can use T F instead (case sensitive: t f work).27 works::","code":"\nis.the.Party.correct <- 2 + 2 == 5\nis.the.Party.correct## [1] FALSE\nis.the.Party.correct <- FALSE\nis.the.Party.correct## [1] FALSE\nis.the.Party.correct <- F\nis.the.Party.correct## [1] FALSE\nis.the.Party.correct <- f## Error in eval(expr, envir, enclos): object 'f' not found"},{"path":"startingR.html","id":"vectors-of-logicals","chapter":"42 Starting up R","heading":"42.8.4 Vectors of logicals","text":"next thing mention can store vectors logical values exactly way can store vectors numbers (Section 2.6) vectors text data (Section 24.8). , can define directly via c() function, like :can produce vector logicals applying logical operator vector. might make lot sense , unpack slowly. First, suppose vector numbers (.e., \"non-logical vector\"). instance, use sales..month vector using Section 2.6. Suppose wanted R tell , month year, whether actually sold book month. can typing :, can store vector want, example illustrates:words, .sales..month logical vector whose elements TRUE corresponding element sales..month greater zero. instance, since sold zero books January, first element FALSE.","code":"\nx <- c(TRUE, TRUE, FALSE)\nx## [1]  TRUE  TRUE FALSE\nsales.by.month > 0##  [1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n## [12] FALSE\nany.sales.this.month <- sales.by.month > 0\nany.sales.this.month##  [1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n## [12] FALSE"},{"path":"startingR.html","id":"logictext","chapter":"42 Starting up R","heading":"42.8.5 Applying logical operation to text","text":"moment (Section 42.9) show logical operations logical vectors handy, want briefly point can apply text well logical data. just need bit careful understanding R interprets different operations. section talk equal operator == applies text, since important one. Obviously, equal operator != gives exact opposite answers == implicitly talking one , give specific commands showing use !=. operators, defer detailed discussion topic Section ??.Okay, see works. one sense, simple. instance, can ask R word \"cat\" word \"dog\", like :pretty obvious, good know even R can figure . Similarly, R recognise \"cat\" \"cat\":, exactly expect. However, need keep mind R tolerant comes grammar spacing. two strings differ way whatsoever, R say equal , following examples indicate:","code":"\n\"cat\" == \"dog\"## [1] FALSE\n\"cat\" == \"cat\"## [1] TRUE\n\" cat\" == \"cat\"\n\n\"cat\" == \"CAT\"\n\n\"cat\" == \"c a t\"## [1] FALSE\n## [1] FALSE\n## [1] FALSE"},{"path":"startingR.html","id":"indexing","chapter":"42 Starting up R","heading":"42.9 Indexing vectors","text":"One last thing add finishing chapter. far, whenever get information vector, done typed something like months[4]; R prints fourth element months vector. section, show two additional tricks getting information vector.","code":""},{"path":"startingR.html","id":"extracting-multiple-elements","chapter":"42 Starting up R","heading":"42.9.1 Extracting multiple elements","text":"One useful thing can pull one element time. previous example, used single number (.e., 2) indicate element wanted. Alternatively, can use vector. , suppose wanted data February, March April. use vector c(2,3,4) indicate elements want R pull . , type :Notice order matters . asked data reverse order (.e., April first, March, February) using vector c(4,3,2), R outputs data reverse order:second thing aware R provides handy shortcuts common situations. instance, suppose wanted extract everything 2nd month 8th month. One way thing , use vector c(2,3,4,5,6,7,8) indicate elements want. works just finebut kind lot typing. help make easier, R lets use 2:8 shorthand c(2,3,4,5,6,7,8), makes things lot simpler. First, just check true:Next, check can use 2:8 shorthand way pull 2nd 8th elements sales..months:kind neat.","code":"\nsales.by.month[ c(2,3,4) ]## [1] 100 200  50\nsales.by.month[ c(4,3,2) ]## [1]  50 200 100\nsales.by.month[ c(2,3,4,5,6,7,8) ]## [1] 100 200  50  25   0   0   0\n2:8## [1] 2 3 4 5 6 7 8\nsales.by.month[2:8]## [1] 100 200  50  25   0   0   0"},{"path":"startingR.html","id":"logical-indexing","chapter":"42 Starting up R","heading":"42.9.2 Logical indexing","text":"point, can introduce extremely useful tool called logical indexing. last section, created logical vector .sales..month, whose elements TRUE month sold least one book, FALSE others. However, big long list TRUEs FALSEs little bit hard read, like R select names months sold books. Earlier , created vector months contains names months. logical indexing handy. need :understand happening , helpful notice sales..month > 0 logical expression used create .sales..month vector last section. fact, just done :gotten exactly result. order figure elements months include output, R look see corresponding element .sales..month TRUE. Thus, since element 1 .sales..month FALSE, R include \"January\" part output; since element 2 .sales..month TRUE, R include \"February\" output. Note reason use trick find actual sales numbers months. command just :fact, can thing text. example. Suppose -- continue saga textbook sales -- later find bookshop sufficient stocks months year. tell early year \"high\" stocks, dropped \"low\" levels, fact one month \"\" copies book able replenish . Thus might variable called stock.levels looks like :Thus, want know months bookshop book, apply logical indexing trick, character vector stock.levels, like :Alternatively, want know bookshop either low copies copies, :thisEither way, get answer want.point, hope can see logical indexing useful thing. basic, yet powerful way manipulate data. talk lot manipulate data Chapter ??, since critical skill real world research often overlooked introductory research methods classes (least, experience). take bit practice become completely comfortable using logical indexing, good idea play around sorts commands. Try creating different variables , ask questions like \"get R spit elements [blah]\". Practice makes perfect, practicing logical indexing perfect art yelling frustrated insults computer.28","code":"\nmonths[ sales.by.month > 0 ]## [1] \"February\" \"March\"    \"April\"    \"May\"\nmonths[ any.sales.this.month ]## [1] \"February\" \"March\"    \"April\"    \"May\"\nsales.by.month [ sales.by.month > 0 ]## [1] 100 200  50  25\nstock.levels<-c(\"high\", \"high\", \"low\", \"out\", \"out\", \"high\",\n                \"high\", \"high\", \"high\", \"high\", \"high\", \"high\")\n\nstock.levels##  [1] \"high\" \"high\" \"low\"  \"out\"  \"out\"  \"high\" \"high\" \"high\" \"high\" \"high\"\n## [11] \"high\" \"high\"\nmonths[stock.levels == \"out\"]## [1] \"April\" \"May\"\nmonths[stock.levels == \"out\" | stock.levels == \"low\"]## [1] \"March\" \"April\" \"May\"\nmonths[stock.levels != \"high\" ]## [1] \"March\" \"April\" \"May\""},{"path":"startingR.html","id":"quitting-r","chapter":"42 Starting up R","heading":"42.10 Quitting R","text":"one last thing cover chapter: quit R. say , trying imply R kind pathological addition need call R QuitLine wear patches control cravings (although certainly might argue something seriously pathological addicted R). just mean exit program. Assuming running R usual way (.e., RStudio default GUI Windows Mac computer), can just shut application normal way. However, R also function, called q() can use quit, pretty handy running R terminal window.Regardless method use quit R, first time R probably ask want save \"workspace image\". talk lot loading saving data Section ??, figured better quickly cover now otherwise going get annoyed close R end chapter. using RStudio, see dialog box looks like one shown Figure ??. using text based interface see :y/n/c part short \"yes / / cancel\". Type y want save, n , c changed mind want quit .actually mean? going R wants know want save variables creating, can use later. sounds like great idea, really tempting type y click \"Save\" button. honest though, rarely , kind annoys little bit... R really asking want store variables \"default\" data file, automatically reload next time open R. quite frankly, wanted save variables, already saved trying quit. , saved location choice, can find later. personally never bother .fact, every time install R new machine one first things change settings never asks . can RStudio really easily: use menu system find RStudio option; dialog box comes give option tell R never whine (see Figure ??. Mac, can open window going \"RStudio\" menu selecting \"Preferences\". Windows machine go \"Tools\" menu select \"Global Options\". \"General\" tab see option reads \"Save workspace .Rdata exit\". default set \"ask\". want R stop asking, change \"never\".","code":"\nq()\n\n## Save workspace image? [y/n/c]: "},{"path":"startingR.html","id":"summary-2","chapter":"42 Starting up R","heading":"42.11 Summary","text":"Every book tries introduce basic programming ideas novices cover roughly topics, roughly order. Mine exception, grand tradition just way everyone else , chapter covered following topics:Getting started. downloaded installed R RStudioBasic commands. talked bit logic R works particular type commands R console (Section @ref(#firstcommand), learned perform basic calculations using arithmetic operators +, -, *, / ^.Introduction functions. saw several different functions, three used perform numeric calculations (sqrt(), abs(), round(), one applies text (nchar(); Section 42.7.1), one works variable (length(); Section 42.6.5). , talked bit argument names work, learned default values arguments. (Section 42.4.1)Introduction variables. learned basic idea behind variables, assign values variables using assignment operator <- (Section 42.3). also learned create vectors using combine function c() (Section 2.6).Data types. Learned distinction numeric, character logical data; including basics enter use . (Sections 42.3 42.8)Logical operations. Learned use logical operators ==, !=, <, >, <=, =>, !, & |. learned use logical indexing. (Section 42.9)","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"session-1-foundations-of-programming-in-r","chapter":"43 Session 1: Foundations of Programming in R","heading":"43 Session 1: Foundations of Programming in R","text":"","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"introduction-to-r-and-rstudio-30-minutes","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.1 Introduction to R and RStudio (30 minutes)","text":"Brief overview R applications data analysis programming.\nIntroduction RStudio integrated development environment (IDE) R.\nNavigating RStudio interface: scripts, console, environment, plots.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"objects-variables-and-data-types-1-hour","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.2 Objects, Variables, and Data Types (1 hour)","text":"Understanding concept objects R: vectors, matrices, data frames, lists.\nAssigning values variables creating different data types.\nBasic operations objects: arithmetic, indexing, subsetting.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"good-coding-practices-and-style-1-hour","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.3 Good Coding Practices and Style (1 hour)","text":"Importance clean readable code.\nNaming conventions variables, functions, objects.\nIndentation, spacing, commenting code clarity.\nIntroduction linting tools code style checking.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"control-flow-if-else-statements-1-hour","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.4 Control Flow: If-Else Statements (1 hour)","text":"Introduction control structures conditional execution.\nWriting -else statements decision-making code.\nHandling multiple conditions using nested -else statements.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"writing-functions-in-r-1-hour","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.5 Writing Functions in R (1 hour)","text":"Understanding role benefits functions programming.\nCreating custom functions using function() keyword.\nPassing arguments functions returning values.\nBest practices function design documentation.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"hands-on-exercises-and-practice-30-minutes","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.6 Hands-On Exercises and Practice (30 minutes)","text":"Interactive coding exercises reinforce concepts learned.\nApplying -else statements writing basic functions.\nEncouraging participants practice coding RStudio.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"nucleotide-generator","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.7 Nucleotide generator","text":"","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"note-use-numbers","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.7.1 Note use numbers","text":"use nucleotide generator get base back, use function sample() sample one element . ’ll get new (maybe different) base time roll :Every argument every R function name. can specify data assigned argument setting name equal data, preceding code. becomes important begin pass multiple arguments function; names help avoid passing wrong data wrong argument. However, using names optional. notice R users often use name first argument function. might see previous code written :Often, name first argument descriptive, usually obvious first piece data refers anyways.know argument names use? try use name function expect, likely get error:","code":"\n# Create a vector representing the nucleotide bases A, T, C, and G\nnucleotides <- c(\"A\", \"T\", \"C\", \"G\")\nnucleotides## [1] \"A\" \"T\" \"C\" \"G\"sample(x = nucleotides, size = 1)\n## A\n\nsample(x = nucleotides, size = 1)\n## C\n\nsample(x = nucleotides, size = 1)\n## G\nsample(nucleotides, 1)## [1] \"G\""},{"path":"session-1-foundations-of-programming-in-r.html","id":"startingR","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.7.2 Starting up R","text":"One way another, regardless operating system using regardless whether using RStudio, default GUI, even command line, time open R get started. , first thing see (assuming looking R console, ) whole lot text make much sense. look something like :text pretty uninteresting, real data analysis never really pay much attention . important part ...... flashing cursor next . command prompt. see , means R waiting patiently something!","code":"R version 3.0.2 (2013-09-25) -- \"Frisbee Sailing\"\nCopyright (C) 2013 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin10.8.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n> >"},{"path":"session-1-foundations-of-programming-in-r.html","id":"firstcommand","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.8 Typing commands at the R console","text":"One easiest things can R use simple calculator, good place start. instance, try typing 10 + 20, hitting enter.29 , entered command, R \"execute\" command. see screen now :lot surprises extract. things worth talking , even simple example. Firstly, important understand read extract. example, typed 10 + 20 part. type > symbol: just R command prompt part actual command. neither type [1] 30 part. R printed response command.Secondly, important understand output formatted. Obviously, correct answer sum 10 + 20 30, surprisingly R printed part response. also printed [1] part, probably make lot sense right now. going see lot. talk means bit detail later , now can think [1] 30 R saying \"answer 1st question asked 30\". quite truth, close enough now. case really interesting moment: asked R calculate one thing, obviously one answer printed screen. Later change, [1] part start make bit sense. now, just want get confused concerned .","code":"> 10 + 20\n[1] 30"},{"path":"session-1-foundations-of-programming-in-r.html","id":"an-important-digression-about-formatting-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.8.1 An important digression about formatting","text":"Now taught rules going change pretty much immediately. want able copy code book directly R want test things conduct analyses. However, copy kind code (shows command prompt results) directly R get errorSo instead, going provide code slightly different format looks like ...two main differences.console, type >, now won’t show command prompt book.book, output commented ##, console appears directly code.two differences mean ’re working electronic version book, can easily copy code book console.example copied two lines code book get ","code":"> 10 + 20\n[1] 30\n10 + 20## [1] 30\n10 + 20\n## [1] 30## [1] 30"},{"path":"session-1-foundations-of-programming-in-r.html","id":"be-very-careful-to-avoid-typos-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.8.2 Be very careful to avoid typos","text":"go talk types calculations can R, things want point . first thing , R good software, still software. pretty stupid, stupid handle typos. takes faith meant type exactly type. example, suppose forgot hit shift key trying type +, result command ended 10 = 20 rather 10 + 20. happens:happened R attempted interpret 10 = 20 command, spits error message command make sense . human looks , looks keyboard sees + = key, pretty obvious command typo. R know , gets upset. , look perspective, makes sense. R \"knows\" 10 legitimate number, 20 legitimate number, = legitimate part language . words, perspective really look like user meant type 10 = 20, since individual parts statement legitimate stupid realise probably typo. Therefore, R takes faith exactly meant... \"discovers\" command nonsense tries follow instructions, typo . whinges, spits error.Even subtle fact typos produce errors , happen correspond \"well-formed\" R commands. instance, suppose forget hit shift key trying type 10 + 20, also managed press key next one meant . resulting typo produce command 10 - 20. Clearly, R way knowing meant add 20 10, subtract 20 10, happens time :case, R produces right answer, wrong question.extent, stating obvious , important. people wrote R smart. , user, smart. R dumb. dumb, mindlessly obedient. exactly ask . equivalent \"autocorrect\" R, good reason. advanced stuff -- even simplest statistics pretty advanced lot ways -- dangerous let mindless automaton like R try overrule human user. , responsibility careful. Always make sure type exactly mean. dealing computers, enough type \"approximately\" right thing. general, absolutely must precise say R ... like machines stupid anything absurdly literal interpretation.","code":"\n10 = 20## Error in 10 = 20: invalid (do_set) left-hand side to assignment\n10 - 20## [1] -10"},{"path":"session-1-foundations-of-programming-in-r.html","id":"r-is-a-bit-flexible-with-spacing-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.8.3 R is (a bit) flexible with spacing","text":"course, now uptight importance always precise, point exceptions. , accurately, situations R show bit flexibility previous description suggests. first thing R smart enough ignore redundant spacing. mean , typed 10 + 20 , equally done thisor thisand get exactly answer. However, mean can insert spaces old place. looked startup documentation Section 42 suggested type citation() get information cite R. ...... tells cite R manual (R2013?). see happens try changing spacing. insert spaces word parentheses, inside parentheses , well. , either two commandswill produce exactly response. However, insert spaces middle word. try , R gets upset:Throughout book vary way use spacing little bit, just give feel different ways spacing can used. try much though, since generally considered good practice consistent format commands.","code":"\n10    + 20## [1] 30\n10+20## [1] 30\ncitation()## To cite R in publications use:\n## \n##   R Core Team (2023). _R: A Language and Environment for Statistical\n##   Computing_. R Foundation for Statistical Computing, Vienna, Austria.\n##   <https://www.R-project.org/>.\n## \n## A BibTeX entry for LaTeX users is\n## \n##   @Manual{,\n##     title = {R: A Language and Environment for Statistical Computing},\n##     author = {{R Core Team}},\n##     organization = {R Foundation for Statistical Computing},\n##     address = {Vienna, Austria},\n##     year = {2023},\n##     url = {https://www.R-project.org/},\n##   }\n## \n## We have invested a lot of time and effort in creating R, please cite it\n## when using it for data analysis. See also 'citation(\"pkgname\")' for\n## citing R packages.\ncitation ()\ncitation(  )citat ion()## Error: <text>:1:7: unexpected symbol\n## 1: citat ion\n##           ^"},{"path":"session-1-foundations-of-programming-in-r.html","id":"r-can-sometimes-tell-that-youre-not-finished-yet-but-not-often-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.8.4 R can sometimes tell that you're not finished yet (but not often)","text":"One thing point . hit enter situation \"obvious\" R actually finished typing command, R just smart enough keep waiting. example, type 10 + press enter, even R smart enough realise probably wanted type another number. happens (illustrative purposes breaking code formatting rules section):blinking cursor next plus sign. means R still waiting finish. \"thinks\" still typing command, tried execute yet. words, plus sign actually another command prompt. different usual one (.e., > symbol) remind R going \"add\" whatever type now typed last time. example, go type 3 hit enter, get :far R concerned, exactly typed 10 + 20. Similarly, consider citation() command talked previous section. Suppose hit enter typing citation(. , R smart enough realise must coming -- since need add ) character -- waits. can even hit enter several times keep waiting:make use lot book. lot commands type pretty long, visually bit easier read break several lines. start , eventually get trouble (happens us ). Maybe start typing command, realise screwed . example,probably prefer R try running command, right? want get situation, just hit 'escape' key.30 R return normal command prompt (.e. >) without attempting execute botched command.said, often case R smart enough tell coming.\ninstance, way add space middle word, hit enter middle word either. hit enter typing citat get error, R thinks interested \"object\" called citat find :typed citation hit enter? case get something odd, something definitely want, least stage. happens:BLAH BLAH BLAH goes rather long time, know enough R yet understand gibberish actually means (course, actually say BLAH BLAH BLAH - says things understand need know edited length) incomprehensible output can quite intimidating novice users, unfortunately easy forget type parentheses; almost certainly accident. panic happens. Simply ignore gibberish. become experienced gibberish start make sense, find quite handy print stuff .31 now just try remember add parentheses typing commands.","code":"> 10+\n+ > 10 +\n+ 20\n[1] 30> citation(\n+ \n+ \n+ )> citblation( \n+ \n+ > citat\nError: object 'citat' not foundcitation\n## function (package = \"base\", lib.loc = NULL, auto = NULL) \n## {\n##     dir <- system.file(package = package, lib.loc = lib.loc)\n##     if (dir == \"\") \n##         stop(gettextf(\"package '%s' not found\", package), domain = NA)\n\nBLAH BLAH BLAH"},{"path":"session-1-foundations-of-programming-in-r.html","id":"arithmetic","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.9 Doing simple calculations with R","text":"Okay, now discussed tedious details associated typing R commands, get back learning use powerful piece statistical software world $2 calculator. far, know addition. Clearly, calculator addition bit stupid, tell perform simple calculations using R. first, terminology. Addition example \"operation\" can perform (specifically, arithmetic operation), operator performs +. people programming mathematics background, terminology probably feels pretty natural, people might feel like trying make something simple (addition) sound complicated (calling arithmetic operation). extent, true: addition operation interested , 'd bit silly introduce extra terminology. However, go along, start using different kinds operations, probably good idea get language straight now, still talking familiar concepts like addition!","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"adding-subtracting-multiplying-and-dividing-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.9.1 Adding, subtracting, multiplying and dividing","text":", now terminology, learn perform arithmetic operations R. end, Table 42.1 lists operators correspond basic arithmetic learned primary school: addition, subtraction, multiplication division.Table 42.1: Basic arithmetic operations R. five operators used frequently throughout text, important familiar outset.can see, R uses fairly standard symbols denote different operations might want perform: addition done using + operator, subtraction performed - operator, . wanted find 57 times 61 (?), can use R instead calculator, like :handy.","code":"\n57 * 61## [1] 3477"},{"path":"session-1-foundations-of-programming-in-r.html","id":"taking-powers-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.9.2 Taking powers","text":"first four operations listed Table 42.1 things learned primary school, arithmetic operations built R. three arithmetic operations probably mention: taking powers, integer division, calculating modulus. three, one real importance purposes book taking powers, discuss one : two discussed Chapter ??.can still remember high school maths, familiar. people high school maths long time ago, others us listen hard high school. complicated. sure everyone probably remember moment read , act multiplying number \\(x\\) \\(n\\) times called \"raising \\(x\\) \\(n\\)-th power\". Mathematically, written \\(x^n\\). values \\(n\\) special names: particular \\(x^2\\) called \\(x\\)-squared, \\(x^3\\) called \\(x\\)-cubed. , 4th power 5 calculated like :\n\\[\n5^4 = 5 \\times 5 \\times 5 \\times 5\n\\]One way calculate \\(5^4\\) R type complete multiplication shown equation . , thisbut seem bit tedious. annoying indeed wanted calculate \\(5^{15}\\), since command end quite long. Therefore, make lives easier, use power operator instead. , command calculate \\(5^4\\) goes like :Much easier.","code":"\n5 * 5 * 5 * 5## [1] 625\n5 ^ 4## [1] 625"},{"path":"session-1-foundations-of-programming-in-r.html","id":"bedmas","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.9.3 Doing calculations in the right order","text":"Okay. point, know take one powerful pieces statistical software world, use $2 calculator. bonus, learned basic programming concepts. nothing (argue just saved $2) hand, much either. order use R effectively, need introduce programming concepts.situations want use calculator, might want multiple calculations. R lets , just typing longer commands. 32 fact, already seen example earlier, typed 5 * 5 * 5 * 5. However, try slightly different example:Clearly, problem R either. However, worth stopping second, thinking R just . Clearly, since gave us answer 9 must multiplied 2 * 4 (get interim answer 8) added 1 . , suppose decided just go left right: R decided instead add 1+2 (get interim answer 3) multiplied 4, come answer 12.answer , need know order operations R uses. remember back high school maths classes, actually order got taught school: \"BEDMAS\" order.33 , first calculate things inside Brackets (), calculate Exponents ^, Division / Multiplication *, Addition + Subtraction -. , continue example , want force R calculate 1+2 part multiplication, enclose brackets:fairly useful thing able . thing point order operations expect two operations priority: , R resolve ties? instance, multiplication division actually priority, expect give R problem like 4 / 2 * 3 solve? evaluates multiplication first division, calculate value two-thirds. evaluates division first calculates value 6. answer, case, R goes left right, case division step come first:said, helpful remember brackets always come first. , ever unsure order R things , easy solution enclose thing want first brackets. nothing stopping typing (4 / 2) * 3. enclosing division brackets make clear thing supposed happen first. instance needed , since R done division first anyway, first starting better make sure R want!","code":"\n1 + 2 * 4## [1] 9\n(1 + 2) * 4 ## [1] 12\n4 / 2 * 3## [1] 6"},{"path":"session-1-foundations-of-programming-in-r.html","id":"assign","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.10 Storing a number as a variable","text":"One important things able R (programming language, matter) store information variables. Variables R exactly thing variables talked last chapter research methods, similar. conceptual level can think variable label certain piece information, even several different pieces information. statistical analysis R data (variables measured study) stored variables R, well see later book find end creating variables things . However, delve messy details data sets statistical analysis, look basics create variables work .","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"variable-assignment-using---and---1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.10.1 Variable assignment using <- and ->","text":"Since working numbers far, start creating variables store numbers. since people like concrete examples, invent one. Suppose trying calculate much money going make book. several different numbers might want store. Firstly, need figure many copies sell. exactly Harry Potter, assume going sell one copy per student class. 350 sales, create variable called sales. want assign value variable sales, value 350. using assignment operator, <-. :hit enter, R print output.34 just gives another command prompt. However, behind scenes R created variable called sales given value 350. can check happened asking R print variable screen. simplest way type name variable hit enter35.nice know. Anytime remember R got stored particular variable, can just type name variable hit enter.Okay, now know assign variables. Actually, bit know. Firstly, one curious features R several different ways making assignments. addition <- operator, can also use -> =, pretty important understand differences .36 start considering ->, since easy one (discuss use = Section 42.4.1. might expect just looking symbol, almost identical <-. just arrow (.e., assignment) goes left right. wanted define sales variable using ->, write like :effect: still means going sell 350 copies. Sigh. Apart superficial difference, <- -> identical. fact, far R concerned, actually operator, just \"left form\" \"right form\".37","code":"\nsales <- 350\nsales## [1] 350\n350 -> sales"},{"path":"session-1-foundations-of-programming-in-r.html","id":"doing-calculations-using-variables-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.10.2 Doing calculations using variables","text":"Okay, get back original story. quest become rich, written textbook. figure good strategy , started creating variables R. addition defining sales variable counts number copies going sell, can also create variable called royalty, indicating much money get per copy. say royalties $7 per book:nice thing variables (fact, whole point variables) can anything variable able information stores. , since R allows multiply 350 7it also allows multiply sales royaltyAs far R concerned, sales * royalty command 350 * 7 command. surprisingly, can assign output calculation new variable, call revenue. , new variable revenue gets value 2450. , get R print value revenue can verify done asked:fairly straightforward. slightly subtle thing can reassign value variable, based current value. instance, suppose one students (doubt influence psychotropic drugs) loves book much donates extra $550. simplest way capture command like :calculation, R taken old value revenue (.e., 2450) added 550 value, producing value 3000. new value assigned revenue variable, overwriting previous value. case, now know expecting make $3000 . Pretty sweet, thinks . least, thinks calculation work implied hourly wage making looks like.","code":"\nsales <- 350\nroyalty <- 7\n350 * 7## [1] 2450\nsales * royalty## [1] 2450\nrevenue <- sales * royalty\nrevenue## [1] 2450\nrevenue <- revenue + 550\nrevenue## [1] 3000"},{"path":"session-1-foundations-of-programming-in-r.html","id":"rules-and-conventions-for-naming-variables-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.10.3 Rules and conventions for naming variables","text":"examples seen far, variable names (sales revenue) just English-language words written using lowercase letters. However, R allows lot flexibility comes naming variables, following list rules38 illustrates:Variable names can use upper case alphabetic characters -Z well lower case characters -z. can also include numeric characters 0-9 variable name, well period . underscore _ character. words, can use SaL.e_s variable name (though think want ), use Sales?.Variable names include spaces: therefore sales valid name, .sales .Variable names case sensitive: , Sales sales different variable names.Variable names must start letter period. use something like _sales 1sales variable name. can use .sales variable name want, usually good idea. convention, variables starting . used special purposes, avoid .Variable names one reserved keywords. special names R needs keep \"safe\" us mere users, use names variables. keywords : , else, repeat, , function, , , next, break, TRUE, FALSE, NULL, Inf, NaN, NA, NA_integer_, NA_real_, NA_complex_, finally, NA_character_. feel especially obliged memorise : make mistake try use one keywords variable name, R complain like whiny little automaton .addition rules R enforces, informal conventions people tend follow naming variables. One already seen: .e., use variables start period. several others. obliged follow conventions, many situations advisable ignore , generally good idea follow can:Use informative variable names. general rule, using meaningful names like sales revenue preferred arbitrary ones like variable1 variable2. Otherwise hard remember contents different variables , becomes hard understand commands actually .Use short variable names. Typing pain -one likes . much prefer use name like sales name like sales...book....reading. Obviously bit tension using informative names (tend long) using short names (tend meaningless), use bit common sense trading two conventions.Use one conventional naming styles multi-word variable names. Suppose want name variable stores \"new salary\". Obviously include spaces variable name, ? three different conventions sometimes see R users employing. Firstly, can separate words using periods, give .new.salary variable name. Alternatively, separate words using underscores, my_new_salary. Finally, use capital letters beginning word (except first one), gives myNewSalary variable name. think strong reason prefer one ,39 important consistent.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"usingfunctions","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.11 Using functions to do calculations","text":"symbols +, -, * examples operators. seen, can quite lot calculations just using operators. However, order advanced calculations (later , actual statistics), going need start using functions.40 talk detail functions work Section 2.11, now just dive use . get started, suppose wanted take square root 225. square root, case high school maths bit rusty, just opposite squaring number. , instance, since \"5 squared 25\" can say \"5 square root 25\". usual notation \\[\n\\sqrt{25} = 5\n\\]though sometimes also see written like \n\\(25^{0.5} = 5.\\)\nsecond way writing kind useful \"remind\" mathematical fact \"square root \\(x\\)\" actually \"raising \\(x\\) power 0.5\". Personally, never found terribly meaningful psychologically, though admit quite convenient mathematically. Anyway, important. important remember square root , since going need later .calculate square root 25, can head pretty easily, since memorised multiplication tables kid. gets harder numbers get bigger, pretty much impossible whole numbers. something like R comes handy. say wanted calculate \\(\\sqrt{225}\\), square root 225. two ways using R. Firstly, since square root 255 thing raising 225 power 0.5, use power operator ^, just like earlier:However, second way can , since R also provides square root function, sqrt(). calculate square root 255 using function, insert number 225 parentheses. , command type :might expect previous discussion, spaces parentheses purely cosmetic. typed sqrt(225) sqrt( 225   ) gotten result. use function something, generally refer calling function, values type function (can one) referred arguments function.Obviously, sqrt() function really give us new functionality, since already knew square root calculations using power operator ^, though think looks nicer use sqrt(). However, lots functions R: fact, almost everything interest talk book R function kind. example, one function need use book absolute value function. Compared square root function, extremely simple: just converts negative numbers positive numbers, leaves positive numbers alone. Mathematically, absolute value \\(x\\) written \\(|x|\\) sometimes \\(\\mbox{abs}(x)\\). Calculating absolute values R pretty easy, since R provides abs() function can use purpose. feed positive number...absolute value function nothing . feed negative number, spits positive version number, like :honesty, nothing absolute value function just looking number erasing minus sign one. However, places later book use absolute values, thought might good idea explain meaning term early .moving , worth noting -- way R allows us put multiple operations together longer command, like 1 + 2*4 instance -- also lets us put functions together even combine functions operators desire. example, following perfectly legitimate command:R executes command, starts calculating value abs(-8), produces intermediate value 8. done , command simplifies sqrt( 1 + 8 ). solve square root41 first needs add 1 + 8 get 9, point evaluates sqrt(9), finally outputs value 3.","code":"\n225 ^ 0.5## [1] 15\nsqrt( 225 )## [1] 15\nabs( 21 )## [1] 21\nabs( -13 )## [1] 13\nsqrt( 1 + abs(-8) )## [1] 3"},{"path":"session-1-foundations-of-programming-in-r.html","id":"functionarguments","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.11.1 Function arguments, their names and their defaults","text":"two fairly important things need understand functions work R, use \"named\" arguments, default values\" arguments. surprisingly, say last hear functions work, last things desperately need discuss order get started. understand two concepts , introduce another function. round() function can used round value nearest whole number. example, type :Pretty straightforward, really. However, suppose wanted round two decimal places: , want get 3.14 output. round() function supports , allowing input second argument function specifies number decimal places want round number . words, :happening specified two arguments: first argument number needs rounded (.e., 3.1415), second argument number decimal places rounded (.e., 2), two arguments separated comma. simple example, quite easy remember one argument comes first one comes second, complicated functions easy. Fortunately, R functions make use argument names. round() function, example number needs rounded specified using x argument, number decimal points want rounded specified using digits argument. names available us, can specify arguments function name. like :Notice kind similar spirit variable assignment (Section 42.3), except used = , rather <-. cases specifying specific values associated label. However, differences earlier creating variables, specifying arguments, consequence important use = context.can see, specifying arguments name involves lot typing, also lot easier read. , commands book usually specify arguments name,42 since makes clearer . However, one important thing note specifying arguments using names, matter order type . use argument names, input arguments correct order. words, three commands produce output...one ...find correct order ? different ways, easiest one look help documentation function (see Section ??. However, ever unsure, probably best actually type argument name.Okay, first thing said need know: argument names. second thing need know default values. Notice first time called round() function actually specify digits argument , yet R somehow knew meant round nearest whole number. happen? answer digits argument default value 0, meaning decide specify value digits R act typed digits = 0. quite handy: vast majority time want round number want round nearest whole number, pretty annoying specify digits argument every single time. hand, sometimes actually want round something nearest whole number, even annoying R allow ! Thus, digits = 0 default value, get best worlds.","code":"\nround( 3.1415 )## [1] 3\nround( 3.14165, 2 )## [1] 3.14\nround( x = 3.1415, digits = 2 )## [1] 3.14\nround( 3.14165, 2 )\nround( x = 3.1415, digits = 2 )\nround( digits = 2, x = 3.1415 )## [1] 3.14\n## [1] 3.14\n## [1] 3.14\nround( 2, 3.14165 )## [1] 2"},{"path":"session-1-foundations-of-programming-in-r.html","id":"RStudio1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.12 Letting RStudio help you with your commands","text":"Time bit digression. stage know type basic commands, including use R functions. probably beginning dawn lot R functions, arguments. probably also worried going remember ! Thankfully, bad. fact, data analysts bother try remember commands. really use tricks make lives easier. first (arguably important one) use internet. know particular R function works, Google . Second, can look R help documentation. talk two tricks Section ??. right now want call attention couple simple tricks RStudio makes available .","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"autocomplete-using-tab-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.12.1 Autocomplete using \"tab\"","text":"first thing want call attention autocomplete ability RStudio.43Let's stick example assume want round number. time around, start typing name function want, hit \"tab\" key. RStudio display little window like one shown Figure ??. figure, typed letters ro command line, hit tab. window two panels. left, list variables functions start letters typed shown black text, grey text tells variable/function stored. Ignore grey text now: make much sense talked packages Section ??. Figure ?? can see quite things start letters ro: something called rock, something called round, something called round.Date . one want round, typing notice hit tab key window pops top entry (.e., rock) highlighted. can use arrow keys select one want. , none options look right , can hit escape key (\"esc\") left arrow key make window go away.case, thing want round option, select . , see panel right changes. Previously, telling us something rock data set (.e., \"Measurements 48 rock samples...\") distributed part R. select round, displays information round() function, exactly shown Figure ??. display really handy. first thing says round(x, digits = 0): telling round() function two arguments. first argument called x, default value. second argument digits, default value 0. lot situations, information need. RStudio goes bit , provides additional information function underneath. Sometimes additional information helpful, sometimes : RStudio pulls text R help documentation, experience helpfulness documentation varies wildly. Anyway, decided round() function want use, can hit right arrow enter key, RStudio finish typing rest function name .RStudio autocomplete tool works slightly differently already got name function typed now trying type arguments. instance, suppose typed round( console, hit tab. RStudio smart enough recognise already know name function want, already typed ! Instead, figures interested arguments function. pops little window. can see Figure ??. , window two panels, can interact window exactly way window shown Figure ??. left hand panel, can see list argument names. right hand side, displays information selected argument .","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"browsing-your-command-history-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.12.2 Browsing your command history","text":"One thing R automatically keep track \"command history\". , remembers commands previously typed. can access history different ways. simplest way use arrow keys. hit key, R console show recent command typed. Hit , show command . want text screen go away, hit escape44 Using keys can really handy typed long command one typo . Rather type scratch, can use key bring command fix .second way get access command history look history panel RStudio. upper right hand side RStudio window see tab labelled \"History\". Click , see list recent commands displayed panel: look something like Figure ??. double click one commands, copied R console. (can achieve result selecting command want mouse clicking \"Console\" button).45","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"vectors","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.13 Storing many numbers as a vector","text":"point covered functions enough detail get us safely next couple chapters (one small exception: see Section ??, return discussion variables. introduced variables Section 42.3 showed can use variables store single number. section, extend idea look store multiple numbers within one variable. R, name variable can store multiple values vector. create one.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"creating-a-vector-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.13.1 Creating a vector","text":"stick silly \"get rich quick textbook writing\" example. Suppose textbook company (actually one, ) sends sales data monthly basis. Since class start late February, might expect sales occur towards start year. suppose 100 sales February, 200 sales March 50 sales April, sales rest year. like variable -- call sales..month -- stores sales data. first number stored 0 since sales January, second 100, . simplest way R use combine function, c(). , type numbers want store comma separated list, like :46To use correct terminology , single variable called sales..month: variable vector consists 12 elements.","code":"\nsales.by.month <- c(0, 100, 200, 50, 0, 0, 0, 0, 0, 0, 0, 0)\nsales.by.month##  [1]   0 100 200  50   0   0   0   0   0   0   0   0"},{"path":"session-1-foundations-of-programming-in-r.html","id":"a-handy-digression-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.13.2 A handy digression","text":"Now learned put information vector, next thing understand pull information back . However, worth taking slight detour. following along, typing commands R , possible output saw printed sales..month vector slightly different showed . happened window (RStudio panel) contains R console really, really narrow. case, might seen output looks something like :much room screen, R printed results three lines. important thing notice. important point first line [1] front , whereas second line starts [5] third [9]. pretty clear happening . first row, R printed 1st element 4th element, starts row [1]. second row, R printed 5th element vector 8th one, begins row [5] can tell glance. might seem bit odd R , ways kindness, especially dealing larger data sets!","code":"\nsales.by.month##  [1]   0 100 200  50\n##  [5]   0   0   0   0\n##  [9]   0   0   0   0"},{"path":"session-1-foundations-of-programming-in-r.html","id":"vectorsubset","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.13.3 Getting information out of vectors","text":"get back main story, consider problem get information vector. point, might sneaking suspicion answer something [1] [9] things R printing . course correct. Suppose want pull February sales data . February second month year, try :Yep, February sales right. subtle detail aware : notice R outputs [1] 100, [2] 100. R extremely literal. typed sales..month[2], asked R find exactly one thing, one thing happens second element sales..month vector. , outputs [1] 100 R saying first number just asked 100. behaviour makes sense realise can use trick create new variables. example, create february.sales variable like :Obviously, new variable february.sales one element print new variable, R output begins [1] 100 value first () element february.sales. fact also happens value second element sales..month irrelevant. pick topic shortly (Section 42.9).","code":"\nsales.by.month[2]## [1] 100\nfebruary.sales <- sales.by.month[2]\nfebruary.sales## [1] 100"},{"path":"session-1-foundations-of-programming-in-r.html","id":"altering-the-elements-of-a-vector-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.13.4 Altering the elements of a vector","text":"Sometimes want change values stored vector. Imagine surprise publisher rings tell sales data May wrong. actually additional 25 books sold May, error something told . can fix sales..month variable? One possibility assign whole vector beginning, using c(). lot typing. Also, little wasteful: R redefine sales figures 12 months, 5th one wrong? Fortunately, can tell R change 5th element, using trick:Another way edit variables use edit() fix() functions. discuss detail right now, can check .","code":"\nsales.by.month[5] <- 25\nsales.by.month##  [1]   0 100 200  50  25   0   0   0   0   0   0   0"},{"path":"session-1-foundations-of-programming-in-r.html","id":"veclength","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.13.5 Useful things to know about vectors","text":"moving , want mention couple things vectors. Firstly, often find wanting know many elements vector (usually forgotten). can use length() function . quite straightforward:Secondly, often want alter elements vector . instance, suppose wanted figure much money made month. Since earning exciting $7 per book (seriously, actually pretty close authors get expensive textbooks expected purchase), want multiply element sales..month vector 7. R makes pretty easy, following example shows:words, multiply vector single number, elements vector get multiplied. true addition, subtraction, division taking powers. neat. hand, suppose wanted know much money making per day, rather per month. Since every month number days, need something slightly different. Firstly, create two new vectors:Obviously, profit variable one created earlier, days.per.month variable pretty straightforward. want divide every element profit corresponding element days.per.month. , R makes pretty easy:still like zeros, matters . Notice second element output 25, R divided second element profit (.e. 700) second element days.per.month (.e. 28). Similarly, third element output equal 1400 divided 31, . talk calculations involving vectors later (particular thing called \"recycling rule\"; Section ??), enough detail now.","code":"\nlength( x = sales.by.month )## [1] 12\nsales.by.month * 7##  [1]    0  700 1400  350  175    0    0    0    0    0    0    0\ndays.per.month <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\nprofit <- sales.by.month * 7\nprofit / days.per.month##  [1]  0.000000 25.000000 45.161290 11.666667  5.645161  0.000000  0.000000\n##  [8]  0.000000  0.000000  0.000000  0.000000  0.000000"},{"path":"session-1-foundations-of-programming-in-r.html","id":"text","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.14 Storing text data","text":"lot time data numeric nature, always. Sometimes data really needs described using text, using numbers. address , need consider situation variables store text. create variable stores word \"hello\", can type :interpreting , important recognise quote marks part string . just something use make sure R knows treat characters enclose piece text data, known character string. words, R treats \"hello\" string containing word \"hello\"; typed hello instead, R go looking variable name! can also use 'hello' specify character string.Okay, store text. Next, important recognise , R stores entire word \"hello\" single element: greeting variable vector five different letters. Rather, one element, element corresponds entire character string \"hello\". illustrate , actually ask R find first element greeting, prints whole string:course, reason create vector character strings. instance, continue example attempts look monthly sales data book, one variable might want include names 12 months.47 , type command like thisThis character vector containing 12 elements, name month. wanted R tell name fourth month, :","code":"\ngreeting <- \"hello\"\ngreeting## [1] \"hello\"\ngreeting[1]## [1] \"hello\"\nmonths <- c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \n            \"December\")\nmonths[4]## [1] \"April\""},{"path":"session-1-foundations-of-programming-in-r.html","id":"simpletext","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.14.1 Working with text","text":"Working text data somewhat complicated working numeric data, discuss basic ideas Section ??, purposes current chapter need bare bones sketch. thing want moving show example function can applied text data. far, functions seen (.e., sqrt(), abs() round()) make sense applied numeric data (e.g., calculate square root \"hello\"), seen one function can applied pretty much variable vector (.e., length()). might nice see example function can applied text.function going introduce called nchar(), count number individual characters make string. Recall earlier tried calculate length() greeting variable returned value 1: greeting variable contains one string, happens \"hello\". want know many letters word? Sure, count , boring, point terrible strategy wanted know number letters War Peace. nchar() function helpful:makes sense, since fact 5 letters string \"hello\". Better yet, can apply nchar() whole vectors. , instance, want R tell many letters names 12 months, can :nice know. nchar() function can bit , lot functions can extract information text sorts fancy things. However, goal teach ! goal right now just see example function actually work applied text.","code":"\nnchar( x = greeting )## [1] 5\nnchar( x = months )##  [1] 7 8 5 5 3 4 4 6 9 7 8 8"},{"path":"session-1-foundations-of-programming-in-r.html","id":"logicals","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.15 Storing \"true or false\" data","text":"Time move onto third kind data. key concept lot R relies idea logical value. logical value assertion whether something true false. implemented R pretty straightforward way. two logical values, namely TRUE FALSE. Despite simplicity, logical values useful things. see work.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"assessing-mathematical-truths-2","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.15.1 Assessing mathematical truths","text":"George Orwell's classic book 1984, one slogans used totalitarian Party \"two plus two equals five\", idea political domination human freedom becomes complete possible subvert even basic truths. terrifying thought, especially protagonist Winston Smith finally breaks torture agrees proposition. \"Man infinitely malleable\", book says. pretty sure true humans48 definitely true R. R infinitely malleable. rather firm opinions topic true, least regards basic mathematics. ask calculate 2 + 2, always gives answer, bloody 5:course, far R just calculations. asked explicitly assert \\(2+2 = 4\\) true statement. want R make explicit judgement, can use command like :done use equality operator, ==, force R make \"true false\" judgement.49 Okay, see R thinks Party slogan:Booyah! Freedom ponies ! something like . Anyway, worth look happens try force R believe two plus two five making assignment statement like 2 + 2 = 5 2 + 2 <- 5. , happens:R like much. recognises 2 + 2 variable (\"non-language object\" part saying), let try \"reassign\" . R pretty flexible, actually let quite remarkable things redefine parts R , just basic, primitive truths refuses give . change laws addition, change definition number 2.probably best.","code":"\n2 + 2## [1] 4\n2 + 2 == 4## [1] TRUE\n2+2 == 5## [1] FALSE\n2 + 2 = 5## Error in 2 + 2 = 5: target of assignment expands to non-language object"},{"path":"session-1-foundations-of-programming-in-r.html","id":"logical-operations-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.15.2 Logical operations","text":"now seen logical operations work, far seen simplest possible example. probably surprised discover can combine logical operations operations functions complicated way, like :thisNot , Table 42.2 illustrates, several logical operators can use, corresponding basic mathematical concepts.Table 42.2: logical operators. Technically calling \"binary relational operators\", quite frankly want . book -one can make .Hopefully pretty self-explanatory: example, less operator < checks see number left less number right. less, R returns answer TRUE:two numbers equal, one right larger, R returns answer FALSE, following two examples illustrate:contrast, less equal operator <= exactly says. returns value TRUE number left hand side less equal number right hand side. repeat previous two examples using <=, get:point hope pretty obvious greater operator > greater equal operator >= ! Next list logical operators equal operator != -- others -- says . returns value TRUE things either side identical . Therefore, since \\(2+2\\) equal \\(5\\), get:quite done yet. three logical operations worth knowing , listed Table 42.3.Table 42.3: logical operators.operator !, operator &, operator |. Like logical operators, behaviour less exactly expect given names. instance, ask assess claim \"either \\(2+2 = 4\\) \\(2+2 = 5\\)\" say true. Since \"either-\" statement, need one two parts true. | operator :hand, ask assess claim \"\\(2+2 = 4\\) \\(2+2 = 5\\)\" say false. Since statement need parts true. & operator :Finally, operator, simple annoying describe English. ask assess claim \"true \\(2+2 = 5\\)\" say claim true; claim \"\\(2+2 = 5\\) false\". right. write R command get :words, since 2+2 == 5 FALSE statement, must case !(2+2 == 5) TRUE one. Essentially, really done claim \"false\" thing \"true\". Obviously, really quite right real life. R lives much black white world: R everything either true false. shades gray allowed. can actually see much explicitly, like :course, \\(2+2 = 5\\) example, really need use \"\" ! \"equals \" == two separate operators. just used \"equals \" operator != like :many situations really need use ! operator. see later .50","code":"\n3*3 + 4*4 == 5*5## [1] TRUE\nsqrt( 25 ) == 5## [1] TRUE\n99 < 100## [1] TRUE\n100 < 100\n\n100 < 99## [1] FALSE\n## [1] FALSE\n100 <= 100\n\n100 <= 99## [1] TRUE\n## [1] FALSE\n2 + 2 != 5## [1] TRUE\n(2+2 == 4) | (2+2 == 5)## [1] TRUE\n(2+2 == 4) & (2+2 == 5)## [1] FALSE\n! (2+2 == 5)## [1] TRUE\n! FALSE## [1] TRUE\n2+2 != 5## [1] TRUE"},{"path":"session-1-foundations-of-programming-in-r.html","id":"storing-and-using-logical-data-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.15.3 Storing and using logical data","text":"point, introduced numeric data (Sections 42.3 2.6) character data (Section 24.8). might surprised discover TRUE FALSE values R producing actually third kind data, called logical data. , asked R 2 + 2 == 5 said [1] FALSE reply, actually producing information can store variables. instance, create variable called ..Party.correct, store R's opinion:Alternatively, can assign value directly, typing TRUE FALSE command. Like :Better yet, kind tedious type TRUE FALSE , R provides shortcut: can use T F instead (case sensitive: t f work).51 works::","code":"\nis.the.Party.correct <- 2 + 2 == 5\nis.the.Party.correct## [1] FALSE\nis.the.Party.correct <- FALSE\nis.the.Party.correct## [1] FALSE\nis.the.Party.correct <- F\nis.the.Party.correct## [1] FALSE\nis.the.Party.correct <- f## Error in eval(expr, envir, enclos): object 'f' not found"},{"path":"session-1-foundations-of-programming-in-r.html","id":"vectors-of-logicals-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.15.4 Vectors of logicals","text":"next thing mention can store vectors logical values exactly way can store vectors numbers (Section 2.6) vectors text data (Section 24.8). , can define directly via c() function, like :can produce vector logicals applying logical operator vector. might make lot sense , unpack slowly. First, suppose vector numbers (.e., \"non-logical vector\"). instance, use sales..month vector using Section 2.6. Suppose wanted R tell , month year, whether actually sold book month. can typing :, can store vector want, example illustrates:words, .sales..month logical vector whose elements TRUE corresponding element sales..month greater zero. instance, since sold zero books January, first element FALSE.","code":"\nx <- c(TRUE, TRUE, FALSE)\nx## [1]  TRUE  TRUE FALSE\nsales.by.month > 0##  [1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n## [12] FALSE\nany.sales.this.month <- sales.by.month > 0\nany.sales.this.month##  [1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n## [12] FALSE"},{"path":"session-1-foundations-of-programming-in-r.html","id":"logictext","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.15.5 Applying logical operation to text","text":"moment (Section 42.9) show logical operations logical vectors handy, want briefly point can apply text well logical data. just need bit careful understanding R interprets different operations. section talk equal operator == applies text, since important one. Obviously, equal operator != gives exact opposite answers == implicitly talking one , give specific commands showing use !=. operators, defer detailed discussion topic Section ??.Okay, see works. one sense, simple. instance, can ask R word \"cat\" word \"dog\", like :pretty obvious, good know even R can figure . Similarly, R recognise \"cat\" \"cat\":, exactly expect. However, need keep mind R tolerant comes grammar spacing. two strings differ way whatsoever, R say equal , following examples indicate:","code":"\n\"cat\" == \"dog\"## [1] FALSE\n\"cat\" == \"cat\"## [1] TRUE\n\" cat\" == \"cat\"\n\n\"cat\" == \"CAT\"\n\n\"cat\" == \"c a t\"## [1] FALSE\n## [1] FALSE\n## [1] FALSE"},{"path":"session-1-foundations-of-programming-in-r.html","id":"indexing","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.16 Indexing vectors","text":"One last thing add finishing chapter. far, whenever get information vector, done typed something like months[4]; R prints fourth element months vector. section, show two additional tricks getting information vector.","code":""},{"path":"session-1-foundations-of-programming-in-r.html","id":"extracting-multiple-elements-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.16.1 Extracting multiple elements","text":"One useful thing can pull one element time. previous example, used single number (.e., 2) indicate element wanted. Alternatively, can use vector. , suppose wanted data February, March April. use vector c(2,3,4) indicate elements want R pull . , type :Notice order matters . asked data reverse order (.e., April first, March, February) using vector c(4,3,2), R outputs data reverse order:second thing aware R provides handy shortcuts common situations. instance, suppose wanted extract everything 2nd month 8th month. One way thing , use vector c(2,3,4,5,6,7,8) indicate elements want. works just finebut kind lot typing. help make easier, R lets use 2:8 shorthand c(2,3,4,5,6,7,8), makes things lot simpler. First, just check true:Next, check can use 2:8 shorthand way pull 2nd 8th elements sales..months:kind neat.","code":"\nsales.by.month[ c(2,3,4) ]## [1] 100 200  50\nsales.by.month[ c(4,3,2) ]## [1]  50 200 100\nsales.by.month[ c(2,3,4,5,6,7,8) ]## [1] 100 200  50  25   0   0   0\n2:8## [1] 2 3 4 5 6 7 8\nsales.by.month[2:8]## [1] 100 200  50  25   0   0   0"},{"path":"session-1-foundations-of-programming-in-r.html","id":"logical-indexing-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.16.2 Logical indexing","text":"point, can introduce extremely useful tool called logical indexing. last section, created logical vector .sales..month, whose elements TRUE month sold least one book, FALSE others. However, big long list TRUEs FALSEs little bit hard read, like R select names months sold books. Earlier , created vector months contains names months. logical indexing handy. need :understand happening , helpful notice sales..month > 0 logical expression used create .sales..month vector last section. fact, just done :gotten exactly result. order figure elements months include output, R look see corresponding element .sales..month TRUE. Thus, since element 1 .sales..month FALSE, R include \"January\" part output; since element 2 .sales..month TRUE, R include \"February\" output. Note reason use trick find actual sales numbers months. command just :fact, can thing text. example. Suppose -- continue saga textbook sales -- later find bookshop sufficient stocks months year. tell early year \"high\" stocks, dropped \"low\" levels, fact one month \"\" copies book able replenish . Thus might variable called stock.levels looks like :Thus, want know months bookshop book, apply logical indexing trick, character vector stock.levels, like :Alternatively, want know bookshop either low copies copies, :thisEither way, get answer want.point, hope can see logical indexing useful thing. basic, yet powerful way manipulate data. talk lot manipulate data Chapter ??, since critical skill real world research often overlooked introductory research methods classes (least, experience). take bit practice become completely comfortable using logical indexing, good idea play around sorts commands. Try creating different variables , ask questions like \"get R spit elements [blah]\". Practice makes perfect, practicing logical indexing perfect art yelling frustrated insults computer.52","code":"\nmonths[ sales.by.month > 0 ]## [1] \"February\" \"March\"    \"April\"    \"May\"\nmonths[ any.sales.this.month ]## [1] \"February\" \"March\"    \"April\"    \"May\"\nsales.by.month [ sales.by.month > 0 ]## [1] 100 200  50  25\nstock.levels<-c(\"high\", \"high\", \"low\", \"out\", \"out\", \"high\",\n                \"high\", \"high\", \"high\", \"high\", \"high\", \"high\")\n\nstock.levels##  [1] \"high\" \"high\" \"low\"  \"out\"  \"out\"  \"high\" \"high\" \"high\" \"high\" \"high\"\n## [11] \"high\" \"high\"\nmonths[stock.levels == \"out\"]## [1] \"April\" \"May\"\nmonths[stock.levels == \"out\" | stock.levels == \"low\"]## [1] \"March\" \"April\" \"May\"\nmonths[stock.levels != \"high\" ]## [1] \"March\" \"April\" \"May\""},{"path":"session-1-foundations-of-programming-in-r.html","id":"quitting-r-1","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.17 Quitting R","text":"one last thing cover chapter: quit R. say , trying imply R kind pathological addition need call R QuitLine wear patches control cravings (although certainly might argue something seriously pathological addicted R). just mean exit program. Assuming running R usual way (.e., RStudio default GUI Windows Mac computer), can just shut application normal way. However, R also function, called q() can use quit, pretty handy running R terminal window.Regardless method use quit R, first time R probably ask want save \"workspace image\". talk lot loading saving data Section ??, figured better quickly cover now otherwise going get annoyed close R end chapter. using RStudio, see dialog box looks like one shown Figure ??. using text based interface see :y/n/c part short \"yes / / cancel\". Type y want save, n , c changed mind want quit .actually mean? going R wants know want save variables creating, can use later. sounds like great idea, really tempting type y click \"Save\" button. honest though, rarely , kind annoys little bit... R really asking want store variables \"default\" data file, automatically reload next time open R. quite frankly, wanted save variables, already saved trying quit. , saved location choice, can find later. personally never bother .fact, every time install R new machine one first things change settings never asks . can RStudio really easily: use menu system find RStudio option; dialog box comes give option tell R never whine (see Figure ??. Mac, can open window going \"RStudio\" menu selecting \"Preferences\". Windows machine go \"Tools\" menu select \"Global Options\". \"General\" tab see option reads \"Save workspace .Rdata exit\". default set \"ask\". want R stop asking, change \"never\".","code":"\nq()\n\n## Save workspace image? [y/n/c]: "},{"path":"session-1-foundations-of-programming-in-r.html","id":"summary-3","chapter":"43 Session 1: Foundations of Programming in R","heading":"43.18 Summary","text":"Every book tries introduce basic programming ideas novices cover roughly topics, roughly order. Mine exception, grand tradition just way everyone else , chapter covered following topics:Getting started. downloaded installed R RStudioBasic commands. talked bit logic R works particular type commands R console (Section @ref(#firstcommand), learned perform basic calculations using arithmetic operators +, -, *, / ^.Introduction functions. saw several different functions, three used perform numeric calculations (sqrt(), abs(), round(), one applies text (nchar(); Section 42.7.1), one works variable (length(); Section 42.6.5). , talked bit argument names work, learned default values arguments. (Section 42.4.1)Introduction variables. learned basic idea behind variables, assign values variables using assignment operator <- (Section 42.3). also learned create vectors using combine function c() (Section 2.6).Data types. Learned distinction numeric, character logical data; including basics enter use . (Sections 42.3 42.8)Logical operations. Learned use logical operators ==, !=, <, >, <=, =>, !, & |. learned use logical indexing. (Section 42.9)","code":""},{"path":"r-basics-1.html","id":"r-basics-1","chapter":"44 R Basics","heading":"44 R Basics","text":"load packages use function library(). Typically start analysis script loading packages need.tidyverse opinionated collection R packages designed data science. packages share underlying design philosophy, grammar, data structures. means functions across tidyverse designed work together make process data science easier.","code":""},{"path":"r-basics-1.html","id":"using-packages","chapter":"44 R Basics","heading":"44.1 Using packages","text":"Run code load tidyverse package. can regardless whether using computer cloud.get looks like error message - . just R telling done. read gives full list packages made available . One look familiar last week?ggplot2tibbletidyrdplyrNow loaded tidyverse package can use functions contains remember, need run library() function every time start R.order use package, must first install . following code installs package tidyverse, package use frequently.working computer, use code install tidyverse.need install package , however, time start R need load packages want use, similar way need install app phone , need open every time want use .\nget error message says something like “WARNING: Rtools\nrequired build R packages” may need download install \nextra bit software called Rtools.\n","code":"\nlibrary(tidyverse)\ninstall.packages(\"tidyverse\")"},{"path":"r-basics-1.html","id":"package-updates","chapter":"44 R Basics","heading":"44.2 Package updates","text":"addition updates R R Studio, creators packages also sometimes update code. can add functions package, can fix errors. One thing avoid unintentionally updating installed package. run install.packages() always install latest version package overwrite older versions may installed. Sometimes problem, however, sometimes find update means code longer works package changed substantially. possible revert back older version package try avoid anyway.\navoid accidentally overwriting package later version, \nnever include install.packages() \nanalysis scripts case , someone else runs code \nmistake. Remember, server already packages \nneed course need install packages \nusing machine.\n","code":""},{"path":"r-basics-1.html","id":"package-conflicts","chapter":"44 R Basics","heading":"44.3 Package conflicts","text":"thousands different R packages even functions. Unfortunately, sometimes different packages function names. example, packages dplyr MASS function named select(). load packages, R produce warning telling conflict.case, R telling function select() dplyr package hidden ('masked') another function name. try use select(), R use function package loaded recently - case use function MASS.want specify package want use particular function can use code format package::function, example:\nget naming conflicts?\n\nR open source software. Anyone can write \nsubmit useful R packages. result impossible make sure \nNEVER functions identical names.\n","code":"\nlibrary(dplyr)\nlibrary(MASS)package �dplyr� was built under R version 3.6.3\nAttaching package: �dplyr�\n\nThe following objects are masked from �package:stats�:\n\n    filter, lag\n\nThe following objects are masked from �package:base�:\n\n    intersect, setdiff, setequal, union\n\n\nAttaching package: �MASS�\n\nThe following object is masked from �package:dplyr�:\n\n    select\ndplyr::select()\nMASS::select()"},{"path":"r-basics-1.html","id":"objects","chapter":"44 R Basics","heading":"44.4 Objects","text":"large part coding involve creating manipulating objects. Objects contain stuff, made first R objects previous chapter. values contained object can numbers, words, result operations analyses.assign content object using <-.","code":""},{"path":"r-basics-1.html","id":"activity-1-create-some-objects","chapter":"44 R Basics","heading":"44.4.1 Activity 1: Create some objects","text":"Copy paste following code console, change code uses name age run . see name, age, today, new_year, data appear environment pane.command use need help understand function rnorm()?`\nFigure 23.4: Objects environment\nNote examples, name,age, new_year always contain values emily, 35, date New Year's Day 2021, however, today draw date operating system data randomly generated set data values objects static.side note, ever teach programming statistics, use age example every time update teaching materials get reminder fragility existence advancing age. 2021 update: now given updating age, remain forever 35.Importantly, objects can involved calculations can interact . example:Finally, can store result operations new object:\nmay find helpful read <- \ncontains, e.g., name contains text\nemily.\nconstantly creating objects throughout course learn behave go along, however, now enough understand way saving values, values can numbers, text, result operations, can used operations create new variables.\nmay also see objects referred ‘variables’. \ndifference two programming terms, however, used\nsynonymously frequently.\n","code":"\nname <- \"emily\"\nage <- 16 + 19 \ntoday <- Sys.Date()\nnew_year <- as.Date(\"2022-01-01\")\ndata <- rnorm(n = 10, mean = 15, sd = 3)\nage + 10\nnew_year - today\nmean(data)## [1] 45\n## Time difference of -661 days\n## [1] 13.65941\ndecade <- age + 10"},{"path":"r-basics-1.html","id":"vectors-1","chapter":"44 R Basics","heading":"44.5 Vectors","text":"working R objects containing single element data, commonly work vectors. vector sequence elements, data type. logical, numerical, character etc.function c lets 'concatenate' link separate elements together single vector.","code":"\nnumeric_vector <- c(1,2,3)\n\ncharacter_vector <- c(\"fruits\", \"vegetables\", \"seeds\")\n\nlogical_vector <- c(TRUE, TRUE, FALSE)"},{"path":"r-basics-1.html","id":"dataframes-and-tibbles","chapter":"44 R Basics","heading":"44.6 Dataframes and tibbles","text":"looked R objects contain:single elements datasingle elements datamultiple elements data type - vectorsmultiple elements data type - vectorsBut often import data R put object called tibble type dataframe.\ndataframe data structure organises data table.\nDataframes can mix different types data . \ncolumn dataframe different vector, row different\nelement within vectors.\nquick go making tibble scratch.\nUse str() object vector find important\ninformation, like data type vector many elements \ncontains.\nNow put vectors together, become variables new tibble using function tibble()go messing script figure functions .","code":"\n# make some variables/ vectors\nperson <- c(\"Mark\", \"Phil\", \"Becky\", \"Tony\")\n\nhobby <- c(\"kickboxing\", \"coding\", \"dog walking\", \"car boot sales\")\n\nawesomeness <- c(1,100,1,1)\n# make a tibble\nmy_data <- tibble(person, hobby, awesomeness)\nmy_data# A tibble: 4 x 3\n  person hobby          awesomeness\n  <chr>  <chr>                <dbl>\n1 Mark   kickboxing               1\n2 Phil   coding                 100\n3 Becky  dog walking              1\n4 Tony   car boot sales           1\n# Some R functions for looking at tibbles and dataframes\n\nhead(my_data, n=2)\ntail(my_data, n=1)\nnrow(my_data)\nncol(my_data)\ncolnames(my_data)\nview(my_data)\nglimpse(my_data)\nstr(my_data)"},{"path":"r-basics-1.html","id":"organising-data-in-wide-and-long-formats","chapter":"44 R Basics","heading":"44.7 Organising data in wide and long formats","text":"two main conventions dataframes R, wide long formats.wide data format repeat values first column, data relating \"measured thing\" found different columnsA wide data format repeat values first column, data relating \"measured thing\" found different columnsA long data format different column type thing measures data. variable unique column.long data format different column type thing measures data. variable unique column.\nFigure 44.1: visual representation long wide format data shapes\nneither wide long data correct , work long data clearer many distinct types variables data tools using tidyverse designed work long data.","code":""},{"path":"r-basics-1.html","id":"using-pivot-functions","chapter":"44 R Basics","heading":"44.8 Using pivot functions","text":"functions found part tidyverse can help us reshape data.tidyr::pivot_wider() - long wide formattidyr::pivot_wider() - long wide formattidyr::pivot_longer() - wide long formattidyr::pivot_longer() - wide long format\nFigure 44.2: Reshaping data pivot\nsave changes data format, must assign object, two optionsUse name original R object, overwrite original new formatUse name original R object, overwrite original new formatUse new name reformatted data R objects exist EnvironmentUse new name reformatted data R objects exist EnvironmentNeither correct aware .","code":"\n country <- c(\"x\", \"y\", \"z\")\n yr1960 <-  c(10, 20, 30)\n yr1970 <-  c(13, 23, 33)\n yr2010 <-  c(15, 25, 35)\n\ncountry_data <- tibble(country, yr1960, yr1970, yr2010)\ncountry_data\npivot_longer(data = country_data,\n             cols = yr1960:yr2010,\n             names_to = \"year\",\n             names_prefix = \"yr\",\n             values_to = \"metric\")"},{"path":"r-basics-1.html","id":"overwrite-the-original-object","chapter":"44 R Basics","heading":"44.8.1 Overwrite the original object","text":"","code":"\ncountry_data <- pivot_longer(data = country_data,\n             cols = yr1960:yr2010,\n             names_to = \"year\",\n             names_prefix = \"yr\",\n             values_to = \"metric\")"},{"path":"r-basics-1.html","id":"create-a-new-r-object","chapter":"44 R Basics","heading":"44.8.2 Create a new r object","text":"","code":"\nlong_country_data <- pivot_longer(data = country_data,\n             cols = yr1960:yr2010,\n             names_to = \"year\",\n             names_prefix = \"yr\",\n             values_to = \"metric\")"},{"path":"r-basics-1.html","id":"looking-after-the-environment","chapter":"44 R Basics","heading":"44.9 Looking after the environment","text":"writing lot code may find environment pane (workspace) become cluttered many objects. can make difficult figure object need therefore run risk using wrong data frame. working new dataset, tried lots different code getting final version, good practice remember clear environment avoid using wrong object. can several way.remove individual objects, can type rm(object_name) console. Try now remove one objects created previous section.clear objects environment run rm(list = ls()) console.clear objects environment can also click broom icon environment pane.\nFigure 44.3: Clearing workspace\n","code":""},{"path":"r-basics-1.html","id":"global-options","chapter":"44 R Basics","heading":"44.10 Global options","text":"default, open R Studio show last working , including code objects created. might sound helpful, actually tends cause problems worth means risk accidentally using old version object. recommend changing settings time start R Studio, opens fresh copy. can clicking Tools - Global Options deselecting boxes looks like .\nFigure 44.4: Set options increase reproducibility\nRestore .RData workspace startup checkeduncheckedSave workspace .RData exit AlwaysNeverAsk","code":""},{"path":"r-basics-1.html","id":"r-sessions","chapter":"44 R Basics","heading":"44.11 R sessions","text":"open R start writing code, loading packages, creating objects, new session. addition clearing workspace, can sometimes useful start new session. happen automatically time start R computer, although sessions can persist cloud. find code working figure , might worth starting new session. clear environment detach loaded packages - think like restarting phone.","code":""},{"path":"r-basics-1.html","id":"activity-2","chapter":"44 R Basics","heading":"44.12 Activity 2","text":"Click 'Session - Restart R'.tried turning ? vital restart R regularly. Restarting R helps avoid accidentally using wrong data functions stored environment. Restarting R takes second several times per day! get used saving everything script, ’ll always happy restart R. help develop robust reproducible data analysis skills.\nFigure 44.5: truth programming\n\nmean can’t shouldn’t ever save work \n.RData/.rda files.\n\nbest consciously load exactly want \nload. Letting R silently save load everything may also\ninclude broken data objects.\n","code":""},{"path":"r-basics-1.html","id":"how-to-cite-r-and-rstudio","chapter":"44 R Basics","heading":"44.13 How to cite R and RStudio","text":"may way writing scientific report cite reference R, however, time comes important people built (free!) credit. provide separate citations R, RStudio, packages use.get citation version R using, simply run citation() function always provide recent citation.generate citation packages using, can also use citation() function name package wish cite.generate citation version RStudio using, can use RStudio.Version() function:Finally, example might look write-method section:Analysis conducted using R ver 4.0.0 (R Core Team, 2020), RStudio (Rstudio Team, 2020), tidyverse range packages (Wickham, 2017).noted, may , come back important give open-source community credit work.","code":"\ncitation()## To cite R in publications use:\n## \n##   R Core Team (2023). _R: A Language and Environment for Statistical\n##   Computing_. R Foundation for Statistical Computing, Vienna, Austria.\n##   <https://www.R-project.org/>.\n## \n## A BibTeX entry for LaTeX users is\n## \n##   @Manual{,\n##     title = {R: A Language and Environment for Statistical Computing},\n##     author = {{R Core Team}},\n##     organization = {R Foundation for Statistical Computing},\n##     address = {Vienna, Austria},\n##     year = {2023},\n##     url = {https://www.R-project.org/},\n##   }\n## \n## We have invested a lot of time and effort in creating R, please cite it\n## when using it for data analysis. See also 'citation(\"pkgname\")' for\n## citing R packages.\ncitation(\"tidyverse\")## To cite package 'tidyverse' in publications use:\n## \n##   Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R,\n##   Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller\n##   E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V,\n##   Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). \"Welcome to\n##   the tidyverse.\" _Journal of Open Source Software_, *4*(43), 1686.\n##   doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.\n## \n## A BibTeX entry for LaTeX users is\n## \n##   @Article{,\n##     title = {Welcome to the {tidyverse}},\n##     author = {Hadley Wickham and Mara Averick and Jennifer Bryan and Winston Chang and Lucy D'Agostino McGowan and Romain François and Garrett Grolemund and Alex Hayes and Lionel Henry and Jim Hester and Max Kuhn and Thomas Lin Pedersen and Evan Miller and Stephan Milton Bache and Kirill Müller and Jeroen Ooms and David Robinson and Dana Paige Seidel and Vitalie Spinu and Kohske Takahashi and Davis Vaughan and Claus Wilke and Kara Woo and Hiroaki Yutani},\n##     year = {2019},\n##     journal = {Journal of Open Source Software},\n##     volume = {4},\n##     number = {43},\n##     pages = {1686},\n##     doi = {10.21105/joss.01686},\n##   }\nRStudio.Version()"},{"path":"r-basics-1.html","id":"help-and-additional-resources","chapter":"44 R Basics","heading":"44.14 Help and additional resources","text":"\nFigure 44.6: truth programming\nGetting good programming really means getting good trying stuff , searching help online, finding examples code copy. difficulty exercises contained book can ask help Teams, however, learning problem-solve effectively key skill need develop throughout course.Use help documentation. struggling understand function works, remember ?function help() command.Use help documentation. struggling understand function works, remember ?function help() command.get error message, copy paste Google - likely someone else problem.get error message, copy paste Google - likely someone else problem.struggling produce particular output process - try organising google searches include key terms \"R\" \"tidyverse\". - e.g. \"change character strings NA values tidyverse\"struggling produce particular output process - try organising google searches include key terms \"R\" \"tidyverse\". - e.g. \"change character strings NA values tidyverse\"official Cheatsheets great resource keep bookmarked.official Cheatsheets great resource keep bookmarked.Remember ask helpRemember ask helpIn addition course materials number excellent resources learning R:\nStackOverflow\nR Data Science\nSearch use #rstats hashtag Twitter\naddition course materials number excellent resources learning R:StackOverflowR Data ScienceSearch use #rstats hashtag Twitter","code":""},{"path":"r-basics-1.html","id":"debugging-tips","chapter":"44 R Basics","heading":"44.15 Debugging tips","text":"large part coding trying figure code work true whether novice expert. progress course keep record mistakes make fixed . chapter provide number common mistakes look undoubtedly make (fix!) new mistakes .","code":""},{"path":"r-basics-1.html","id":"prevent-errors","chapter":"44 R Basics","heading":"44.15.1 Prevent errors","text":"Read console outputs goCheck functions producing output expectBuild complex code simple stages","code":""},{"path":"r-basics-1.html","id":"fix-errors","chapter":"44 R Basics","heading":"44.15.2 Fix errors","text":"loaded correct packages functions trying use? One common mistake write code load package, e.g., library(tidyverse) forget run .loaded correct packages functions trying use? One common mistake write code load package, e.g., library(tidyverse) forget run .made typo? Remember data DATA t.test t_test.made typo? Remember data DATA t.test t_test.package conflict? tried specifying package function package::function?package conflict? tried specifying package function package::function?definitely error? red text R means error - sometimes just giving message information.definitely error? red text R means error - sometimes just giving message information.","code":""},{"path":"r-basics-1.html","id":"activity-7-test-yourself-1","chapter":"44 R Basics","heading":"44.16 Activity 7: Test yourself","text":"Question 1. never include code install.packages() analysis scripts? use library() insteadPackages already part Base RYou (someone else) may accidentally install package update stops code workingYou already latest version packageRemember, run install.packages() always install latest version package overwrite older versions package may installed.Question 2. following code produce?dataset 10 numbers mean 6 SD 50A dataset 6 numbers mean 50 SD 10A dataset 50 numbers mean 10 SD 6A dataset 50 numbers mean 10 SD 6The default form rnorm() rnorm(n, mean, sd). need help remembering argument function , look help documentation running ?rnormQuestion 3. two packages functions name want specify exactly package use, code use?package::functionfunction::packagelibrary(package)install.packages(package)use form package::function, example dplyr::select. Remember first load packages R warn functions name - remember look !Question 4. following likely argument? 35read_csv()<-Question 5. easy way spot functions look computersnumbersbrackets.Question 6. job <- send output function /argumentassignmentobject.Question 7. vector must always contain elements data type (e.g logical, character, numeric) FALSETRUE.Question 8. dataframe/tibble must always contain elements data type TRUEFALSE","code":"\nrnorm(6, 50, 10)"}]
