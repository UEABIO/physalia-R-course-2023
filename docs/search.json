[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"course designed anyone basic knowledge R looking enhance skills take programming abilities next level. session course hands-, providing practical examples work apply concepts learned, lots support answer questions overcome challenges","code":""},{"path":"index.html","id":"learning-outcomes","chapter":"Overview","heading":"0.1 Learning outcomes","text":"grounding RProject based workflowsTidyverse data wranglingWriting functions running iterationsAdvanced tidyverse tricksGGplot data visualsMaking tables gtMaking reports RmarkdownUsing Github","code":""},{"path":"index.html","id":"packages","chapter":"Overview","heading":"0.2 Packages","text":"","code":"## Core Packages:\n- tidyverse 2.0.0\n- palmerpenguins\n- here\n- janitor\n- skimr\n\n## Data Exploration:\n- GGally\n- skimr\n- dataxray\n\n## Optimizing Functions:\n- microbenchmark\n- testthat\n\n## Reproducible Reports:\n- rmarkdown\n- tinytex\n\n## Working with Tables:\n- gt\n- gtExtras\n\n## Add-ons for Working with ggplot:\n- ggbeeswarm\n- gghighlight\n- ggh4x\n- ggpubr\n- png\n- ggdensity\n- ggdist\n- ggbump\n- ggtext\n- ggalt\n- ggridges\n- geomtextpath\n- colorBlindness\n- patchwork\n\n## Working with Shiny:\n- shiny\n- bslib\n\n## Working with Github:\n- gitcreds\n- usethis\n"},{"path":"introduction-to-r-and-rstudio.html","id":"introduction-to-r-and-rstudio","chapter":"1 Introduction to R and RStudio","heading":"1 Introduction to R and RStudio","text":"R name programming language learn course.R name programming language learn course.RStudio convenient interface using throughout course order learn organise data, produce accurate data analyses & data visualisations.RStudio convenient interface using throughout course order learn organise data, produce accurate data analyses & data visualisations.R programming language write code , RStudio Integrated Development Environment (IDE) makes working R easier. Think knowing English using plain text editor like NotePad write book versus using word processor like Microsoft Word. , look good much harder without things like spell-checking formatting. similar way, can use R without R Studio recommend . key thing remember although work using RStudio course, actually using two pieces software means time--time, may separate updates.R RStudio can downloaded free onto personal computers(see Appendices), convenience use classroom space Posit cloud.Posit cloud cloud-based service can log remotely hosted servers host data analysis projects.advantage using Posit cloud extra packages functions need course already installed. can log-workspace computer long internet connection remember username password. can also \"visit\" projects help get stuck, hosted Posit cloud.Eventually may also add extra tools like GitHub RMarkdown data reproducibility, literate collaborative programming.end course hope tools confidently analyze real data, make informative beautiful data visuals, able analyze lots different types data.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"using-posit-cloud","chapter":"1 Introduction to R and RStudio","heading":"1.1 Using Posit cloud","text":"sessions run cloud-based software. make free account, join Workspace.signed - see two spaces:workspace - personal use (20hrs/month)workspace - personal use (20hrs/month)shared classroom - educational licence (limit)shared classroom - educational licence (limit)Make sure working classroom workspace - can distribute project work 'visit' projects needed.Posit cloud works exactly way RStudio, means download software. can access hosted cloud server projects browser connection (Chrome works best), computer.good reference guide Posit cloud","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"getting-to-know-rstudio","chapter":"1 Introduction to R and RStudio","heading":"1.2 Getting to know RStudio","text":"R Studio console can try code (appearing bottom left window), script editor (top left), window showing functions objects created \"Environment\" tab (top right window figure), window shows plots, files packages, help documentation (bottom right).\nFigure 1.1: RStudio interface\nlearn use features included R Studio throughout course, however, highly recommend watching RStudio Essentials 1 point.video lasts ~30 minutes gives tour main parts R Studio.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"consoles-vs.-scripts","chapter":"1 Introduction to R and RStudio","heading":"1.2.1 Consoles vs. scripts","text":"script window place enter run code easily edited saved future use. Usually Script Window shown top left RStudio. window shown, visible open previously saved R script, create new R Script. create new R Script clicking File > New File > R Script RStudio menu bar.script window place enter run code easily edited saved future use. Usually Script Window shown top left RStudio. window shown, visible open previously saved R script, create new R Script. create new R Script clicking File > New File > R Script RStudio menu bar.execute code R script, can either highlight code click Run, can highlight code press CTRL + Enter keyboard.execute code R script, can either highlight code click Run, can highlight code press CTRL + Enter keyboard.console: can enter code directly Console Window click Enter. commands run shown History Window top right RStudio. Though much difficult keep track work way.console: can enter code directly Console Window click Enter. commands run shown History Window top right RStudio. Though much difficult keep track work way.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"environment","chapter":"1 Introduction to R and RStudio","heading":"1.2.2 Environment","text":"Environment tab (top right) allows see objects workspace. create variables data frames, visual listing everything current workspace. start new project completely empty.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"plots-files-packages-help","chapter":"1 Introduction to R and RStudio","heading":"1.2.3 Plots, files, packages, help","text":"Plots - Plots panel, shows plots. buttons opening plot separate window exporting plot pdf jpeg (though can also code.)Plots - Plots panel, shows plots. buttons opening plot separate window exporting plot pdf jpeg (though can also code.)Files - files panel gives access file directory hard drive.Files - files panel gives access file directory hard drive.Packages - Shows list R packages installed harddrive indicates whether currently loaded. Packages loaded current session checked installed yet loaded unchecked. discuss packages later.Packages - Shows list R packages installed harddrive indicates whether currently loaded. Packages loaded current session checked installed yet loaded unchecked. discuss packages later.Help - Help menu R functions. can either type name function search window, use code search function nameHelp - Help menu R functions. can either type name function search window, use code search function name\nFigure 1.2: RStudio interface labelled\n","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"make-rstudio-your-own","chapter":"1 Introduction to R and RStudio","heading":"1.2.4 Make RStudio your own","text":"can personalise RStudio GUI much like.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"get-help","chapter":"1 Introduction to R and RStudio","heading":"1.3 Get Help!","text":"lot sources information using R . helpful places get help issue, just learn moreThe R help system - type help() put name package function querying inside bracketsThe R help system - type help() put name package function querying inside bracketsVignettes - type browseVignettes() console hit Enter, list available vignettes packages displayedVignettes - type browseVignettes() console hit Enter, list available vignettes packages displayedCheat Sheets - available RStudio.com. common packages associate cheat sheet covering basics use . Download/bookmark ones use commonly ggplot2, data transformation dplyr, Data tidying tidyr & Data import.Cheat Sheets - available RStudio.com. common packages associate cheat sheet covering basics use . Download/bookmark ones use commonly ggplot2, data transformation dplyr, Data tidying tidyr & Data import.Google - use Google constantly, continually forget even basic tasks. want remind round number, might type something like R round number - using particular package include search term wellGoogle - use Google constantly, continually forget even basic tasks. want remind round number, might type something like R round number - using particular package include search term wellAsk help - stuck, getting error message, think next, ask someone. , classmate. important show code, include error message. \"work\" helpful. \"code, data using, want X, problem get.\"Ask help - stuck, getting error message, think next, ask someone. , classmate. important show code, include error message. \"work\" helpful. \"code, data using, want X, problem get.\"\nmay daunting send code someone help.\n\nnatural common feel apprehensive, think \ncode really bad. still feel ! learn share\nmistakes, eventually find funny look back\nearly mistakes, laugh mistakes still\noccasionally make!\n","code":""},{"path":"r-basics.html","id":"r-basics","chapter":"2 R basics","heading":"2 R basics","text":"Go Posit cloud enter Project labelled Day One - clone project provide project workspace.Follow instructions get used R command line, R works language.","code":""},{"path":"r-basics.html","id":"your-first-r-command","chapter":"2 R basics","heading":"2.1 Your first R command","text":"RStudio pane, navigate console (bottom left) type copy appear >Hit Enter keyboard.answer get?first line shows request made R, next line R's responseYou type > symbol: just R command prompt part actual command.complete expression entered prompt, evaluated result evaluated expression returned. result may auto-printed.Usually, interactive work, explicitly print objects print function; much easier auto-print typing name object hitting return/enter. However, writing scripts, functions, extended programs, sometimes need explicitly print objects.R vector printed, notice index vector printed square brackets [] side. example, see integer sequenceThe numbers square brackets part vector ; merely part printed output.Note : operator used create integer sequences","code":"\n10 + 20\n30\nprint(10 + 20) ## explicit printing\n\n10 + 20 ## autoprinting\n1:30##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n## [26] 26 27 28 29 30"},{"path":"r-basics.html","id":"operators","chapter":"2 R basics","heading":"2.1.1 Operators","text":"different types operators consider R","code":""},{"path":"r-basics.html","id":"assignment-operator","chapter":"2 R basics","heading":"2.1.1.1 Assignment Operator","text":"","code":""},{"path":"r-basics.html","id":"arithmetic-operators","chapter":"2 R basics","heading":"2.1.1.2 Arithmetic Operators","text":"","code":""},{"path":"r-basics.html","id":"relational-operators","chapter":"2 R basics","heading":"2.1.1.3 Relational Operators","text":"","code":""},{"path":"r-basics.html","id":"logical-operators","chapter":"2 R basics","heading":"2.1.1.4 Logical Operators","text":"","code":""},{"path":"r-basics.html","id":"membership-operators","chapter":"2 R basics","heading":"2.1.1.5 Membership Operators","text":"","code":""},{"path":"r-basics.html","id":"typos","chapter":"2 R basics","heading":"2.1.2 Typos","text":"\ngo talk types calculations can\nR, ’s things want point . first\nthing , R good software, ’s still software. ’s\npretty stupid, ’s stupid can’t handle typos. takes\nfaith meant type exactly type.\nSuppose forget hit shift key trying type +, result command ended 10 = 20 rather 10 + 20. Try replicate error message:Error 10 = 20 : invalid (do_set) left-hand side assignmentWhat's going : R tries interpret 10 = 20 command, make sense, gives error message.person sees , might realize typo + = keys right next keyboard. R insight, just gets confused.even trickier typos create errors accidentally form valid R commands. example, meant type 10 + 20 mistakenly pressed neighboring key, end 10 - 20. Now, R read mind know wanted add, subtract, something different happens:case, R produces right answer, wrong question.","code":"\n10 = 20\n10 - 20## [1] -10"},{"path":"r-basics.html","id":"more-simple-arithmetic","chapter":"2 R basics","heading":"2.1.3 More simple arithmetic","text":"One best ways get familiar R experiment . good news quite hard mess things , stress much. Just type whatever like console see happens.Now, console's last line looks like :blinking cursor next plus sign, means R patiently waiting complete command. believes still typing, tried run anything yet. plus sign bit different usual prompt (> symbol). nudge R ready \"add\" typing now typed . example, type 20 hit enter, R complete command like :Alternatively hit escape key, R forget trying return blank line.","code":"> 10+\n+ > 10 +\n+ 20\n[1] 30"},{"path":"r-basics.html","id":"try-some-simple-maths","chapter":"2 R basics","heading":"2.1.4 Try some simple maths","text":"Raise number power anotherMultiplying number \\(x\\) \\(n\\) times called \"raising \\(x\\) \\(n\\)-th power\". Mathematically, written \\(x^n\\). values \\(n\\) special names: particular \\(x^2\\) called \\(x\\)-squared, \\(x^3\\) called \\(x\\)-cubed. , 4th power 5 calculated like :\\[5^4 = 5 \\times 5 \\times 5 \\times 5 \\]","code":"\n1+7\n13-10\n4*6\n12/3\n5^4"},{"path":"r-basics.html","id":"perform-some-combos","chapter":"2 R basics","heading":"2.1.5 Perform some combos","text":"R follows standard order operations (BODMAS/BIDMAS), means first calculates within brackets, deals exponents, followed division multiplication, finally addition subtraction.look two examples see order operations affects results:Similarly want raise number fraction, need surround fraction parentheses ()first one calculates 16 raised power 1, divided answer two. second one raises 16 power half. big difference output.\ncursor console, can press arrow see\nprevious commands.\n\ncan run , edit . Later look \nscripts, essential way re-use, store edit commands.\n","code":"\n3^2-5/2\n(3^2-5)/2\n16^1/2\n16^(1/2)"},{"path":"r-basics.html","id":"true-or-false-data","chapter":"2 R basics","heading":"2.2 \"TRUE or FALSE\" data","text":"Time make sidebar onto another kind data. Many concepts programming rely idea logical value. logical value assertion whether something true false. implemented R pretty straightforward way. two logical values, namely TRUE FALSE. Despite simplicity, logical values useful things. see work.","code":""},{"path":"r-basics.html","id":"assessing-mathematical-truths","chapter":"2 R basics","heading":"2.2.1 Assessing mathematical truths","text":"Time explore different kind data. programming, many concepts rely logical values. logical value statement whether something true false. R, pretty straightforward. two logical values: TRUE FALSE. Despite simplicity, logical values incredibly useful. dive work.R, basic mathematics solid, room manipulation. ask R calculate 2 + 2, always provides answer,point, R performing calculations without explicitly asserting whether \\(2 + 2 = 4\\) true statement. want R make explicit judgment, can use command like :TRUEWhat done use equality operator, ==, force R make \"true false\" judgement.\ndifferent operator assignment operator\n= saw previously.\n\ncommon typo people make trying write logical commands\nR (languages, since “= versus\n==” distinction important programming languages)\naccidentally type = really mean\n==.\nOkay, see R thinks 2 +2 ==5:Now, see happens attempt make R believe two plus two equals five using assignment statement like 2 + 2 = 5 2 + 2 <- 5. outcome:Indeed, R fond idea. quickly realizes 2 + 2 variable (\"non-language object\" part saying), refuses let \"reassign\" . R can quite flexible allows remarkable things redefine parts , fundamental truths simply budge . tamper laws addition, redefine number 2.probably best.","code":"\n2 + 2## [1] 4\n2 + 2 == 4\n2+2 == 5## [1] FALSE\n2 + 2 = 5Error in 2 + 2 = 5 : target of assignment expands to non-language object"},{"path":"r-basics.html","id":"storing-outputs","chapter":"2 R basics","heading":"2.3 Storing outputs","text":"dealing complex questions, often helpful store answers use later steps. Fortunately, quite easy R. can assign results name assignment operator:literally means please assign value 1+2 name . use assignment operator <- make assignment.\nNote shortcut key <- Alt + - (Windows) Option + -\n(Mac)\nperforming action, achieve two things:notice top right-hand pane within Environment tab now object labeled value 3.\nFigure 2.1: object now visible withe value 3 Environment Pane\ncan check variable contains typing Console pressing Enter.can check variable contains typing Console pressing Enter.Keep mind see result operations type object R console press Enter.Keep mind see result operations type object R console press Enter.can now call object time R session perform calculations .happens assign value named object already exists R environment??? exampleThe value now 10.see previous assignment lost, gone forever replaced new value.can assign lots things objects, use calculations build objects.\nRemember: now change value b, value c \nchange.\n\nObjects totally independent \nmade.\n\nOverwriting objects new values means old value lost.\nvalue c?[1] 15When c created product b values 10 15 respectively.\nre-ran command c <- + b changing value b get value 17.Look environment tab - see starting fill now!\nRStudio default save objects memory close\nsession.\n\nnext time logon. might seem nice\nable close things pick left , \nactually quite dangerous. ’s messy, can cause lots problems\nwork scripts later, don’t !\n\nstop RStudio saving objects default go Tools >\nProject Options option change “Save workspace .RData exit” \n“” “Never”.\n\nInstead going learn use scripts quickly re-run\nanalyses working .\n","code":"\na <- 1+2\na  ## autoprinting\n\nprint(a) ## explicit printing\n3\n2 * a\n6\na <- 10\na\nb <- 5\nc <- a + b\nb <- 7\nb\nc"},{"path":"r-basics.html","id":"choosing-names","chapter":"2 R basics","heading":"2.3.1 Choosing names","text":"Use informative variable names. general rule, using meaningful names like orange apple preferred arbitrary ones like variable1 variable2. Otherwise hard remember contents different variables actually .Use informative variable names. general rule, using meaningful names like orange apple preferred arbitrary ones like variable1 variable2. Otherwise hard remember contents different variables actually .Use short variable names. Typing pain -one likes . much prefer use name like apple name like pink_lady_apple.Use short variable names. Typing pain -one likes . much prefer use name like apple name like pink_lady_apple.Use one conventional naming styles multi-word variable names. R lets use certain things legal names. Legal names must start letter number, can followed sequence letters, numbers, ., _. R like using spaces. Upper lower case names allowed, R case sensitive Apple apple different.Use one conventional naming styles multi-word variable names. R lets use certain things legal names. Legal names must start letter number, can followed sequence letters, numbers, ., _. R like using spaces. Upper lower case names allowed, R case sensitive Apple apple different.favourite naming convention snake_case short, lower case , spaces words separated _. easy read easy remember.favourite naming convention snake_case short, lower case , spaces words separated _. easy read easy remember.\nFigure 2.2: courtesy Allison Horst\n","code":""},{"path":"r-basics.html","id":"r-objects","chapter":"2 R basics","heading":"2.4 R objects","text":"R, five fundamental \"atomic\" classes objects:Character: represent text character strings.Character: represent text character strings.Numeric (num) Double (dbl): used real numbers (e.g., decimal numbers).Numeric (num) Double (dbl): used real numbers (e.g., decimal numbers).Integer: Used whole numbers.Integer: Used whole numbers.Complex: complex numbers.Complex: complex numbers.Logical: Represented True False, used logical values.Logical: Represented True False, used logical values.basic type R object vector. can create empty vectors using vector() function. primary rule regarding vectors R vector can contain objects class.However, good rule, exception, \"list.\" Lists represented vectors can hold objects different classes, often used.","code":""},{"path":"r-basics.html","id":"numbers","chapter":"2 R basics","heading":"2.4.1 Numbers","text":"R, \"dbl\" \"num\" refer numeric data types, subtle difference :dbl (\"double\"): refers double-precision floating-point numbers, capable storing real numbers high precision. Double-precision numbers decimal places accuracy can represent wider range values without loss precision. perform arithmetic operations, R typically returns results \"dbl\" values default.dbl (\"double\"): refers double-precision floating-point numbers, capable storing real numbers high precision. Double-precision numbers decimal places accuracy can represent wider range values without loss precision. perform arithmetic operations, R typically returns results \"dbl\" values default.num (\"numeric\"): \"Num\" general term includes double-precision floating-point numbers also integer values. R, integers subtype numeric data. Numeric data can include integers double-precision floating-point numbers, depending specific data represented.num (\"numeric\"): \"Num\" general term includes double-precision floating-point numbers also integer values. R, integers subtype numeric data. Numeric data can include integers double-precision floating-point numbers, depending specific data represented., \"dbl\" specifically denotes double-precision floating-point numbers, \"num\" encompasses broader range numeric data, including integers double-precision numbers. cases, can use \"num\" work numeric data general sense, \"dbl\" focuses higher-precision representation real numbers.","code":""},{"path":"r-basics.html","id":"attributes","chapter":"2 R basics","heading":"2.5 Attributes","text":"R objects can come attributes, essentially metadata object. metadata handy help describe object. instance, data frame, column names serve attributes, clarifying data contained column. examples R object attributes:names() dimnames()names() dimnames()dimensions (e.g., matrices arrays) dim()dimensions (e.g., matrices arrays) dim()class() (e.g., integer, numeric)class() (e.g., integer, numeric)length()length()user-defined attributes metadataOther user-defined attributes metadataYou can access attributes object, , using attributes() function. R object attributes, attributes() function return NULL.","code":""},{"path":"r-basics.html","id":"vectors","chapter":"2 R basics","heading":"2.6 Vectors","text":"working R objects containing single element data (technical term scalar), commonly work vectors. vector sequence elements, data type. logical, numerical, character etc.","code":"\nnumeric_vector <- c(1,2,3)\n\ncharacter_vector <- c(\"fruits\", \"vegetables\", \"seeds\")\n\nlogical_vector <- c(TRUE, TRUE, FALSE)\n\ninteger_vector <- 1:10"},{"path":"r-basics.html","id":"coercion","chapter":"2 R basics","heading":"2.6.1 Coercion","text":"R, different classes objects mixed together vector, coercion occurs ensure every element vector belongs class. Coercion process converting objects common class make combination reasonable. see effects implicit coercion provided examples:, outcome depends R can reasonably represent objects vector. aims create vector inclusive class accommodate mixed objects. Keep mind coercion can lead unexpected results, essential aware implicit type conversion mixing different data types R.Objects can also explicitly coerced one class another using .* functions, available.Create following vector check class, note happens attempt coerce numeric, logical characterSometimes, R can’t figure coerce object can result NAs produced","code":"\ny <- c(2.3, \"a\") # Here, we're mixing a numeric value (1.7) with a character value (\"a\"). To make them compatible, R coerces both elements into character values. So, y becomes a character vector.\n\ny <- c(TRUE, 2) # In this case, we're combining a logical value (TRUE) with a numeric value (2). R coerces the logical value into 1, so y becomes a numeric vector.\n\ny <- c(\"a\", TRUE) # We're mixing a character value (\"a\") with a logical value (TRUE). In this scenario, R coerces the logical value into a character value, resulting in y becoming a character vector.\nx <- 0:5\nas.numeric(x)\n\nas.logical(x)\n\nas.character(x)## [1] 0 1 2 3 4 5\n## [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n## [1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\""},{"path":"r-basics.html","id":"subsetting-vectors","chapter":"2 R basics","heading":"2.6.2 Subsetting vectors","text":"numerical indexing, enter vector integers corresponding values vector want access form [index], vector, index vector index values. example, let’s use numerical indexing get values character_vectorWe can also use logical indexing","code":"\ncharacter_vector[2]\n# [1] \"vegetables\"\n\n\ncharacter_vector[1:2]\n# [1] \"fruits\"     \"vegetables\"\n\ncharacter_vector[c(1,3)]\n# [1] \"fruits\" \"seeds\" \nnumeric_vector <=2\n# [1]  TRUE  TRUE FALSE\n\ncharacter_vector == \"fruits\"\n#[1]  TRUE FALSE FALSE"},{"path":"r-basics.html","id":"operations-on-vectors","chapter":"2 R basics","heading":"2.6.3 Operations on vectors","text":"can run basic operations vectors scalarsA super-wickedly, important, concept: R likes operate vectors length, encounters two vectors different lengths binary operation, merely replicates (recycles) smaller vector length longest vector, operation.","code":"\nx <- c(1,2,3)\ny <- c(2,3,4)\n\n# Operations will happen between vectors\nx*y## [1]  2  6 12\nx <- c(1,2,3)\ny <- c(1,2)\n\n# Operations will happen between vectors\nx*y[1] 1 4 3\n\nWarning: longer object length is not a multiple of shorter object length[1] 1 4 3\n"},{"path":"r-basics.html","id":"matrices","chapter":"2 R basics","heading":"2.7 Matrices","text":"Matrices can thought vectors added dimension attribute. dimension attribute two-element integer vector specifying number rows columns, defines shape structure matrix.\nData frames also two-dimensional can store columns \ndifferent data types - matrices simpler consist elements\ndata type.\nMatrices constructed \"columns-first\" entries start \"upper left\" run columns.can create matrices several ways:Adding dim() existing vectorsAdding dim() existing vectorsColumn/row-binding vectors cbind() rbind()Column/row-binding vectors cbind() rbind()see last operation column names added matrix, can add, change remove column rownames matrix colnames() rownames()","code":"\nm <- matrix(1:6, nrow = 2, ncol = 3) \nm##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\nattributes(m)## $dim\n## [1] 2 3\nm <- 1:6\n\ndim(m) <- c(2,3)\n\nm##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\na <- 1:2\nb <- 3:4\nc <- 5:6\n\nm <- cbind(a,b,c)\nm##      a b c\n## [1,] 1 3 5\n## [2,] 2 4 6\nrownames(m) <- c(\"y\",\"z\")\nm##   a b c\n## y 1 3 5\n## z 2 4 6"},{"path":"r-basics.html","id":"lists","chapter":"2 R basics","heading":"2.8 Lists","text":"Lists versatile fundamental data type R. set apart regular vectors allowing store elements different classes within list. flexibility makes lists powerful various data structures data manipulation tasks.can create lists explicitly using list() function, can take arbitrary number arguments. Lists, combined functions like \"apply\" family, enable perform complex versatile data manipulations analyses R. Lists often used represent heterogeneous data structures, datasets different columns can different data types structures.can also create empty lists set lengths vector() function, can useful preallocating memory iterations - see laterLists can also names","code":"\nl <- list(1, \"apple\", TRUE )\nl## [[1]]\n## [1] 1\n## \n## [[2]]\n## [1] \"apple\"\n## \n## [[3]]\n## [1] TRUE\nl <- vector(\"list\", length = 3)\nl## [[1]]\n## NULL\n## \n## [[2]]\n## NULL\n## \n## [[3]]\n## NULL\nnames(l) <- c(\"apple\",\"orange\",\"pear\")"},{"path":"r-basics.html","id":"dataframes","chapter":"2 R basics","heading":"2.9 Dataframes","text":"Data frames essential storing tabular data R find extensive use various statistical modeling data analysis applications. offer structured way manage work data R, packages like dplyr, developed Hadley Wickham, provide optimized functions efficient data manipulation data frames.key characteristics advantages data frames:Tabular Structure: Data frames type list, element list represents column. number rows column , tabular structure makes suitable working datasets.Tabular Structure: Data frames type list, element list represents column. number rows column , tabular structure makes suitable working datasets.Mixed Data Types: Unlike matrices, data frames can contain columns different classes objects. flexibility allows handle real-world datasets often include variables different data types.Mixed Data Types: Unlike matrices, data frames can contain columns different classes objects. flexibility allows handle real-world datasets often include variables different data types.Column Row Names: Data frames include column names, describe variables predictors. Additionally, special attribute called \"row.names\" provides information row data frame.Column Row Names: Data frames include column names, describe variables predictors. Additionally, special attribute called \"row.names\" provides information row data frame.Creation Conversion: Data frames can created various ways, reading data files using functions like read.table() read.csv(). can also create data frames explicitly data.frame().Creation Conversion: Data frames can created various ways, reading data files using functions like read.table() read.csv(). can also create data frames explicitly data.frame().Working Data: Data frames especially useful working datasets require data cleaning, transformation, merging. provide high level data organization, many R packages designed work seamlessly data frames.Working Data: Data frames especially useful working datasets require data cleaning, transformation, merging. provide high level data organization, many R packages designed work seamlessly data frames.dplyr: dplyr package optimized efficient data manipulation data frames. offers set functions perform data operations quickly intuitively.dplyr: dplyr package optimized efficient data manipulation data frames. offers set functions perform data operations quickly intuitively.Data frames fundamental structure managing tabular data R. excel handling datasets mixed data types essential various data analysis modeling tasks.create dataframe vectors use data.frame() functionThere one key argument data.frame() similar functions called stringsAsFactors. default, data.frame() function automatically convert string columns specific type object called factor R. factor nominal variable well-specified possible set values can take . example, one can create factor sex can take values \"male\" \"female\".\nSince R ver 4.0 release, stringsAsFactors set FALSE \ndefault!\nHowever, ’m sure ’ll discover, R automatically convert string data factors can lead lots strange results. example: factor sex data, want add new value called , R yell return error. hate, hate, HATE happens. , rare cases find factors useful, almost always don’t want need . reason, avoid costs.tell R convert string columns factors, need include argument stringsAsFactors = FALSE using functions data.frame()access specific column dataframe name, use $ operator form df$name df name dataframe, name name column interested . operation return column want vector.$ operator returns vector, can easily calculate descriptive statistics columns dataframe applying favorite vector function (like mean()).can also use $ add new vectors dataframeChanging column names easy combination names() indexing","code":"\nsurvey <- data.frame(\"index\" = c(1, 2, 3, 4, 5),\n                     \"sex\" = c(\"m\", \"m\", \"m\", \"f\", \"f\"),\n                     \"age\" = c(99, 46, 23, 54, 23))\nstr(survey)## 'data.frame':    5 obs. of  3 variables:\n##  $ index: num  1 2 3 4 5\n##  $ sex  : chr  \"m\" \"m\" \"m\" \"f\" ...\n##  $ age  : num  99 46 23 54 23\nsurvey$sex## [1] \"m\" \"m\" \"m\" \"f\" \"f\"\nmean(survey$age)## [1] 49\nsurvey$follow_up <- c(T,F,T,F,F)\nsurvey\nnames(survey)[1] <- \"ID\"\n\nsurvey"},{"path":"r-basics.html","id":"slice-dataframes","chapter":"2 R basics","heading":"2.9.1 Slice dataframes","text":"Matrices dataframes can sliced [,]slice subset","code":"# Return row 1\ndf[1, ]\n\n\n# Return column 5 as vector\ndf[, 5]\n\n# Return column as data.frame\ndf[5]\n\n# Rows 1:5 and column 2\ndf[1:5, 2]\n\n# Single element\ndf[[1,2]]\n\nsurvey_slice <- subset(x = survey,\n      subset = age < 50 &\n               sex == \"m\")\n\nsurvey_slice"},{"path":"r-basics.html","id":"tibbles","chapter":"2 R basics","heading":"2.9.2 Tibbles","text":"“Tibbles” new modern data frame. keeps many important features original data frameA tibble never changes input type.tibble never changes input type.tibble can columns lists.tibble can columns lists.tibble can non-standard variable names.\ncan start number contain spaces.\n-use refer backtick.\ntibble can non-standard variable names.can start number contain spaces.\n-use refer backtick.Tibbles print first 10 rows columns fit screen. - column displays data typeTibbles print first 10 rows columns fit screen. - column displays data typeThe way make tibbles similar making dataframes","code":"\nsurvey_tibble <- tibble(\"index\" = c(1, 2, 3, 4, 5),\n                     \"sex\" = c(\"m\", \"m\", \"m\", \"f\", \"f\"),\n                     \"age\" = c(99, 46, 23, 54, 23))\n# Some R functions for looking at tibbles and dataframes\n\nhead(survey_tibble, n=2)\ntail(survey_tibble, n=1)\nnrow(survey_tibble)\nncol(survey_tibble)\ncolnames(survey_tibble)\nview(survey_tibble)\nglimpse(survey_tibble)\nstr(survey_tibble)"},{"path":"r-basics.html","id":"brackets-with-tibbles","chapter":"2 R basics","heading":"2.9.3 Brackets with tibbles","text":"behaviour single [] indexing tibbles slightly different.dataframe [,1] extracts single column vector, tibble conversion occur. Instead returns tibble single column, vector.extract vector must use:https://tibble.tidyverse.org/https://cran.r-project.org/web/packages/tibble/vignettes/tibble.html","code":"\n# pull function\npull(survey_tibble, sex)\n\n# double brackets\nsurvey_tibble[[2]]"},{"path":"r-basics.html","id":"matrix-dataframe-tibble-functions","chapter":"2 R basics","heading":"2.10 Matrix, dataframe, tibble functions","text":"Important functions understanding matrices dataframes.","code":""},{"path":"r-basics.html","id":"functions","chapter":"2 R basics","heading":"2.11 Functions","text":"Functions tools R. one helps us different task.Take example function use round number certain number digits - function called roundHere's example:start command function name round. name followed parentheses (). Within place arguments function, separated comma.arguments:x = 2.4326782647 (number like round)x = 2.4326782647 (number like round)digits = 2 (number decimal places like round )digits = 2 (number decimal places like round )Arguments inputs give function. arguments form name = value name specifies argument, value providing define input. first argument x number like round, value 2.4326782647. second argument digits like number rounded specify 2. limit many arguments function .\nCopy paste following code console.\nhelp documentation round()appear bottom right help panel. usage section, see round()takes following form:arguments section, explanations arguments. xis number vector wish round values. digits number decimal places used. description can see value supplied digits default 0 whole number rounding.Read 'Details' section find happens rounding last digit 5.try example just change required argument digits\nCopy paste following code console.\nNow can change additional arguments produce different set numbers.time R still rounded number, done set number 'decimal places'.Always remember use help documentation help understand arguments function requires.","code":"\nround(x  = 2.4326782647, digits = 2)\nhelp(round)\nround(x, digits = 0)\nround(x  = 2.4326782647)## [1] 2\nround(x  = 2.4326782647, digits = 2)## [1] 2.43"},{"path":"r-basics.html","id":"storing-the-output-of-functions","chapter":"2 R basics","heading":"2.11.1 Storing the output of functions","text":"need answer function later calculation. answer use assignment operator <-.example assign values two R objects can call inside R function though putting numbers directly.\nCopy paste following code console.\nvalue assigned R object rounded_number ?[1] 2.433","code":"\nnumber_of_digits <- 3\n\nmy_number <- 2.4326782647\n\nrounded_number <- round(x  = my_number, \n                        digits = number_of_digits)"},{"path":"r-basics.html","id":"more-fun-with-functions","chapter":"2 R basics","heading":"2.11.2 More fun with functions","text":"Copy paste :Looks like even give names arguments function still work. works function round expects us give number value first, argument rounding digits second. assumes know expected ordering within function, might case functions use lot. give arguments proper names can actually introduce order want.Try :gives different answer\nRemember naming arguments overrides position defaults\nknow argument orders defaults? Well get know lot functions work practice, can also use help() .","code":"\nround(2.4326782647, 2)\nround(digits = 2, x  = 2.4326782647)\nround(2, 2.4326782647)"},{"path":"r-basics.html","id":"packages-1","chapter":"2 R basics","heading":"2.12 Packages","text":"install R access range functions including options data wrangling statistical analysis. functions included default installation typically referred Base R useful cheat sheet shows many Base R functions hereHowever, power R extendable open source - anyone can create new package extends functions R.R package container various things including functions data. make easy complicated protocols using custom-built functions. Later see can write simple functions. Packages lot like new apps extending functionality phone can .","code":""},{"path":"r-basics.html","id":"loading-packages","chapter":"2 R basics","heading":"2.12.1 Loading packages","text":"use functions package script must loaded call functions data contain. sensible place put library calls packages top script.","code":"\nlibrary(package_name)"},{"path":"r-basics.html","id":"calling-functions-from-packages","chapter":"2 R basics","heading":"2.12.2 Calling Functions from Packages","text":"loading package, can call functions using either function() full package_name::function_name() syntax. allows specify package explicitly using particular function.Calling function explicitly via package can useful forAvoiding Conflicts:Sometimes, multiple packages may functions name. explicitly specifying package package_name::, avoid naming conflicts ensure R uses function intended package.Clarity:can make code transparent easier understand, especially cases function's origin immediately obvious. helpful others read code.Though still good practice comment top script package required even include library(package)Debugging:troubleshooting issues debugging code, specifying package source function can help pinpoint problems ensure correct function used.","code":"\nlibrary(dplyr)\n\nfilter(dataframe, condition)\n\ndplyr::filter(dataframe, conditions)"},{"path":"r-basics.html","id":"error","chapter":"2 R basics","heading":"2.13 Error","text":"Things go wrong eventually, always ...R pedantic, even smallest typo can result failure typos impossilbe avoid. make mistakes. One type mistake make error. code fails run. common causes error :typostyposmissing commasmissing commasmissing bracketsmissing bracketsThere's nothing wrong making lots errors. trick panic get frustrated, read error message script carefully start debug (later)...... sometimes need walk away come back later!\nTry typing command help() R console, \nopen new tab bottom right.\n\nPut function package brackets get help \nspecific topic\n\nFigure 2.3: courtesy Allison Horst\n","code":""},{"path":"r-basics.html","id":"activity","chapter":"2 R basics","heading":"2.14 Activity","text":"","code":""},{"path":"r-basics.html","id":"complete-this-quiz","chapter":"2 R basics","heading":"2.14.1 Complete this Quiz","text":"get correct answer, answer box turn green. Sometimes work Internet Explorer Edge sure use Chrome Firefox.Question 1. output 5^4Question 2. answer get type 2+2 = 4 R console?TRUEFALSEErrorIf wanted R make judgement must use == = otherwise get Error messageQuestion 3. symbol use want assign value output function R objectQuestion 4. value ran following commands?Question 5. variable naming conventions written correctly?snake_casecamelCaseScreaming_Snake_Casekebab-caseQuestion 6. type R console want help round() function?Question 7. statements function arguments trueArguments inputs give functionValues R arguments must always defined userNaming arguments supersedes position functionThere limit number arguments function haveQuestion 8. Evaluate statement \"R Package can contain code functions, data, .\"TRUEFALSE","code":"\na <-  12*2\n\na <- 5"},{"path":"project-oriented-workflows.html","id":"project-oriented-workflows","chapter":"3 Project-oriented workflows","heading":"3 Project-oriented workflows","text":"RStudio, project way organize work within IDE. fundamental concept designed enhance workflow providing structured efficient means managing R-related tasks files. R projects useful:1. Organized File Structure: R projects encourage maintain well-organized file structure work. Instead scattered R scripts, data files, figures, create dedicated folder project. folder typically contains project-related materials, including data, code, figures, notes, relevant files.2. Working Directory Management: open R project RStudio, automatically sets working directory project's folder. ensures file paths relative project's location. working directory intentionality eliminates need setting working directories manually using absolute paths code.3. Portability Collaboration: R projects make work portable collaborative. Since paths relative project folder, project can easily shared others. ensures code works consistently across different computers users, promoting collaboration reproducibility.4. RStudio Integration: RStudio integrates project management seamlessly. can designate folder R project, RStudio leaves .Rproj file folder store project-specific settings. double-click file, opens fresh instance RStudio project's working directory file browser pointed project folder.5. Efficient Workflow: RStudio provides various menu options keyboard shortcuts managing projects. includes ability open existing projects, switch projects, even launch multiple instances RStudio different projects.essence, R projects help maintain clean organized workspace, improve collaboration, ensure work remains reproducible transferable across different environments time. best practice data scientists analysts working R, fosters disciplined use relative file paths working directories, crucial reliability scalability R projects.","code":""},{"path":"project-oriented-workflows.html","id":"setting-up-a-new-project","chapter":"3 Project-oriented workflows","heading":"3.1 Setting up a new project","text":"start new R project begin working distinct task, research project, analysis. ensures work well-organized, especially beneficial need collaborate, share, revisit project later.create open R project RStudio:Go \"File\" RStudio menu.Go \"File\" RStudio menu.Select \"New Project...\"Select \"New Project...\"Choose project type create new directory project.Choose project type create new directory project.Click \"Create Project.\"Click \"Create Project.\"new project created .Rproj file. can open double-clicking file using \"File\" menu RStudio.set dedicated workspace project, ensuring working directory file paths appropriately managed.","code":""},{"path":"project-oriented-workflows.html","id":"avoiding-setwd-and-promoting-safe-file-paths","chapter":"3 Project-oriented workflows","heading":"3.2 Avoiding setwd() and Promoting Safe File Paths:","text":"maintain clean efficient workflow R, advisable avoid using setwd() beginning script. practice promotes use safe file paths particularly important projects multiple collaborators working across different computers.","code":""},{"path":"project-oriented-workflows.html","id":"absolute-vs.-relative-paths","chapter":"3 Project-oriented workflows","heading":"3.2.1 Absolute vs. Relative Paths:","text":"absolute file paths provide explicit way locate resources, significant drawbacks, incompatibility reduced reproducibility. Relative file paths, hand, relative current working directory, making shorter, portable, reproducible.Absolute file path path contains entire path file directory starting Home directory ending file directory wish access e.g.share files, another user won’t directory structure , need recreate file pathsIf share files, another user won’t directory structure , need recreate file pathsIf alter directory structure, ’ll need rewrite pathsIf alter directory structure, ’ll need rewrite pathsAn absolute file path likely longer relative path, backslashes need edited, scope error.absolute file path likely longer relative path, backslashes need edited, scope error.Relative filepath path relative working directory location computer.use RStudio Projects, wherever .Rproj file located set working directory. means .Rproj file located project folder relative path data :filepath shorter means share project someone else script run without editing.","code":"/home/your-username/project/data/penguins_raw.csvdata/penguins_raw.csv"},{"path":"project-oriented-workflows.html","id":"organizing-projects","chapter":"3 Project-oriented workflows","heading":"3.2.2 Organizing Projects:","text":"key aspect workflow organizing logical project separate folder computer. ensures files scripts well-structured, making easier manage work.","code":""},{"path":"project-oriented-workflows.html","id":"the-here-package","chapter":"3 Project-oriented workflows","heading":"3.2.3 The here Package:","text":"enhance organization ensure file paths independent specific working directories, package comes play. () function provided package builds file paths relative top-level directory project.project example raw data files data/raw directory, scripts scripts directory, want save processed data data/processed directory.access data using relative filepath need:access data provide directories desired file, () builds required filepath starting top level project time","code":"my_project.RProj/\n    |- data/\n    |   |- raw/\n    |       |- penguins_raw.csv\n    |   |- processed/\n    |- scripts/\n    |   |- analysis.R\n    |- results/\n\n\nraw_data <- read.csv(\"data/raw/penguins_raw.csv\")\nlibrary(here)\n\nraw_data <- read.csv(here(\"data\", \"raw\", \"penguins.csv\"))"},{"path":"project-oriented-workflows.html","id":"here-and-rmarkdown","chapter":"3 Project-oriented workflows","heading":"3.2.3.1 here and Rmarkdown","text":"One quirk working .Rmd Rmarkdown file \"knit\" code compiled working directory folder .Rmd file lives , working script .R live session default working directory top level project file. frustrating confusing process can lead errors attempting compile documents.use package default behaviour overridden. working directory knitting top-level .Rproj location !","code":""},{"path":"project-oriented-workflows.html","id":"reading","chapter":"3 Project-oriented workflows","heading":"3.2.4 Reading","text":"https://github.com/jennybc/here_herehttps://cran.r-project.org/web/packages//index.html","code":""},{"path":"project-oriented-workflows.html","id":"blank-slates","chapter":"3 Project-oriented workflows","heading":"3.3 Blank slates","text":"working data analysis coding projects R, crucial ensure analysis remains clean, reproducible, free hidden dependencies.Hidden dependencies elements R session might immediately apparent can significantly impact reliability predictability work.example many data analysis scripts start command rm(list = ls()). command clears user-created objects workspace, leaves hidden dependencies reset R session, can cause issues :Hidden Dependencies: Users might unintentionally rely packages settings applied current session.Hidden Dependencies: Users might unintentionally rely packages settings applied current session.Incomplete Reset: Package attachments made library() persist, customized options remain set.Incomplete Reset: Package attachments made library() persist, customized options remain set.Working Directory: working directory affected, potentially causing path-related problems future scripts.Working Directory: working directory affected, potentially causing path-related problems future scripts.","code":""},{"path":"project-oriented-workflows.html","id":"restart-r-sessions","chapter":"3 Project-oriented workflows","heading":"3.3.1 Restart R sessions","text":"Restarting R sessions using scripts history best practice maintaining clean, reproducible, efficient workflow. addresses limitations rm(list = ls()) ensuring complete reset minimizing hidden dependencies, enhancing code organization, ensuring analysis remains robust predictable across sessions shared others.","code":""},{"path":"basic-importexport.html","id":"basic-importexport","chapter":"4 Basic Import/Export","heading":"4 Basic Import/Export","text":"loading data R, choice method matters, especially tabular data like CSV files. three common approaches:base R's read.csv()base R's read.csv()data.table package fread()data.table package fread()readr package functions like read_csv()performance gains data.table readr become significant data size grows, especially datasets many rows. files larger 100 MB, fread() read_csv() five times faster read.csv(). However, choice consider memory usage, large datasets may impact .Keep mind data.table readr separate packages, requiring installation loading.readr functions","code":""},{"path":"basic-importexport.html","id":"export","chapter":"4 Basic Import/Export","heading":"4.1 Export","text":"packages functions inverse \"write\" function produce files variety formats R objects.","code":""},{"path":"basic-importexport.html","id":"r-data-files","chapter":"4 Basic Import/Export","heading":"4.2 R data files","text":"R binary file formats easy saving loading data, .Rdata RDS:.Rdata file binary file format R used save entire workspace, includes objects, functions, data frames, . captures current R session's state, allowing save load entire workspace, including objects, single file..RDS file, R Data Serialization file, binary file format R used save individual R objects. Unlike .Rdata, meant save entire workspace specific objects data structures.Using file formats can several advantages:Preservation Data Types Structure: .RDS files preserve original data types structure R objects, including lists, data frames, functions .Efficiency Speed: Reading writing data .RDS format efficient faster working text-based formats like CSV.Control Specific Objects: .RDS files allow save load specific R objects datasets, providing control flexibility.","code":"\n# Create some sample data\nmy_data <- data.frame(\n  ID = 1:3,\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Score = c(95, 87, 92)\n)\n\n# Save the entire workspace to an .Rdata file\nsave.image(file = \"my_workspace.Rdata\")\n\n# Clear the current workspace\nrm(list = ls())\n\n# Load the entire workspace from the .Rdata file\nload(\"my_workspace.Rdata\")\n\n# Access the loaded data\nprint(my_data)\n# Create some sample data\nmy_data <- data.frame(\n  ID = 1:3,\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Score = c(95, 87, 92)\n)\n\n# Save the data frame to an .RDS file\nsaveRDS(my_data, file = \"my_data.RDS\")\n\n# Clear the current workspace\nrm(list = ls())\n\n# Load the data frame from the .RDS file\nloaded_data <- readRDS(\"my_data.RDS\")\n\n# Access the loaded data\nprint(loaded_data)"},{"path":"basic-importexport.html","id":"objects-that-take-a-long-time","chapter":"4 Basic Import/Export","heading":"4.2.1 Objects that take a long time","text":"parts analysis time-consuming execute, indication suitable time adopt modular approach. approach involves dividing analysis distinct phases, phase dedicated script resulting outputs.can address isolating computationally intensive steps separate scripts saving critical object file using saveRDS. Subsequently, can create scripts downstream tasks reload essential object readRDS. Breaking analysis logical steps clear inputs outputs generally sound practice.","code":""},{"path":"scripts.html","id":"scripts","chapter":"5 Scripts","heading":"5 Scripts","text":"ensure clarity understanding, begin script brief description purpose. description serve reference point anyone accesses script. Even make updates later , initial description help maintain clarity context, preventing confusion revisiting code future.","code":""},{"path":"scripts.html","id":"organised-scripts","chapter":"5 Scripts","heading":"5.1 Organised scripts","text":"Load necessary packages beginning script.\ncommon start basic packages add specialized libraries analysis progresses. However, crucial load required packages beginning script. practice ensures someone else needs run script , necessary libraries readily available, preventing issues middle execution due unrecognized functions. Small coding details matter.Name code sections use quick navigation.\ncode grows, may become extensive challenging manage. keep organized, divide code sections, specific name, can folded unfolded easy navigation. can also use 'drop-' menu bottom script screen move sections.create new code section, insert \"####\" \"----\" end comment marks beginning new section.understand, good intentions, often neglect task thoroughly commenting code. made promise many times, even now, struggle consistently. , ask? reasons:often tell analysis crucial.believe understand code.usually immediate collaborators need use code.However, arguments somewhat shortsighted. reality :valuable relevant analysis loses value neither others can understand . ()may know moment, feel way month two moved another project, someone innocently asks defined critical variable. memory unreliable. important rely every piece code produce.Even active collaborators time analysis, someone eventually need use code. position forever. creating legacy , someday, someone rely , matter distant day may seem right now., makes code good reproducible?Thoughtful clear comments.Code logical efficient.Code appropriately timed tested.","code":""},{"path":"scripts.html","id":"use-style-guides","chapter":"5 Scripts","heading":"5.2 Use style guides","text":"Consider using style guide, tidyverse style guide, beneficial practice several reasons:Consistency: style guide enforces consistent code formatting naming conventions throughout project. consistency improves code readability makes easier others understand code. multiple people working project, shared style guide ensures everyone's code looks similar, reducing confusion errors.Readability: Following style guide leads readable code. Code often read frequently written, making easy understand crucial. tidyverse style guide, example, emphasizes clear self-explanatory code, improving comprehension current future users. Good coding style like correct punctuation: can manage without , butitsuremakesthingseasiertoreadCollaboration: working team, adhering common style guide makes easier collaborate. reduces friction associated different team members using varying coding styles preferences. streamlines code reviews simplifies process maintaining extending codebase.Error Reduction: style guide can help identify prevent common coding errors. promotes best practices can include guidelines avoiding pitfalls potential issues. reduces likelihood bugs enhances overall quality code.","code":""},{"path":"scripts.html","id":"separate-your-scripts","chapter":"5 Scripts","heading":"5.3 Separate your scripts","text":"Separating analysis distinct scripts different steps sound practice data analysis. script can focus specific task step, making work organized understandable.can use source function R run previous dependencies, ensuring can reproduce work easily. Additionally, computationally intensive processes dealing large datasets, can save load intermediate results RDS format. approach conserves memory also saves time re-running analysis.","code":"project_folder/\n│\n├── data/\n│   ├── data.csv\n│   ├── processed_data.rds\n│\n├── scripts/\n│   ├── data_preparation.R\n│   ├── data_analysis.R\n│   ├── visualization.R\n│   ├── helper_functions.R\n│\n├── output/\n│   ├── result.csv\n│\n├── README.md\n│\n├── project.Rproj\n"},{"path":"scripts.html","id":"activity-1","chapter":"5 Scripts","heading":"5.4 Activity","text":"Using Tidyverse style guide help, improve layout readability script?","code":"\n# Install and load necessary packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\npenguins_clean <- janitor::clean_names(penguins_raw)\n\n\n## Data is selected by species, island, culmen length and depth and flipper, then NAs are dropped and a new column is made of length/depth and the mean is summaries for flipper length and length/depth ratio\npenguins_clean |> select(species, island, culmen_length_mm, culmen_depth_mm, flipper_length_mm)  |> drop_na(culmen_length_mm, culmen_depth_mm, flipper_length_mm) |> mutate(culmen_ratio = culmen_length_mm / culmen_depth_mm) |> group_by(species, island) |> summarise(mean_flipper_length = mean(flipper_length_mm), mean_culmen_ratio = mean(culmen_ratio)) |> arrange(species, island) -> penguins_culmen_ratio\n\n## View summary table\nprint(penguins_culmen_ratio)\n\n\n### Data visualization \npenguins_clean |>\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm, color = species)) +\n          geom_point() +\n                labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\") +\n                      theme_minimal()\n# Packages ----\n# Install and load necessary packages\nlibrary(tidyverse)\nlibrary(janitor)\n# Loads the penguins dataset\nlibrary(palmerpenguins)\n\n\n# Clean the data ----\npenguins_raw <- janitor::clean_names(penguins_raw)\n\n# Analysis----\n# Data exploration and manipulation to make culmen ratio\npenguins_culmen_ratio <- penguins_raw |> \n  select(species, island, culmen_length_mm, culmen_depth_mm, flipper_length_mm)  |> \n  drop_na(culmen_length_mm, culmen_depth_mm, flipper_length_mm) |> \n  mutate(culmen_ratio = culmen_length_mm / culmen_depth_mm) |>\n  group_by(species, island) |>\n  summarise(mean_flipper_length = mean(flipper_length_mm), \n            mean_culmen_ratio = mean(culmen_ratio)) |>\n  arrange(species, island)\n\n# View summary table\nprint(penguins_culmen_ratio)\n\n# Plots----\n# Data visualization using ggplot2\npenguins_clean |>\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm, color = species)) +\n  geom_point() +\n  labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\") +\n  theme_minimal()"},{"path":"naming-things.html","id":"naming-things","chapter":"6 Naming things","heading":"6 Naming things","text":"reading things environment come filenames., makes good file name? Well, key principles keep mind:1. Machine Readable: file names machine-readable, meaning work well regular expressions globbing. allows search files using keywords, help regex stringr package. achieve , avoid spaces, punctuation, accented characters, case sensitivity. makes searching files filtering lists based names easier future.2. Easy Compute : File names structured consistently, part name serving distinct purpose separated delimiters. structure makes easy extract information file names, splitting meaningful components.3. Human Readable: good file name human-readable. provide clear indication file contains, just looking name. important even someone unfamiliar work can easily understand file's content.4. Compatible Default Ordering: computer automatically sort files, whether like . ensure files sorted sensibly, consider following:Put something numeric beginning file name. order sourcing files matters, state file created. , indicate logical order files.Put something numeric beginning file name. order sourcing files matters, state file created. , indicate logical order files.Use YYYY-MM-DD format dates (ISO 8601 standard). format helps maintain chronological order, even Americans.Use YYYY-MM-DD format dates (ISO 8601 standard). format helps maintain chronological order, even Americans.Left-pad numbers zeroes avoid incorrect sorting (e.g., 01 1).Left-pad numbers zeroes avoid incorrect sorting (e.g., 01 1).examples great set slides R expert Jenny Bryan","code":""},{"path":"penguin-project.html","id":"penguin-project","chapter":"7 Penguin project","heading":"7 Penguin project","text":"workshop work setting project loading data. curated cleaned dataset can work generating insights data.biologist used asking questions gathering data. also important learn aspects research process. includes responsible data management (understanding data files & spreadsheet organisation, keeping data safe) data analysis.chapter look structure data files, read R. also continue develop reproducible scripts. means writing scripts well organised easy read, also making sure scripts complete capable reproducing analysis start finish.Transparency reproducibility key values scientific research, analyse data reproducible way means others can understand check work. also means important person can benefit work, ! return analysis even short break, thanking earlier self worked clear reproducible way, can pick right left .","code":""},{"path":"penguin-project.html","id":"meet-the-penguins","chapter":"7 Penguin project","heading":"7.1 Meet the Penguins","text":"data, taken palmerpenguins (Horst et al. (2022)) package originally published Gorman et al. (2014). course work real data shared researchers.palmer penguins data contains size measurements, clutch observations, blood isotope ratios three penguin species observed three islands Palmer Archipelago, Antarctica study period three years.data collected 2007 - 2009 Dr. Kristen Gorman Palmer Station Long Term Ecological Research Program, part US Long Term Ecological Research Network. data imported directly Environmental Data Initiative (EDI) Data Portal, available use CC0 license (“Rights Reserved”) accordance Palmer Station Data Policy. gratefully acknowledge Palmer Station LTER US LTER Network. Special thanks Marty Downs (Director, LTER Network Office) help regarding data license & use. intrepid package co-author, Dr. Gorman, action collecting penguin data:map study site","code":""},{"path":"penguin-project.html","id":"activity-1-organising-our-workspace","chapter":"7 Penguin project","heading":"7.2 Activity 1: Organising our workspace","text":"can begin working data, need set-.Go RStudio Cloud open Penguins R projectGo RStudio Cloud open Penguins R projectCreate following folders using + New Folder button Files tab\ndata\noutputs\nscripts\nCreate following folders using + New Folder button Files tabdataoutputsscripts\nR case-sensitive type everything EXACTLY printed \nseparate subfolders within project helps keep things tidy, means harder lose things, lets easily tell R exactly go retrieve data.next step workflow well organised project space. RStudio Cloud lot hard work , new data project can set Project space.define project series linked questions uses one (sometimes several) datasets. example coursework assignment particular module project, series linked experiments particular research project might project.Project contain several files, possibly organised sub-folders containing data, R scripts final outputs. might want keep information (wider reading) gathered relevant project.\nFigure 7.1: example typical R project set-\nWithin project notice already one file .Rproj. R project file, useful feature, interacts R tell working specific place computer (case cloud server dialed ). means R automatically treat location project file 'working directory' makes importing exporting easier1.\nimportant NEVER move .Rproj file, may\nprevent workspace opening properly.\n","code":"\ndir.create(\"data\",\n           showWarnings = FALSE)\n\ndir.create(\"outputs\",\n           showWarnings = FALSE)\n\ndir.create(\"scripts\",\n           showWarnings = FALSE)\n\n# or this can be run using apply\nlapply(c(\"data\", \"outputs\", \"scripts\"), function(dir_name) {\n  dir.create(dir_name, showWarnings = FALSE)\n})"},{"path":"penguin-project.html","id":"activity-2-access-our-data","chapter":"7 Penguin project","heading":"7.3 Activity 2: Access our data","text":"Now project workspace, ready import data.Use link open page browser data openUse link open page browser data openRight-click Save download csv format computer (Make note file downloaded e.g. Downloads)Right-click Save download csv format computer (Make note file downloaded e.g. Downloads)\nFigure 7.2: Top image: Penguins data viewed Excel, Bottom image: Penguins data native csv format\nraw format, line CSV separated commas different values. open spreadsheet program like Excel automatically converts comma-separated values tables columns.","code":""},{"path":"penguin-project.html","id":"activity-3-upload-our-data","chapter":"7 Penguin project","heading":"7.4 Activity 3: Upload our data","text":"data now Downloads folder computerThe data now Downloads folder computerWe need upload data remote cloud-server (RStudio Cloud), select upload files server button Files tabWe need upload data remote cloud-server (RStudio Cloud), select upload files server button Files tabPut file data folder - make mistake select tickbox file, go cogs button choose option Move.Put file data folder - make mistake select tickbox file, go cogs button choose option Move.\nFigure 7.3: Highlighted buttons upload files, options\n","code":""},{"path":"penguin-project.html","id":"read-data-from-a-url","chapter":"7 Penguin project","heading":"7.4.1 Read data from a url","text":"also possible use url filepath","code":"\nread_csv(\"https://raw.githubusercontent.com/UEABIO/data-sci-v1/main/book/files/penguins_raw.csv\")"},{"path":"penguin-project.html","id":"activity-4-make-a-script","chapter":"7 Penguin project","heading":"7.5 Activity 4: Make a script","text":"now create new R script file write instructions store comments manipulating data, developing tables figures. Use File > New Script menu item select R Script.Add following:load following add-package R script, just underneath comments. Tidyverse actually one package, bundle many different packages play well together - example includes ggplot2 used last session, call separatelyAdd following script:Save file inside scripts folder call 01_import_penguins_data.R\nClick document outline button (top right script pane). \nshow use visual outline\n\nAllows us build series headers subheaders, \nuseful using longer scripts.\n","code":"\n#___________________________----\n# SET UP ----\n## An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n### Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. ----\n#__________________________----\n# PACKAGES ----\nlibrary(tidyverse) # tidy data packages\nlibrary(janitor) # cleans variable names\n#__________________________----"},{"path":"penguin-project.html","id":"activity-5-read-in-data","chapter":"7 Penguin project","heading":"7.6 Activity 5: Read in data","text":"Now can read data. use function readr::read_csv() allows us read .csv files. also functions allow read .xlsx files formats, however course use .csv files.First, create object called penguins_data contains data penguins_raw.csv file.First, create object called penguins_data contains data penguins_raw.csv file.Add following script, check document outline:Add following script, check document outline:\nNote differences read.csv() \nread_csv. covered differences tibbles\ndataframes - obviously difference column\nnames.\n","code":"\npenguins_raw <- read.csv(\"data/penguins_raw.csv\")\n\n# penguins_raw <- read.csv(here(\"data\", \"penguins_raw.csv\"))\n\nattributes(penguins_raw) # reads as data.frame\n\nhead(penguins_raw) # check the data has loaded, prints first 10 rows of dataframe\n# IMPORT DATA ----\npenguins_raw <- read_csv (\"data/penguins_raw.csv\")\n\n# penguins_raw <- read_csv(here(\"data\", \"penguins_raw.csv\"))\n\nattributes(penguins_raw) # reads as tibble\n\nhead(penguins_raw) # check the data has loaded, prints first 10 rows of dataframe\n#__________________________----"},{"path":"penguin-project.html","id":"activity-check-your-script","chapter":"7 Penguin project","heading":"7.7 Activity: Check your script","text":"","code":"\n#___________________________----\n# SET UP ----\n## An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n### Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. ----\n#__________________________----\n\n# PACKAGES ----\nlibrary(tidyverse) # tidy data packages\nlibrary(janitor) # cleans variable names\nlibrary(lubridate) # make sure dates are processed properly\n#__________________________----\n\n# IMPORT DATA ----\npenguins_raw <- read_csv (\"data/penguins_raw.csv\")\n\nhead(penguins_raw) # check the data has loaded, prints first 10 rows of dataframe\n#__________________________----"},{"path":"penguin-project.html","id":"activity-test-yourself","chapter":"7 Penguin project","heading":"7.8 Activity: Test yourself","text":"Question 1. order make R project reproducible filepath use?Absolute filepathRelative filepathQuestion 2. acceptable include raw datafile?Highlighting blocks cellsExcel formulaeA column observational notes fielda mix ddmmyy yymmdd date formatsQuestion 3. always first set functions script? ?()Question 4. reading data R useread_csv()read.csv()Question 5. format penguins_raw data ?wide datalong dataEach column unique variable row unique observation data long (tidy) formatQuestion 6. working directory projects default set location ?data filesthe .Rproj fileyour R scriptQuestion 7. Using filepath \"data/penguins_raw.csv\" example ofan absolute filepatha relative filepathQuestion 8. operator need use wish assign output read_csv function R object (rather just print dataframe console)?","code":""},{"path":"data-wrangling-with-dplyr.html","id":"data-wrangling-with-dplyr","chapter":"8 Data wrangling with dplyr","heading":"8 Data wrangling with dplyr","text":"chapter learn use tidyverse functions data clean wrangle:","code":""},{"path":"data-wrangling-with-dplyr.html","id":"activity-1-change-column-names","chapter":"8 Data wrangling with dplyr","heading":"8.1 Activity 1: Change column names","text":"going learn organise data using tidy format2. using tidyverse packages Wickham (2023). opinionated, highly effective method generating reproducible analyses wide-range data manipulation tools. Tidy data easy format computers read. also required data structure statistical tests work later.'tidy' refers specific structure lets us manipulate visualise data ease. tidy dataset variable one column row contains one observation. cell table/spreadsheet contains values. One observation might make tidy data quite long - generates lot rows data - might remember tidy data can referred long-format data (opposed wide data).know data R, know columns names imported. still know whether values imported correctly, whether captured rows.","code":""},{"path":"data-wrangling-with-dplyr.html","id":"add-this-to-your-script","chapter":"8 Data wrangling with dplyr","heading":"8.1.0.1 Add this to your script","text":"run colnames() get identities column dataframeStudy name: identifier year sets observations madeStudy name: identifier year sets observations madeRegion: area observation recordedRegion: area observation recordedIsland: specific island observation recordedIsland: specific island observation recordedStage: Denotes reproductive stage penguinStage: Denotes reproductive stage penguinIndividual ID: unique ID individualIndividual ID: unique ID individualClutch completion: study nest observed full clutch e.g. 2 eggsClutch completion: study nest observed full clutch e.g. 2 eggsDate egg: date study nest observed 1 eggDate egg: date study nest observed 1 eggCulmen length: length dorsal ridge bird's bill (mm)Culmen length: length dorsal ridge bird's bill (mm)Culmen depth: depth dorsal ridge bird's bill (mm)Culmen depth: depth dorsal ridge bird's bill (mm)Flipper Length: length bird's flipper (mm)Flipper Length: length bird's flipper (mm)Body Mass: Bird's mass (g)Body Mass: Bird's mass (g)Sex: Denotes sex birdSex: Denotes sex birdDelta 15N : ratio stable Nitrogen isotopes 15N:14N blood sampleDelta 15N : ratio stable Nitrogen isotopes 15N:14N blood sampleDelta 13C: ratio stable Carbon isotopes 13C:12C blood sampleDelta 13C: ratio stable Carbon isotopes 13C:12C blood sample","code":"\n# CHECK DATA----\n# check the data\ncolnames(penguins_raw)\n#__________________________----"},{"path":"data-wrangling-with-dplyr.html","id":"clean-column-names","chapter":"8 Data wrangling with dplyr","heading":"8.1.0.2 Clean column names","text":"Often might want change names variables. might non-intuitive, long. data couple issues:names contain spacesSome names contain spacesSome names capitalised lettersSome names capitalised lettersSome names contain bracketsSome names contain bracketsThis dataframe like correct quickly. R case-sensitive also like spaces brackets variable names","code":"\n# CLEAN DATA ----\n\n# clean all variable names to snake_case using the clean_names function from the janitor package\n# note we are using assign <- to overwrite the old version of penguins with a version that has updated names\n# this changes the data in our R workspace but NOT the original csv file\n\npenguins_clean <- janitor::clean_names(penguins_raw) # clean the column names\n\ncolnames(penguins_clean) # quickly check the new variable names##  [1] \"study_name\"        \"sample_number\"     \"species\"          \n##  [4] \"region\"            \"island\"            \"stage\"            \n##  [7] \"individual_id\"     \"clutch_completion\" \"date_egg\"         \n## [10] \"culmen_length_mm\"  \"culmen_depth_mm\"   \"flipper_length_mm\"\n## [13] \"body_mass_g\"       \"sex\"               \"delta_15_n_o_oo\"  \n## [16] \"delta_13_c_o_oo\"   \"comments\""},{"path":"data-wrangling-with-dplyr.html","id":"rename-columns-manually","chapter":"8 Data wrangling with dplyr","heading":"8.1.0.3 Rename columns (manually)","text":"clean_names function quickly converts variable names snake case. N C blood isotope ratio names still quite long though, clean dplyr::rename() \"new_name\" = \"old_name\".","code":"\nnames(penguins)[names(penguins_clean) == \"delta_15_n_o_oo\"] <- \"delta_15n\"\n\nnames(penguins)[names(penguins_clean) == \"delta_13_c_o_oo\"] <- \"delta_13c\"\n# shorten the variable names for N and C isotope blood samples\n\npenguins <- rename(penguins_clean,\n         \"delta_15n\"=\"delta_15_n_o_oo\",  # use rename from the dplyr package\n         \"delta_13c\"=\"delta_13_c_o_oo\")"},{"path":"data-wrangling-with-dplyr.html","id":"check-data","chapter":"8 Data wrangling with dplyr","heading":"8.2 Check data","text":"","code":""},{"path":"data-wrangling-with-dplyr.html","id":"glimpse-check-data-format","chapter":"8 Data wrangling with dplyr","heading":"8.2.0.1 glimpse: check data format","text":"run glimpse() get several lines output. number observations \"rows\", number variables \"columns\". Check csv file - . next lines see variable names type data.can see dataset 345 rows (including headers) 17 variables\nalso provides information type data column<chr> - means character text data<chr> - means character text data<dbl> - means numerical data<dbl> - means numerical data","code":"\nattributes(penguins)\nglimpse(penguins)"},{"path":"data-wrangling-with-dplyr.html","id":"rename-text-values","chapter":"8 Data wrangling with dplyr","heading":"8.2.0.2 Rename text values","text":"Sometimes may want rename values variables order make shorthand easier follow. changing values columns, column names.\nchecked code block worked? Inspect new\ntibble check variables renamed wanted.\n","code":"\npenguins$species <- ifelse(penguins$species == \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie\",\n                          ifelse(penguins$species == \"Gentoo penguin (Pygoscelis papua)\", \"Gentoo\",\n                                 ifelse(penguins$species == \"Chinstrap penguin (Pygoscelis antarctica)\", \"Chinstrap\",\n                                        penguins$species)))\n# use mutate and case_when for a statement that conditionally changes the names of the values in a variable\npenguins <- penguins |> \n  mutate(species = case_when(species == \"Adelie Penguin (Pygoscelis adeliae)\" ~ \"Adelie\",\n                             species == \"Gentoo penguin (Pygoscelis papua)\" ~ \"Gentoo\",\n                             species == \"Chinstrap penguin (Pygoscelis antarctica)\" ~ \"Chinstrap\"))"},{"path":"data-wrangling-with-dplyr.html","id":"dplyr-verbs","chapter":"8 Data wrangling with dplyr","heading":"8.3 dplyr verbs","text":"section introduced commonly used data wrangling functions, come dplyr package (part tidyverse). functions likely become familiar .","code":""},{"path":"data-wrangling-with-dplyr.html","id":"select","chapter":"8 Data wrangling with dplyr","heading":"8.3.1 Select","text":"wanted create dataset includes certain variables, can use select() function dplyr package.example might wish create simplified dataset contains species, sex, flipper_length_mm body_mass_g.Run code select columnsAlternatively tell R columns want e.g.Note select() change original penguins tibble. spits new tibble directly console.save new tibble, stored. want keep , must create new object.run new code, see anything console, see new object appear Environment pane.","code":"\npenguins[c(\"species\", \"sex\", \"flipper_length_mm\", \"body_mass_g\")]\n# DPLYR VERBS ----\n\nselect(.data = penguins, # the data object\n       species, sex, flipper_length_mm, body_mass_g) # the variables you want to select\npenguins[, !colnames(penguins) %in% c(\"study_name\", \"sample_number\")]\nselect(.data = penguins,\n       -study_name, -sample_number)\nnew_penguins <- select(.data = penguins, \n       species, sex, flipper_length_mm, body_mass_g)"},{"path":"data-wrangling-with-dplyr.html","id":"filter","chapter":"8 Data wrangling with dplyr","heading":"8.3.2 Filter","text":"previously used select() select certain variables, now use filter() select certain rows observations. example Adelie penguins.can equivalence operator ==can use several different operators assess way filter data work tidyverse base R.\nTable 8.1: Boolean expressions\nwanted select Penguin species except Adelies, use 'equals'.asYou can include multiple expressions within filter() pull rows evaluate TRUE conditions.example code pull observations Adelie penguins flipper length measured greater 190mm.","code":"filtered_penguins <- new_penguins[new_penguins$species == \"Adelie Penguin (Pygoscelis adeliae\"), ]\nfilter(.data = new_penguins, species == \"Adelie Penguin (Pygoscelis adeliae)\")\nfilter(.data = new_penguins, species != \"Adelie\")\nfilter(.data = new_penguins, species %in% c(\"Chinstrap\", \"Gentoo\"))\nnew_penguins[new_penguins$species == \"Adelie\" & new_penguins$flipper_length_mm > 190, ]\nfilter(.data = new_penguins, species == \"Adelie\", flipper_length_mm > 190)"},{"path":"data-wrangling-with-dplyr.html","id":"arrange","chapter":"8 Data wrangling with dplyr","heading":"8.3.3 Arrange","text":"function arrange() sorts rows table according columns supplied. exampleThe data now arranged alphabetical order sex. observations female penguins listed males.can also reverse desc()can also sort one column, think code ?","code":"\nnew_penguins[order(new_penguins$sex), ] # define columns to be arranged\narrange(.data = new_penguins, sex)\narrange(.data = new_penguins, desc(sex))\narrange(.data = new_penguins,\n        sex,\n        desc(species),\n        desc(flipper_length_mm))"},{"path":"data-wrangling-with-dplyr.html","id":"mutate","chapter":"8 Data wrangling with dplyr","heading":"8.3.4 Mutate","text":"Sometimes need create new variable exist dataset. example might want figure flipper length factoring body mass.create new variables use function mutate().Note , want save new column must save object. mutating new column attaching new_penguins data oject.","code":"\nnew_penguins$body_mass_kg <- new_penguins$body_mass_g / 1000\nnew_penguins <- mutate(.data = new_penguins,\n                     body_mass_kg = body_mass_g/1000)"},{"path":"data-wrangling-with-dplyr.html","id":"pipes","chapter":"8 Data wrangling with dplyr","heading":"8.4 Pipes","text":"Pipes look like : |> Pipes allow send output one function straight another function. Specifically, send result function |> first argument function |>. usual, easier show, rather tell look example.reason function called pipe 'pipes' data next function. wrote code previously, first argument function dataset wanted work . use pipes automatically take data previous line code need specify .Take penguins data \nSelect species, sex flipper length columns \nFilter keep observations labelled sex equals male \nArrange data HIGHEST LOWEST flipper lengths.\nR version 4 onwards now “native pipe”\n|>\n\ndoesn’t require tidyverse magrittr package \n“old pipe” %>% packages load \nuse.\n\nmay familiar magrittr pipe see \ntutorials, website usages. native pipe works equivalntly \nsituations want read operational\ndifferences, \nsite good job explaining .\n","code":"\n# this example uses brackets to nest and order functions\narrange(.data = filter(.data = select(.data = penguins, species, sex, flipper_length_mm), sex == \"MALE\"), desc(flipper_length_mm))\n# this example uses sequential R objects to make the code more readable\nobject_1 <- select(.data = penguins, species, sex, flipper_length_mm)\nobject_2 <- filter(.data = object_1, sex == \"MALE\")\narrange(object_2, desc(flipper_length_mm))\n# this example is human readable without intermediate objects\npenguins |>  \n  select(species, sex, flipper_length_mm) |>  \n  filter(sex == \"MALE\") |>  \n  arrange(desc(flipper_length_mm))"},{"path":"data-wrangling-with-dplyr.html","id":"a-few-more-handy-functions","chapter":"8 Data wrangling with dplyr","heading":"8.5 A few more handy functions","text":"","code":""},{"path":"data-wrangling-with-dplyr.html","id":"check-for-duplication","chapter":"8 Data wrangling with dplyr","heading":"8.5.1 Check for duplication","text":"easy inputting data make mistakes, copy something twice example, someone lot copy-pasting assemble spreadsheet (yikes!). can check pretty quicklyGreat!duplications investigate ","code":"\n# check for duplicate rows in the data\npenguins |> \n  duplicated() |>  # produces a list of TRUE/FALSE statements for duplicated or not\n  sum() # sums all the TRUE statements[1] 0\n# Check duplicated rows\npenguins |> \n    filter(duplicated(penguins))\n# Keep only unduplicated data\npenguins |> \n    filter(!duplicated(penguins))"},{"path":"data-wrangling-with-dplyr.html","id":"summarise","chapter":"8 Data wrangling with dplyr","heading":"8.5.2 Summarise","text":"can also explore data obvious typos checking implausibly small large values, simple use summarise function.minimum weight penguins 2.7kg, max 6.3kg - outrageous. min come 27g might suspicious. use summarise calculate metrics future.\nfirst data insight, difference smallest adult penguin \ndataset nearly half size largest penguin.\n","code":"\n# use summarise to make calculations\npenguins |> \n  summarise(min=min(body_mass_g, na.rm=TRUE), \n            max=max(body_mass_g, na.rm=TRUE))"},{"path":"data-wrangling-with-dplyr.html","id":"group-by","chapter":"8 Data wrangling with dplyr","heading":"8.5.3 Group By","text":"Many data analysis tasks can approached using “split-apply-combine” paradigm: split data groups, apply analysis group, combine results. dplyr makes easy group_by() function. summarise example able find max-min body mass values penguins dataset. wanted break grouping species penguin. group_by() comes .Now know little data, max weight Gentoo penguins much larger two species. fact, minimum weight Gentoo penguin far max weight two species.","code":"\n#Things start to get more complicated with Base R\n\nsplit(penguins$body_mass_g, penguins$species) |> \n    lapply(function(x) c(min(x, na.rm = TRUE), max(x, na.rm = TRUE))) |> \n    do.call(rbind, args = _ ) |> \n  as.data.frame()\npenguins |> \n  group_by(species) |>  # subsequent functions are perform \"by group\"\n  summarise(min=min(body_mass_g, na.rm=TRUE), \n            max=max(body_mass_g, na.rm=TRUE))"},{"path":"data-wrangling-with-dplyr.html","id":"distinct","chapter":"8 Data wrangling with dplyr","heading":"8.5.4 Distinct","text":"can also look typos asking R produce distinct values variable. useful categorical data, expect distinct categoriesHere someone mistyped e.g. 'FMALE' obvious. thing (probably changed names) species.","code":"\nunique(penquins$sex) # only works on vectord\npenguins |>  \n  distinct(sex)"},{"path":"data-wrangling-with-dplyr.html","id":"missing-values-na","chapter":"8 Data wrangling with dplyr","heading":"8.5.5 Missing values: NA","text":"multiple ways check missing values dataBut tell us , fortunately function summary easily","code":"\n# Get a sum of how many observations are missing in our dataframe\npenguins |> \n  is.na() |> \n  sum()"},{"path":"data-wrangling-with-dplyr.html","id":"summary","chapter":"8 Data wrangling with dplyr","heading":"8.6 Summary","text":"provides quick breakdown max min numeric variables, well list many missing observations one. can see appear two missing observations measurements body mass, bill lengths, flipper lengths several blood measures. know sure without inspecting data , likely two birds missing multiple measurements, several measured blood drawn.leave NA's alone now, useful know many .now got clean & tidy dataset, handful first insights data.","code":"\n# produce a summary of our data\nsummary(penguins)\n#__________________________----"},{"path":"data-wrangling-with-dplyr.html","id":"more-summary-tools","chapter":"8 Data wrangling with dplyr","heading":"8.7 More summary tools","text":"often want make calculations aobut groups observations, mean median. often interested comparing responses among groups. example, previously found number distinct penguins entire dataset.\nAdd new lines code script try . Comment\n# add short descriptions achieving \nNow consider groups subsets observations, find number penguins species sex.progress, learning use data wrangling tools. also gaining insights data.Question many female Adelie penguins dataset?Question many Gentoo penguins sex recorded?using summarise group_by lot! powerful functions:group_by adds grouping information data object, subsequent calculations happen group-specific basis.group_by adds grouping information data object, subsequent calculations happen group-specific basis.summarise data aggregation function thart calculates summaries one variables, separately groups defined group_bysummarise data aggregation function thart calculates summaries one variables, separately groups defined group_by","code":"\nunique(penguins$individual_id) |> \n  length()\npenguins |> \n  summarise(n_distinct(individual_id))\n# note aggregate doesn't have functionality to deal with missing data\naggregate(individual_id ~ species + sex, \n          data = penguins, \n          FUN = function(x) length(unique(x)))\npenguins |> \n  group_by(species, sex) |> \n  summarise(n_distinct(individual_id))"},{"path":"data-wrangling-with-dplyr.html","id":"summarise-1","chapter":"8 Data wrangling with dplyr","heading":"8.7.1 summarise()","text":"summarise() whole list useful functions producing descriptive statisticsmin max calculate minimum maximum values numeric vectormin max calculate minimum maximum values numeric vectormean median calculate averages numeric vectormean median calculate averages numeric vectorsd var calculate standard deviation variance numeric vectorsd var calculate standard deviation variance numeric vectorUsing summarise can calculate mean flipper bill lengths penguins:\nNote - provide informative names left side \n=\n\nperforming calculations summarise important set\nna.rm = TRUE, removes missing values \ncalculation\n\nhappens try produce calculations include\nNA? e.g NA + 4 NA * 5\ncan use several functions summarise. means can string several calculations together single step, generate insights data.190 unique IDs 344 total observations appear roughly twice many observations unique individuals. sex ratio roughly even (48% female) average flipper length 201 mm.","code":"\npenguins |> \n  summarise(\n    mean_flipper_length = mean(flipper_length_mm, na.rm=TRUE),\n     mean_culmen_length = mean(culmen_length_mm, na.rm=TRUE))\npenguins |> \n  summarise(n=n(), # number of rows of data\n            num_penguins = n_distinct(individual_id), # number of unique individuals\n            mean_flipper_length = mean(flipper_length_mm, na.rm=TRUE), # mean flipper length\n            prop_female = sum(sex == \"FEMALE\", na.rm=TRUE) / n()) # proportion of observations that are coded as female"},{"path":"data-wrangling-with-dplyr.html","id":"summarize-across-columns","chapter":"8 Data wrangling with dplyr","heading":"8.7.1.1 Summarize across columns","text":"across two arguments, .cols .fns..cols argument lets select columns wish apply functions toThe .cols argument lets select columns wish apply functions toThe .fns argument applies required function selected columns..fns argument applies required function selected columns.example calculates means & numeric variables dataset.example slightly complicated way running n_distinct summarise. .cols() looks column contains word \"penguin\" runs n_distinct()command ","code":"\n# Across ----\n# The mean of ALL numeric columns in the data, where(is.numeric == TRUE) hunts for numeric columns\n\npenguins |> \n  summarise(across(.cols = where(is.numeric), \n                   .fns = ~ mean(., na.rm=TRUE)))\n# number of distinct penguins, as only one column contains the word penguin\n# the argument contains looks for columns that match a character expression\n\npenguins |> \n  summarise(across(.cols = contains(\"individual\"), \n                   .fns = ~n_distinct(.)))"},{"path":"data-wrangling-with-dplyr.html","id":"group_by-revisited","chapter":"8 Data wrangling with dplyr","heading":"8.7.2 group_by revisited","text":"group_by function provides ability separate summary functions according subgroups wish make. real magic happens pair summarise mutate.example, grouping individual penguin ids, summarising n - can see many times penguin monitored course study.\nRemember actions group_by “invisible”.\nSubsequent functions applied “grouped ” manner - \ndataframe looks unchanged.\n","code":"\npenguin_stats <- penguins |> \n  group_by(individual_id) |> \n  summarise(num=n())"},{"path":"data-wrangling-with-dplyr.html","id":"more-than-one-grouping-variable","chapter":"8 Data wrangling with dplyr","heading":"8.7.2.1 More than one grouping variable","text":"need calculate one variable time?\nproblem can submit several arguments:can calculate mean flipper length penguins six combinationsNow first row summary table shows us mean flipper length (mm) female Adelie penguins. eight rows total, six unique combinations two rows sex penguins recorded(NA)","code":"\npenguins_grouped <- penguins |> \n  group_by(sex, species)\npenguins_grouped |> \nsummarise(mean_flipper = mean(flipper_length_mm, na.rm=TRUE))"},{"path":"data-wrangling-with-dplyr.html","id":"using-group_by-with-mutate","chapter":"8 Data wrangling with dplyr","heading":"8.7.2.2 using group_by with mutate","text":"far used group_by summarise function, always case.\nmutate used group_by, calculations occur 'group'. example:calculating group centered mean, new variable contains difference observation mean whichever group observation .","code":"\n# Using mutate and group_by ----\ncentered_penguins <- penguins |> \n  group_by(sex, species) |> \n  mutate(flipper_centered = flipper_length_mm-mean(flipper_length_mm, na.rm=TRUE))\n\ncentered_penguins |> \n  select(flipper_centered)\n# Each row now returns a value for EACH penguin of how much greater/lesser than the group average (sex and species) its flipper is. "},{"path":"data-wrangling-with-dplyr.html","id":"remove-group_by","chapter":"8 Data wrangling with dplyr","heading":"8.7.2.3 remove group_by","text":"occasion may need remove grouping information dataset. often required string pipes together, need work using grouping structure, revert back whole dataset againLook grouped dataframe, can see information groups top data:Look output - can see information groups now removed data.","code":"# A tibble: 344 x 10\n# Groups:   sex, species [8]\n   species island culmen_length_mm culmen_depth_mm flipper_length_~ body_mass_g\n   <chr>   <chr>           <dbl>         <dbl>            <dbl>       <dbl>\n 1 Adelie  Torge~           39.1          18.7              181        3750\n 2 Adelie  Torge~           39.5          17.4              186        3800\n 3 Adelie  Torge~           40.3          18                195        3250\n# Run this command will remove the groups - but this is only saved if assigned BACK to an object\n\ncentered_penguins <- centered_penguins |> \n  ungroup()\n\ncentered_penguins"},{"path":"data-wrangling-with-dplyr.html","id":"working-with-character-strings","chapter":"8 Data wrangling with dplyr","heading":"8.8 Working with character strings","text":"Datasets often contain words, call words \"(character) strings\".Often quite want , can manipulate much like. Functions package stringr, fantastic. number different types manipulations endless!","code":"\n# Stringr ----\n\nstr_replace_all(names(penguins), c(\"e\"= \"E\"))\n# replace all character \"e\" with \"E\""},{"path":"data-wrangling-with-dplyr.html","id":"more-stringr","chapter":"8 Data wrangling with dplyr","heading":"8.8.1 More stringr","text":"can also trim leading trailing empty spaces str_trim. often problematic difficult spot e.g.can easily imagine scenario data manually input, trailing leading spaces left . difficult spot eye - problematic far R concerned different values. can use function distinct return names different levels can find dataframe.pipe data throught str_trim function remove gaps, pipe distinct - removing whitespace, R now recognises just one level data.quick example extract partial strings according pattern use str_detect. Combined filter possible subset dataframe searching strings match provided information, penguin IDs start \"N1\"","code":"\npenguins  |>  \n  mutate(species=str_to_upper(species))\n# Capitalise all letters\npenguins |> \n  mutate(species=str_remove_all(species, \"e\"))\n# remove every character \"e\" from selected variables\ndf2 <- tibble(label=c(\"penguin\", \" penguin\", \"penguin \")) \ndf2 # make a test dataframe\ndf2 |> \n  distinct()\ndf2 |> \n  mutate(label=str_trim(label, side=\"both\")) |> \n  distinct()\npenguins |> \n  filter(str_detect(individual_id, \"N1\"))"},{"path":"data-wrangling-with-dplyr.html","id":"separate","chapter":"8 Data wrangling with dplyr","heading":"8.8.2 separate","text":"Sometimes string might contain two pieces information one. confirm tidy data principles. can easily separate information separate() tidyr package.First produce made-dataWe started one variable called label split two variables, treatment replicate, split made - occurs.\nopposite function unite()","code":"\ndf <- tibble(label=c(\"a-1\", \"a-2\", \"a-3\")) \n#make a one column tibble\ndf\ndf |> \n  separate(label, # name of variable\n           c(\"treatment\", \"replicate\"), # new column names\n           sep=\"-\") # the character to mark where the separation occurs"},{"path":"data-wrangling-with-dplyr.html","id":"working-with-dates","chapter":"8 Data wrangling with dplyr","heading":"8.9 Working with dates","text":"Working dates can tricky, treating date strictly numeric problematic, account number days months number months year.Additionally lot different ways write date:13-10-201913-10-201910-13-201910-13-201913-10-1913-10-1913th Oct 201913th Oct 20192019-10-132019-10-13This variability makes difficult tell software read information, luckily can use functions lubridate package.\nget warning dates parsed, \nmight find date inconsistently entered \ndataset.\n\nPay attention warning error messages\nDepending interpret date ordering file, can use ymd(), ydm(), mdy(), dmy()Question appropriate function use date_egg variable?use mutate function dplyr create new variable called date_egg_proper based output converting characters date_egg date format. original variable left intact, specified \"new\" variable also called date_egg overwritten original variable.established date data, able perform calculations. date range across data collected.","code":"\npenguins <- penguins |>\n  mutate(date_egg_proper = lubridate::dmy(date_egg))\npenguins |> \n  summarise(min_date=min(date_egg_proper),\n            max_date=max(date_egg_proper))"},{"path":"data-wrangling-with-dplyr.html","id":"calculations-with-dates","chapter":"8 Data wrangling with dplyr","heading":"8.9.0.1 Calculations with dates","text":"many times penguin measured, across total time period?Cool can also convert intervals days weeks, months years dweeks(1), dmonths(1), dyears(1).cool functions, check RStudio cheat sheet information. Date type data common datasets, learning work useful skill.extract year date - now update dataframe","code":"\npenguins |> \n  group_by(individual_id) |> \n  summarise(first_observation=min(date_egg_proper), \n            last_observation=max(date_egg_proper), \n            study_duration = last_observation-first_observation, \n            n=n())\npenguins |> \n  group_by(individual_id) |> \n  summarise(first_observation=min(date_egg_proper), \n            last_observation=max(date_egg_proper), \n            study_duration_years = (last_observation-first_observation)/lubridate::dyears(1), \n            n=n()) |> \n    arrange(desc(study_duration_years))\npenguins <- penguins |> \n  mutate(year = as.integer(lubridate::year(date_egg_proper)))"},{"path":"data-wrangling-with-dplyr.html","id":"factors","chapter":"8 Data wrangling with dplyr","heading":"8.10 Factors","text":"R, factors class data allow ordered categories fixed set acceptable values.Typically, convert column character numeric class factor want set intrinsic order values (“levels”) can displayed non-alphabetically plots tables, use linear model analyses (later).Another common use factors standardise legends plots fluctuate certain values temporarily absent data.make barplot, order values x axis typically alphabetical order character dataTo convert character numeric column class factor, can use function forcats package. convert class factor also perform allow certain ordering levels - example using forcats::fct_relevel() lets manually specify level order.function as_factor() simply converts class without capabilities.base R function factor() converts column factor allows manually specify order levels, character vector levels = argument.use mutate() fct_relevel() convert column flipper_range class character class factor.Now call plot, can see x axis categories match intrinsic order specified factor levels.\nFactors also important build linear models bit\nlater. reference intercept categorical predictor variable\nread <chr> set R first\none ordered alphabetically. may always \nappropriate choice, changing ordered\n<fct> can manually set intercept.\n","code":"\npenguins <- penguins |> \n  mutate(flipper_range = case_when(flipper_length_mm <= 190 ~ \"small\",\n                                   flipper_length_mm >190 & flipper_length_mm < 213 ~ \"medium\",\n                                   flipper_length_mm >= 213 ~ \"large\"))\npenguins |> \n  ggplot(aes(x = flipper_range))+\n  geom_bar()\npenguins$flipper_range <- factor(penguins$flipper_range)\npenguins <- penguins |> \n  mutate(flipper_range = fct_relevel(flipper_range))\nlevels(penguins$flipper_range)## [1] \"large\"  \"medium\" \"small\"\npenguins$flipper_range <- factor(penguins$flipper_range,\n                                  levels = c(\"small\", \"medium\", \"large\"))\n# Correct the code in your script with this version\npenguins <- penguins |> \n  mutate(flipper_range = fct_relevel(flipper_range, \"small\", \"medium\", \"large\"))\npenguins |> \n  ggplot(aes(x = flipper_range))+\n  geom_bar()"},{"path":"data-wrangling-with-dplyr.html","id":"finished","chapter":"8 Data wrangling with dplyr","heading":"8.11 Finished","text":"Make sure saved script 💾 given filename \"01_import_penguins_data.R\" \"scripts\" folder.Make sure saved script 💾 given filename \"01_import_penguins_data.R\" \"scripts\" folder.playing lot dplyr functions, think - functions actually need make sure tidy clean dataset appropriate column names formatted data?playing lot dplyr functions, think - functions actually need make sure tidy clean dataset appropriate column names formatted data?want : snake_case names, shorter isotope names, simpler species values properly formatted date data new column year.want : snake_case names, shorter isotope names, simpler species values properly formatted date data new column year.parts script redundant purposes generating clean dataframe, need penguins data tidy/rectangular format, checked missing values, duplicated data clean column names.parts script redundant purposes generating clean dataframe, need penguins data tidy/rectangular format, checked missing values, duplicated data clean column names.can generate .RDS file save dataframe use data insights scriptsIf can generate .RDS file save dataframe use data insights scriptsDoes workspace look like ?\nFigure 8.1: neat project layout\n\nFigure 8.2: scripts file subdirectory\n","code":"\n#___________________________----\n# SET UP ----\n## An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n### Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. ----\n#__________________________----\n\n# PACKAGES ----\nlibrary(tidyverse) # tidy data packages\nlibrary(janitor) # cleans variable names\n#__________________________----\n# IMPORT DATA ----\npenguins_raw <- read_csv (\"data/penguins_raw.csv\")\n\nattributes(penguins_raw) # reads as tibble\n\nhead(penguins_raw) # check the data has loaded, prints first 10 rows of dataframe\n#__________________________----\n# CLEAN DATA ----\n\n# clean all variable names to snake_case using the clean_names function from the janitor package\n# note we are using assign <- to overwrite the old version of penguins with a version that has updated names\n# this changes the data in our R workspace but NOT the original csv file\n\npenguins_clean <- janitor::clean_names(penguins_raw) # clean the column names\n\ncolnames(penguins_clean) # quickly check the new variable names\n\n# shorten the variable names for N and C isotope blood samples\n\npenguins <- rename(penguins_clean,\n         \"delta_15n\"=\"delta_15_n_o_oo\",  # use rename from the dplyr package\n         \"delta_13c\"=\"delta_13_c_o_oo\")\n\n# use mutate and case_when for a statement that conditionally changes the names of the values in a variable\npenguins <- penguins |> \n  mutate(species = case_when(species == \"Adelie Penguin (Pygoscelis adeliae)\" ~ \"Adelie\",\n                             species == \"Gentoo penguin (Pygoscelis papua)\" ~ \"Gentoo\",\n                             species == \"Chinstrap penguin (Pygoscelis antarctica)\" ~ \"Chinstrap\"))\n\n# use lubridate to format date and extract the year\npenguins <- penguins |>\n  mutate(date_egg_proper = lubridate::dmy(date_egg))\n\npenguins <- penguins |> \n  mutate(year = as.integer(lubridate::year(date_egg_proper)))\n\n# Export tidy dataframe for use in future sessions\n\nsaveRDS(penguins, file = \"outputs/2024_11_01_penguin_clean.RDS\")\nsaveRDS(penguins, file = \"outputs/2024_11_01_penguin_clean.RDS\")"},{"path":"data-wrangling-with-dplyr.html","id":"activity-test-yourself-1","chapter":"8 Data wrangling with dplyr","heading":"8.12 Activity: Test yourself","text":"Question 1. order subset data rows use function select()filter()group_by()Question 2. order subset data columns use function select()filter()group_by()Question 3. order make new column use function group_by()select()mutate()arrange()Question 4. operator use send output line code next line? Question 5. outcome following line code?penguins dataframe object reduced include Adelie penguins now onA new filtered dataframe Adelie penguins printed consoleUnless output series functions \"assigned\" object using <- saved, results immediately printed. code modified order create new filtered object penguins_filteredQuestion 6. main point data \"pipe\"?code runs fasterThe code easier readQuestion 7. naming convention outputted function `janitor::clean_names() \nsnake_casecamelCaseSCREAMING_SNAKE_CASEkebab-caseQuestion 8. package provides useful functions manipulating character strings?stringrggplot2lubridateforcatsQuestion 9. package provides useful functions manipulating dates?stringrggplot2lubridateforcatsQuestion 10. specify character variable factor, ordering default ?numericalalphabeticalorder dataframe","code":"\npenguins |> \n  filter(species == \"Adelie\")\npenguins_filtered <- penguins |> \n  filter(species == \"Adelie\")"},{"path":"data-reshaping.html","id":"data-reshaping","chapter":"9 Data reshaping","heading":"9 Data reshaping","text":"neither wide long data correct , work long data clearer many distinct types variables data tools using tidyverse designed work long data.","code":""},{"path":"data-reshaping.html","id":"using-pivot-functions","chapter":"9 Data reshaping","heading":"9.1 Using pivot functions","text":"functions found part tidyverse can help us reshape data.tidyr::pivot_wider() - long wide formattidyr::pivot_wider() - long wide formattidyr::pivot_longer() - wide long formattidyr::pivot_longer() - wide long format\nFigure 9.1: Reshaping data pivot\nsave changes data format, must assign object, two optionsUse name original R object, overwrite original new formatUse name original R object, overwrite original new formatUse new name reformatted data R objects exist EnvironmentUse new name reformatted data R objects exist EnvironmentNeither correct aware .","code":"\n country <- c(\"x\", \"y\", \"z\")\n yr1960 <-  c(10, 20, 30)\n yr1970 <-  c(13, 23, 33)\n yr2010 <-  c(15, 25, 35)\n\ncountry_data <- tibble(country, yr1960, yr1970, yr2010)\ncountry_data\npivot_longer(data = country_data,\n             cols = yr1960:yr2010,\n             names_to = \"year\",\n             names_prefix = \"yr\",\n             values_to = \"metric\")"},{"path":"data-reshaping.html","id":"overwrite-the-original-object","chapter":"9 Data reshaping","heading":"9.1.1 Overwrite the original object","text":"","code":"\ncountry_data <- pivot_longer(data = country_data,\n             cols = yr1960:yr2010,\n             names_to = \"year\",\n             names_prefix = \"yr\",\n             values_to = \"metric\")"},{"path":"data-reshaping.html","id":"create-a-new-r-object","chapter":"9 Data reshaping","heading":"9.1.2 Create a new r object","text":"","code":"\nlong_country_data <- pivot_longer(data = country_data,\n             cols = yr1960:yr2010,\n             names_to = \"year\",\n             names_prefix = \"yr\",\n             values_to = \"metric\")"},{"path":"data-reshaping.html","id":"join-functions","chapter":"9 Data reshaping","heading":"9.2 Join functions","text":"Frequently, analysis data require merging separately managed tables back together. multiple ways join observations two tables, based rows one table merged rows .conceptualizing merges, one can think two tables, one left one right. common (often useful) join merge subset rows matches left table right table: called INNER JOIN. types join possible well.LEFT JOIN takes rows left table, merges data matching rows right table. Keys don’t match left table still provided missing value (NA) right table.LEFT JOIN takes rows left table, merges data matching rows right table. Keys don’t match left table still provided missing value (NA) right table.RIGHT JOIN , except rows right table included matching data left, missing value.RIGHT JOIN , except rows right table included matching data left, missing value.Finally, FULL JOIN includes data rows tables, includes missing values wherever necessary.Finally, FULL JOIN includes data rows tables, includes missing values wherever necessary.","code":""},{"path":"data-reshaping.html","id":"left-join","chapter":"9 Data reshaping","heading":"9.2.1 Left join","text":"","code":"\n# Create tibbles df_primary and df_secondary\ndf_primary <- tibble(\n  ID = c(\"A\", \"B\", \"C\", \"D\", \"F\"),\n  y = c(5, 5, 8, 0, 9)\n)\n\ndf_secondary <- tibble(\n  ID = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n  z = c(30, 21, 22, 25, 29)\n)\nleft_join(df_primary, df_secondary, by ='ID')"},{"path":"data-reshaping.html","id":"right-join","chapter":"9 Data reshaping","heading":"9.2.2 Right join","text":"","code":"\nright_join(df_primary, df_secondary, by = 'ID')"},{"path":"data-reshaping.html","id":"full-join","chapter":"9 Data reshaping","heading":"9.2.3 Full join","text":"","code":"\nfull_join(df_primary, df_secondary, by = 'ID')"},{"path":"basic-ggplot.html","id":"basic-ggplot","chapter":"10 Basic ggplot","heading":"10 Basic ggplot","text":"","code":""},{"path":"basic-ggplot.html","id":"intro-to-grammar","chapter":"10 Basic ggplot","heading":"10.1 Intro to grammar","text":"ggplot2 package widely used valued simple, consistent approach making data visuals.'grammar graphics' relates different components plot function like different parts linguistic grammar. example, plots require axes, x y axes form one part ‘language’ plot. Similarly, plots data represented axes, often points, lines bars. visual way data represented forms another component grammar graphics. Furthermore, colour, shape size points lines can used encode additional information plot. information usually clarified key, legend, can also considered part ‘grammar’.philosophy ggplot much better explained package author, Hadley Wickham (Wickham et al. (2023)). now, just need aware ggplots constructed specifying different components want display, based underlying information data frame.\nFigure 10.1: example can produce ggplot\n","code":""},{"path":"basic-ggplot.html","id":"building-a-plot","chapter":"10 Basic ggplot","heading":"10.2 Building a plot","text":"start building plot going use penguin data working previously. First must specify data frame contains relevant data plot. can two ways:‘sending penguins data set ggplot function’:specifying dataframe within ggplot() functionThe output identical\nRunning command produce empty grey panel. \nneed specify different columns data frame\nrepresented plot.\n","code":"\n# Building a ggplot step by step ----\n## Render a plot background ----\npenguins %>% \n  ggplot()\nggplot(data = penguins)"},{"path":"basic-ggplot.html","id":"aesthetics---aes","chapter":"10 Basic ggplot","heading":"10.2.1 Aesthetics - aes()","text":"can call different columns data dataset based column names. Column names given ‘aesthetic’ elements ggplot function, wrapped aes() function.want scatter plot, point x y coordinate. want x axis represent flipper length ( x = flipper_length_mm ), y axis represent body mass ( y = body_mass_g ).give specifications separated comma. Quotes required giving variables within aes().\ninterested quotes aren’t required can read non-standard\nevaluation.\nfar grid lines x y axis. ggplot() knows variables required plot, thus scale, information display data points.","code":"\n## Set axes ----\npenguins %>% \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))"},{"path":"basic-ggplot.html","id":"geometric-representations---geom","chapter":"10 Basic ggplot","heading":"10.3 Geometric representations - geom()","text":"Given want scatter plot, need specify geometric representation data point form, using geom_point(). many geometric object types.\nFigure 10.2: geom shapes\nadding layer (hence + sign) points plot. can think similar e.g. Adobe Photoshop uses layers images can reordered modified individually. add plots layer layer order geoms may important final aesthetic design.ggplot, layer added plot according position code. first show full breakdown components layer. layer requires information ondataaestheticsgeometric typeany summary datapositionThis quite complicate way write new layers - usual see simpler compact approachNow scatter plot! row (except two rows missing data) penguins data set now x coordinate, y coordinate, designated geometric representation (point).can see smaller penguins tend smaller flipper lengths.","code":"\n## Add a geom ----\npenguins %>% \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  layer(                # layer inherits data and aesthetic arguments from previous\n    geom=\"point\",       # draw point objects\n    stat=\"identity\",    # each individual data point gets a geom (no summaries)\n    position=position_identity()) # data points are not moved in any way e.g. we could specify jitter or dodge if we want to avoid busy overlapping data\npenguins %>% \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point() # geom_point function will always draw points, and unless specified otherwise the arguments for position and stat are both \"identity\"."},{"path":"basic-ggplot.html","id":"and","chapter":"10 Basic ggplot","heading":"10.3.1 %>% and +","text":"ggplot2, early component tidyverse package, written pipe introduced. + sign ggplot2 functions similar way pipe functions tidyverse: allowing code written left right.","code":""},{"path":"basic-ggplot.html","id":"colour","chapter":"10 Basic ggplot","heading":"10.3.2 Colour","text":"colors lines points can set directly using colour=\"red\", replacing “red” color name. colors filled objects, like bars, can set using fill=\"red\".However current plot informative colour used convey information species penguin.order achieve need use aes() , make colour conditional upon variable., aes() function containing relevant column name, given within geom_point() function.\ncommon mistake get confused use (use)\naes()\n\nspecifying fixed aesthetic e.g. red everything \ngo inside aes() instead specify e.g. colour = “red” \nshape =21.\n\nwish modify aethetic according variable \ndata go inside aes()\ne.g. aes(colour = species)\n\nmay (may ) noticed grammar ggplot (\ntidyverse general) accepts British/Americanization \nspelling!!!\ndata visualisations can start gain insights data quickly, can see Gentoo penguins tend larger longer flippers\nAdd carriage returns (new lines) %>% + symbols.\n\ncases, R blind white space new lines, \nsimply make code readable, allow us add readable\ncomments.\n","code":"\npenguins %>% \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(colour=\"red\")\npenguins %>% \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))"},{"path":"basic-ggplot.html","id":"more-layers","chapter":"10 Basic ggplot","heading":"10.3.3 More layers","text":"can see relationship body size flipper length. want model relationship trend line? can add another ‘layer’ plot, using different geometric representation data. case trend line, fact summary data rather representation point.geom_smooth() function draws trend line data. default behaviour draw local regression line (curve) points, however can hard interpret. want add straight line based linear model (‘lm’) relationship x y.first encounter linear models course, learn lot later .example may notice assigning colour variable (species) geometric layers. means option simplify code. Aesthetics set \"top layer\" ggplot() inherited subsequent layers.\nNote - trend line blocking certain points, \n‘top layer’ plot. geom layers appear early \ncommand drawn first, can obscured geom layers \ncome .\n\nhappens switch order geom_point() \ngeom_smooth() functions ? notice trend\nline?\n","code":"\n## Add a second geom ----\npenguins %>% \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))+\n  geom_smooth(method=\"lm\",    #add another layer of data representation.\n              se=FALSE,\n              aes(colour=species)) # note layers inherit information from the top ggplot() function but not previous layers - if we want separate lines per species we need to either specify this again *or* move the color aesthetic to the top layer. \npenguins %>% \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ ### now colour is set here it will be inherited by ALL layers\n  geom_point()+\n  geom_smooth(method=\"lm\",    #add another layer of data representation.\n              se=FALSE)"},{"path":"basic-ggplot.html","id":"more-plots","chapter":"10 Basic ggplot","heading":"10.4 More plots","text":"","code":""},{"path":"basic-ggplot.html","id":"jitter","chapter":"10 Basic ggplot","heading":"10.4.1 Jitter","text":"geom_jitter() command adds random scatter points can reduce -plotting. Compare two plots:","code":"\n## geom point\n\nggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +\n  geom_point(aes(color = species),\n              alpha = 0.7, \n              show.legend = FALSE) \n\n## More geoms ----\nggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +\n  geom_jitter(aes(color = species),\n              width = 0.1, # specifies the width, change this to change the range of scatter\n              alpha = 0.7, # specifies the amount of transparency in the points\n              show.legend = FALSE) # don't leave a legend in a plot, if it doesn't add value"},{"path":"basic-ggplot.html","id":"boxplots","chapter":"10 Basic ggplot","heading":"10.4.2 Boxplots","text":"Box plots, ‘box & whisker plots’ another essential tool data analysis. Box plots summarize distribution set values displaying minimum maximum values, median (.e. middle-ranked value), range middle 50% values (inter-quartile range).\nwhisker line extending IQR box define Q3 + (1.5 x IQR), Q1 - (1.5 x IQR) respectively. can watch short video learn box plots .create box plot data use (prizes ) geom_boxplot()\nNote specifying colour variables using aes()\ngeometric shapes support internal colour “fill” external\ncolour “colour”. Try changing aes fill colour code ,\nnote happens.\npoints indicate outlier values [.e., greater Q3 + (1.5 x IQR)].can overlay boxplot scatter plot entire dataset, fully communicate raw summary data. reduce width jitter points slightly.\nexample switched using show.legend=FALSE inside\ngeom layer using theme(legend.position=“none”). ? \nexample reducing redundant code. specify\nshow.legend=FALSE every geom layer plot, theme\nfunction applies every layer. Save code, save time, reduce\nerrors!\n","code":"\nggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +\n  geom_boxplot(aes(fill = species),\n              alpha = 0.7, \n              width = 0.5, # change width of boxplot\n              show.legend = FALSE)\nggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +\n  geom_boxplot(aes(fill = species), # note fill is \"inside\" colour and colour is \"edges\" - try it for yourself\n              alpha = 0.2, # fainter boxes so the points \"pop\"\n              width = 0.5, # change width of boxplot\n              outlier.shape=NA)+\n  geom_jitter(aes(colour = species),\n                width=0.2)+\n  theme(legend.position = \"none\")"},{"path":"basic-ggplot.html","id":"grouped-boxplot","chapter":"10 Basic ggplot","heading":"10.4.2.1 Grouped boxplot","text":"","code":"\npenguins |> \n  drop_na(sex) |> \nggplot(aes(x = species, y = culmen_length_mm)) +\n  geom_boxplot(aes(fill = sex), \n              width = 0.5) # change width of boxplot"},{"path":"basic-ggplot.html","id":"violin-plots","chapter":"10 Basic ggplot","heading":"10.4.3 Violin plots","text":"Violin plots display distribution dataset can created calling geom_violin(). -called shape make sometimes looks something like violin. essentially sideways, mirrored density plots. Note code identical code used draw boxplots , except call geom_violin() rather geom_boxplot().","code":"\npenguins |> \n  drop_na(sex) |> \nggplot(aes(x = species, y = culmen_length_mm)) +\n  geom_violin(aes(fill = sex),\n              width = 0.5)"},{"path":"basic-ggplot.html","id":"bar-plots","chapter":"10 Basic ggplot","heading":"10.4.4 Bar plots","text":"dataset already counts want plot, can set stat=\"identity\" inside geom_bar() use number instead counting rows.go stacked bar approachThis graph OK great, height section bar represents relative proportions species dataset, type chart becomes increasingly difficult read categories included. Colours become increasingly samey,difficult read y-axis category starts stops, subtraction work values.","code":"\npenguins |> \nggplot(aes(x = species)) +\n  geom_bar()\npenguins |>  \n  ggplot(aes(x=\"\",\n             fill=species))+ \n  # specify fill = species to ensure colours are defined by species\n  geom_bar(position=\"fill\")+ \n  labs(x=\"\",\n       y=\"\")"},{"path":"basic-ggplot.html","id":"density-and-histogram","chapter":"10 Basic ggplot","heading":"10.4.5 Density and histogram","text":"base statistic geom_histogram() count, default geom_histogram() divides x-axis 30 \"bins\" counts many observations bin y-axis need specified. run code produce histogram, get message \"stat_bin() using bins = 30. Pick better value binwidth\". can change either setting number bins (e.g., bins = 20) width bin (e.g., binwidth = 5) argument.layer system makes easy create new types plots adapting existing recipes. example, rather creating histogram, can create smoothed density plot calling geom_density() rather geom_histogram(). rest code remains identical.","code":"\npenguins %>% \n    ggplot(aes(x=culmen_length_mm, fill=species))+\n    geom_histogram(bins=50)\npenguins |> \n    ggplot(aes(x=culmen_length_mm, fill=species))+\n    geom_density(alpha = .775)\n#Because the density plots are overlapping, we set alpha = 0.75 to make the geoms 75% transparent."},{"path":"data-insights-part-one.html","id":"data-insights-part-one","chapter":"11 Data Insights part one","heading":"11 Data Insights part one","text":"last chapters concentrating generating insights data using visualisations descriptive statistics. easiest way use questions tools guide investigation. ask question, question focuses attention specific part dataset helps decide graphs, models, transformations make.exercise propose task generate insights body mass penguins, order answer questionHow body mass associated bill length depth penguins?order answer question properly first understand different variables might relate .Distribution data typesCentral tendencyRelationship variablesConfounding variablesThis inevitably leads variety questions. new question ask expose new aspect data.","code":""},{"path":"data-insights-part-one.html","id":"data-wrangling","chapter":"11 Data Insights part one","heading":"11.0.1 Data wrangling","text":"Importantly already generated understanding variables contained within dataset data wrangling steps. Including:number variablesThe number variablesThe data format variableThe data format variableChecked missing dataChecked missing dataChecked typos, duplications data errorsChecked typos, duplications data errorsCleaned column factor namesCleaned column factor names\nimportant lose site questions \nasking\n\nalso play close attention data, remind \nfrequently many variables \nnames?\n\nmany rows/observations ?\n\nPay close attention outputs, errors warnings R\nconsole.\n","code":""},{"path":"data-insights-part-one.html","id":"load-data","chapter":"11 Data Insights part one","heading":"11.1 Load data","text":"Make scriptLet's now create new R script file write instructions store comments manipulating data, developing tables figures. Use File > New Script menu item select R Script.Add following:Save file inside scripts folder call 02_eda_penguins.R","code":"\n#___________________________----\n# EDA ----\n## Exploratory data analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n#__________________________----\n\npenguins <- readRDS(\"outputs/2024_11_01_penguin_clean.RDS\")"},{"path":"data-insights-part-one.html","id":"quick-view-of-variables","chapter":"11 Data Insights part one","heading":"11.2 Quick view of variables","text":"take look variables, functions give quick snapshot overview.can see bill length contains numbers, many fractions, 0.1mm. comparison body mass appear discrete number variables. make body mass integer? underlying quantity (bodyweight) clearly continuous, clearly possible penguin weigh 3330.7g might look like integer way measured. illustrates importance understanding type variable working - just looking values enough.hand, choose measure record data can change way presented dataset. researchers decided simply record small, medium large classes bodyweight, dealing ordinal categorical variables (factors). distinctions can become less clear start deal multiple classes ordinal categories - example researchers measuring body mass nearest 10g. might reasonable treat integers...","code":"\nglimpse(penguins)\nsummary(penguins)"},{"path":"data-insights-part-one.html","id":"categorical-variables","chapter":"11 Data Insights part one","heading":"11.3 Categorical variables","text":"","code":""},{"path":"data-insights-part-one.html","id":"frequency","chapter":"11 Data Insights part one","heading":"11.3.1 Frequency","text":"might useful us make quick data summaries , like relative frequencySo 44% sample made observations Adelie penguins. comes making summaries categorical data, best can , can make observations common categorical observations, relative proportions.chart ok - can make anything better?go stacked bar approachThis graph OK great, height section bar represents relative proportions species dataset, type chart becomes increasingly difficult read categories included. Colours become increasingly samey,difficult read y-axis category starts stops, subtraction work values.best graph probably first one made - minor tweak can rapidly improve .example figure might use report paper. cleaned theme, added simple colour, made sure labels clear descriptive, ordered categories ascending frequency order, included simple text percentages aid readability.","code":"\npenguins |> \n  group_by(species) |> \n  summarise(n = n())\nprob_obs_species <- penguins |> \n  group_by(species) |> \n  summarise(n = n()) |> \n  mutate(prob_obs = n/sum(n))\n\nprob_obs_species\npenguins |> \n  ggplot()+\n  geom_bar(aes(x=species))\npenguins |> \n  ggplot(aes(x=\"\",\n             fill=species))+ \n  # specify fill = species to ensure colours are defined by species\n  geom_bar(position=\"fill\")+ \n  # specify fill forces geom_bar to calculate percentages\n  scale_y_continuous(labels=scales::percent)+ \n  #use scales package to turn y axis into percentages easily\n  labs(x=\"\",\n       y=\"\")+\n  theme_minimal()\npenguins |> \n  mutate(species=factor(species, levels=c(\"Adelie\",\n                                          \"Gentoo\",\n                                          \"Chinstrap\"))) |> \n  # set as factor and provide levels\n  ggplot()+\n  geom_bar(aes(x=species),\n           fill=\"steelblue\",\n           width=0.8)+\n  labs(x=\"Species\",\n       y = \"Number of observations\")+\n  geom_text(data=prob_obs_species,\n            aes(y=(n+10),\n                x=species,\n                label=scales::percent(prob_obs)))+\n  coord_flip()+\n  theme_minimal()"},{"path":"data-insights-part-one.html","id":"two-categorical-variables","chapter":"11 Data Insights part one","heading":"11.3.2 Two categorical variables","text":"Understanding frequency broken species sex might useful information .","code":"\npenguins |> \n  group_by(species, sex) |> \n  summarise(n = n()) |> \n  mutate(prob_obs = n/sum(n))"},{"path":"data-insights-part-one.html","id":"continuous-variables","chapter":"11 Data Insights part one","heading":"11.4 Continuous variables","text":"","code":""},{"path":"data-insights-part-one.html","id":"visualising-distributions","chapter":"11 Data Insights part one","heading":"11.4.1 Visualising distributions","text":"Variation tendency values variable change measurement measurement. can see variation easily real life; measure continuous variable twice, get two different results. true even measure quantities constant, like speed light. measurements include small amount error varies measurement measurement. Every variable pattern variation, can reveal interesting information. best way understand pattern visualise distribution variable’s values.script plot frequency distribution, specify x variable, intend plot histogram, y variable always count observations. ask data presented 10 equally sized bins data. case chopping x axis range 10 equal parts counting number observations fall within one.\nChange value specified bins argument observe \nfigure changes. usually good idea try one set\nbins order better insights data\nget data, combine data collected summary() function histogram hereWhich values common? < 3500g3500-4000g4000-4500g4500-5000g5000-5500g5500-6000g>6500gWhich values common? < 3500g3500-4000g4000-4500g4500-5000g5000-5500g5500-6000g>6500gWhich values rare? ? match expectations?\n< 3500g3500-4000g4000-4500g4500-5000g5000-5500g5500-6000g>6500gWhich values rare? ? match expectations?\n< 3500g3500-4000g4000-4500g4500-5000g5000-5500g5500-6000g>6500gCan see unusual patterns? YesNoCan see unusual patterns? YesNoHow many observations missing body mass information? many observations missing body mass information? Penguins weighing less 3kg 6kg rare.\ncommon weight appears just 4kg.","code":"\npenguins |> \n  ggplot()+\n  geom_histogram(aes(x=body_mass_g),\n                 fill = \"grey\",\n                 colour = \"black\",\n                 bins=10)"},{"path":"data-insights-part-one.html","id":"atypical-values","chapter":"11 Data Insights part one","heading":"11.4.1.1 Atypical values","text":"found atypical values point, decide exclude dataset (using filter()). stage strong reason believing mistake data entry, rather true outlier.","code":""},{"path":"data-insights-part-one.html","id":"central-tendency","chapter":"11 Data Insights part one","heading":"11.4.2 Central tendency","text":"Central tendency descriptive summary dataset single value reflects center data distribution. three widely used measures central tendency mean, median mode.mean defined sum values variable divided total number values. median middle value. N odd N even, average two middle values. mode frequently occurring observation data set, arguable least useful understanding biological datasets.can find mean median easily summarise function. mean usually best measure central tendency distribution symmetrical, mode best measure distribution asymmetrical/skewed.\nFigure 11.1: Red dashed line represents mean, Black dashed line median value\n","code":"\npenguin_body_mass_summary <- penguins |> \n    summarise(mean_body_mass=mean(body_mass_g, na.rm=T), \n              sd = sd(body_mass_g, na.rm = T),\n              min = min(body_mass_g, na.rm = T),\n              max=max(body_mass_g, na.rm = T),\n              median_body_mass=median(body_mass_g, na.rm=T), \n              iqr = IQR(body_mass_g, na.rm = T))\n\npenguin_body_mass_summary\npenguins |> \nggplot()+\n  geom_histogram(aes(x=body_mass_g),\n               alpha=0.8,\n               bins = 10,\n               fill=\"steelblue\",\n               colour=\"darkgrey\")+\n   geom_vline(data=penguin_body_mass_summary,\n             aes(xintercept=mean_body_mass),\n             colour=\"red\",\n             linetype=\"dashed\")+\n  geom_vline(data=penguin_body_mass_summary,\n             aes(xintercept=median_body_mass),\n             colour=\"black\",\n             linetype=\"dashed\")+\n  geom_text(data=penguin_body_mass_summary,\n            aes(x = mean_body_mass), \n            y = 90, label = \"mean\", hjust = 2)+\n  geom_text(data=penguin_body_mass_summary,\n            aes(x = median_body_mass), \n            y = 90, label = \"median\", hjust = -1, colour = \"red\")+\n  labs(x = \"Body mass (g)\",\n       y = \"Count\")+\n  coord_cartesian( ylim = c(0,90), expand = TRUE)"},{"path":"data-insights-part-one.html","id":"normal-distribution","chapter":"11 Data Insights part one","heading":"11.4.3 Normal distribution","text":"histogram can likely already tell whether normally distributed data.\nNormal distribution, also known “Gaussian distribution”, \nprobability distribution symmetric mean, showing \ndata near mean frequent occurrence data far \nmean. graphical form, normal distribution appears “bell\ncurve”.\ncan simulate add normal distribution mean sd:data follows normal distribution, can predict spread data, likelihood observing datapoint given value mean standard deviation.can simulate normally distributed dataset look like sample size, mean standard deviation.can also use stat_function add distribution curve plot","code":"\nx_values <- seq(2700,6300, 100)\n\nnorm_mass <- dnorm(x_values,\n      mean = 4201.754,\n      sd = 801.9545) |> \n  as_tibble()\n\ndensity <- tibble(x_values, norm_mass)\n\npenguins |> \nggplot()+\n  geom_histogram(aes(x=body_mass_g, y = ..density..),\n               alpha=0.8,\n               bins = 10,\n               fill=\"steelblue\",\n               colour=\"darkgrey\")+\n  geom_line(data = norm_mass, aes(x =x_values, y = value))+\n  labs(x = \"Body mass (g)\",\n       y = \"Count\")\npenguins |> \nggplot()+\n  geom_histogram(aes(x=body_mass_g, y = ..density..),\n               alpha=0.8,\n               bins = 10,\n               fill=\"steelblue\",\n               colour=\"darkgrey\")+\n  stat_function(fun = function(x){\n    dnorm(x,\n          mean = 4201.754,\n      sd = 801.9545)\n  })\n  labs(x = \"Body mass (g)\",\n       y = \"Count\")## $x\n## [1] \"Body mass (g)\"\n## \n## $y\n## [1] \"Count\"\n## \n## attr(,\"class\")\n## [1] \"labels\""},{"path":"data-insights-part-one.html","id":"qq-plot","chapter":"11 Data Insights part one","heading":"11.4.3.1 QQ-plot","text":"QQ plot classic way checking whether sample distribution another (theoretical distribution). look bit odd first, actually fairly easy understand, useful! qqplot distributes data y-axis, theoretical normal distribution x-axis. residuals follow normal distribution, meet produce perfect diagonal line across plot.Watch video see QQ plots explained\nFigure 11.2: Examples qqplots different deviations normal distribution\nexample can see residuals can explained normal distribution, except low end data.fit perfect, also terrible!know much deviation idealised distribution ok?qqPlot() function R package car provides 95% confidence interval margins help determine severely quantiles deviate idealised distribution.information qqPlot section distribution deviates clearly normal distribution <3500g3500-4000g4000-4500g5000-5500g>5500g","code":"\nggplot(penguins, aes(sample = body_mass_g))+\n  stat_qq() + \n  stat_qq_line()\npenguins |> \n  pull(body_mass_g) |> \n  car::qqPlot()## [1] 170 186"},{"path":"data-insights-part-one.html","id":"variation","chapter":"11 Data Insights part one","heading":"11.4.4 Variation","text":"Dispersion (spread data ) important component towards understanding numeric variable. measures central tendency used estimate central value dataset, measures dispersion important describing spread data.Two data sets can equal mean (, measure central tendency) vastly different variability.Important measures dispersion range, interquartile range, variance standard deviation.range defined difference highest lowest values dataset. disadvantage defining range measure dispersion take account values calculation.range defined difference highest lowest values dataset. disadvantage defining range measure dispersion take account values calculation.interquartile range defined difference third quartile denoted 𝑸_𝟑 lower quartile denoted 𝑸_𝟏 . 75% observations lie third quartile 25% observations lie first quartile.interquartile range defined difference third quartile denoted 𝑸_𝟑 lower quartile denoted 𝑸_𝟏 . 75% observations lie third quartile 25% observations lie first quartile.Variance defined sum squares deviations mean, divided total number observations. standard deviation positive square root variance. standard deviation preferred instead variance units original values.Variance defined sum squares deviations mean, divided total number observations. standard deviation positive square root variance. standard deviation preferred instead variance units original values.","code":""},{"path":"data-insights-part-one.html","id":"interquartile-range","chapter":"11 Data Insights part one","heading":"11.4.4.1 Interquartile range","text":"used IQR function summarise() find interquartile range body mass variable.IQR also useful applied summary plots 'box whisker plots'. can also calculate values IQR margins, add labels scales Wickham & Seidel (2022).can see IQR obtained subtracting body mass tht 75% quantile 25% quantile (4750-3550 = 1200).","code":"\npenguins |>\n  summarise(q_body_mass = quantile(body_mass_g, c(0.25, 0.5, 0.75), na.rm=TRUE),\n            quantile = scales::percent(c(0.25, 0.5, 0.75))) # scales package allows easy converting from data values to perceptual properties"},{"path":"data-insights-part-one.html","id":"visualising-dispersion","chapter":"11 Data Insights part one","heading":"11.4.5 Visualising dispersion","text":"\nFigure 11.3: Visualising dispersion different figures\nnow several compact representations body_mass_g including histogram, boxplot summary calculations. can generate summaries numeric variables. tables graphs provide detail need understand central tendency dispersion numeric variables.","code":"\ncolour_fill <- \"darkorange\"\ncolour_line <- \"steelblue\"\nlims <- c(0,7000)\n\nbody_weight_plot <- function(){\n  \n  penguins |> \n  ggplot(aes(x=\"\",\n             y= body_mass_g))+\n  labs(x= \" \",\n       y = \"Mass (g)\")+\n  scale_y_continuous(limits = lims)+\n    theme_minimal()\n}\n\nplot_1 <- body_weight_plot()+\n  geom_jitter(fill = colour_fill,\n               colour = colour_line,\n               width = 0.2,\n              shape = 21)\n\nplot_2 <- body_weight_plot()+\n  geom_boxplot(fill = colour_fill,\n               colour = colour_line,\n               width = 0.4)\n\nplot_3 <- penguin_body_mass_summary |> \n  ggplot(aes(x = \" \",\n             y = mean_body_mass))+\n  geom_bar(stat = \"identity\",\n           fill = colour_fill,\n           colour = colour_line,\n               width = 0.2)+\n  geom_errorbar(data = penguin_body_mass_summary,\n                aes(ymin = mean_body_mass - sd,\n                    ymax = mean_body_mass + sd),\n                colour = colour_line,\n                width = 0.1)+\n  labs(x = \" \",\n       y = \"Body mass (g)\")+\n  scale_y_continuous(limits = lims)+\n  theme_minimal()\n\n\nplot_1 + plot_2 + plot_3 "},{"path":"data-insights-part-one.html","id":"drop_na","chapter":"11 Data Insights part one","heading":"11.4.6 drop_na","text":"Missing values NA can really mess calculations. different ways can deal missing data:drop_na() everything start. runs risk lose lot data every row, NA column removeddrop_na() everything start. runs risk lose lot data every row, NA column removeddrop_na() particular variable. fine, approach cautiously - way write data new object e.g. penguins <- penguins |> drop_na(body_mass_g) removed data forever - perhaps want drop rows specific calculation - might contain useful information variables.drop_na() particular variable. fine, approach cautiously - way write data new object e.g. penguins <- penguins |> drop_na(body_mass_g) removed data forever - perhaps want drop rows specific calculation - might contain useful information variables.drop_na() specific task - cautious approach need aware another phenomena. data missing random? might need investigate missing values dataset. Data truly missing random can removed dataset without introducing bias. However, bad weather conditions meant researchers get particular island measure one set penguins data missing random treated caution. island contained one particular species penguin, might mean complete data two three penguin species. nothing can incomplete data aware data missing random influence distributions.drop_na() specific task - cautious approach need aware another phenomena. data missing random? might need investigate missing values dataset. Data truly missing random can removed dataset without introducing bias. However, bad weather conditions meant researchers get particular island measure one set penguins data missing random treated caution. island contained one particular species penguin, might mean complete data two three penguin species. nothing can incomplete data aware data missing random influence distributions.","code":""},{"path":"data-insights-part-one.html","id":"categorical-and-continuous-variables","chapter":"11 Data Insights part one","heading":"11.5 Categorical and continuous variables","text":"’s common want explore distribution continuous variable broken categorical variable.\nFigure 11.4: Species sex likely affect body mass\nreasonable think perhaps either species sex might affect morphology beaks directly - might affect body mass (direct relationship mass beak length, also indirect relationship sex species).best simplest place start exploring possible relationships producing simple figures.start looking distribution body mass species.","code":""},{"path":"data-insights-part-one.html","id":"activity-1-produce-a-plot-which-allows-you-to-look-at-the-distribution-of-penguin-body-mass-observations-by-species","chapter":"11 Data Insights part one","heading":"11.6 Activity 1: Produce a plot which allows you to look at the distribution of penguin body mass observations by species","text":"reasonable think perhaps either species sex might affect body mass, can visualise number different ways. last method, density histogram, looks little crowded now, use excellent ggridges package help ","code":"\njitter_plot <- penguins |> \n    ggplot(aes(x = species,\n               y = body_mass_g))+\n    geom_jitter(shape = 21,\n                fill = colour_fill,\n                colour = colour_line,\n                width = 0.2)+\n  coord_flip()\n\nbox_plot <- penguins |> \n    ggplot(aes(x = species,\n               y = body_mass_g))+\n    geom_boxplot(fill = colour_fill,\n                colour = colour_line,\n                width = 0.2)+\n  coord_flip()\n\nhistogram_plot <- penguins |> \n    ggplot(aes(fill = species))+\n    geom_histogram(aes(x = body_mass_g,\n                       y = ..density..),\n                   position = \"identity\",\n                   alpha = 0.6,\n                colour = colour_line)\n\njitter_plot/box_plot/histogram_plot"},{"path":"data-insights-part-one.html","id":"ggridges","chapter":"11 Data Insights part one","heading":"11.7 GGridges","text":"package ggridges (Wilke (2022)) provides excellent extra geoms supplement ggplot. One useful features allow different groups mapped y axis, histograms easily viewed.Q. species data distribution appears normally distributed?Gentoo YesNoGentoo YesNoChinstrap YesNoChinstrap YesNoAdelie YesNoAdelie YesNoWhile Gentoo density plot appears show two peaks, qqplot indicates deviate might expect normal distribution. still investigate whether \"two populations\" .","code":"\nlibrary(ggridges)\nggplot(penguins, aes(x = body_mass_g, y = species)) + \n  ggridges::geom_density_ridges(fill = colour_fill,\n                colour = colour_line,\n                alpha = 0.8)\npenguins |> \n  group_split(species) |> \n  map(~ pull(.x, body_mass_g) \n      |> car::qqPlot())## [[1]]\n## [1] 110 102\n## \n## [[2]]\n## [1] 38 39\n## \n## [[3]]\n## [1] 18 41\npenguins |> \n  drop_na() |> \n  ggplot(aes(x = body_mass_g, y = species)) + \n    geom_density_ridges(aes(fill = sex),\n                        colour = colour_line,\n                        alpha = 0.8,\n                        bandwidth = 175)\n# try playing with the bandwidth argument - this behaves similar to binning which you should be familiar with from using geom_histogram"},{"path":"data-insights-part-one.html","id":"activity-2-test-yourself","chapter":"11 Data Insights part one","heading":"11.8 Activity 2: Test yourself","text":"Question 1. Write insights made data relationships observed. Compare ones . agree ? miss ? observations make list .revealing really interesting insights shape distribution body sizes penguin populations now.example:Gentoo penguins appear show strong sexual dimorphism almost males larger females (little overlap density curves).Gentoo penguins appear show strong sexual dimorphism almost males larger females (little overlap density curves).Gentoo males females average larger two penguin speciesGentoo males females average larger two penguin speciesGentoo females two distinct peaks body mass.Gentoo females two distinct peaks body mass.Chinstrap penguins also show evidence sexual dimorphism, though greater overlap.Chinstrap penguins also show evidence sexual dimorphism, though greater overlap.Adelie penguins larger males females average, wide spread male body mass, (possibly two groups?)Adelie penguins larger males females average, wide spread male body mass, (possibly two groups?)Note able understand data better, spending time making data visuals. descriptive data statistics (mean, median) measures variance (range, IQR, sd) important. substitutes spending time thinking data making exploratory analyses.Question 2. Using summarise can quickly calculate \\(s\\) can replicate hand dplyr functions? - total \\(s\\) (category).ResidualsResidualsSquared residualsSquared residualsSum squaresSum squaresVariance = SS/dfVariance = SS/df\\(s=\\sqrt{Variance}\\)\\(s=\\sqrt{Variance}\\)","code":"\nmean <- penguins |> \n    summarise(mean = mean(body_mass_g, na.rm = T))\n\npenguins |> \n    mutate(residuals = (body_mass_g - pull(mean)),\n           sqrd_resid = residuals^2) |> \n    drop_na(sqrd_resid) |> \n    summarise(sum_squares = sum(sqrd_resid),\n              variance = sum_squares/(n=n())-1,\n              sd = sqrt(variance))"},{"path":"data-insights-part-two.html","id":"data-insights-part-two","chapter":"12 Data insights part two","heading":"12 Data insights part two","text":"previous chapter looked individual variables, understanding different types data. made numeric graphical summaries distributions features within variable. week continue work space, extend understanding include relationships variables.Understanding relationship two variables often basis scientific questions. might include comparing variables type (numeric numeric) different types (numeric categorical). chapter see can use descriptive statistics visuals explore associations","code":""},{"path":"data-insights-part-two.html","id":"associations-between-numerical-variables","chapter":"12 Data insights part two","heading":"12.1 Associations between numerical variables","text":"","code":""},{"path":"data-insights-part-two.html","id":"correlations","chapter":"12 Data insights part two","heading":"12.1.1 Correlations","text":"common measure association two numerical variables correlation coefficient. correlation metric numerical measure strength associationThere several measures correlation including:Pearson's correlation coefficient : good describing linear associationsPearson's correlation coefficient : good describing linear associationsSpearman's rank correlation coefficient: rank ordered correlation - good assumptions Pearson's correlation met.Spearman's rank correlation coefficient: rank ordered correlation - good assumptions Pearson's correlation met.Pearson's correlation coefficient r designed measure strength linear (straight line) association. Pearson's takes value -1 1.value 0 means linear association variablesA value 0 means linear association variablesA value 1 means perfect positive association variablesA value 1 means perfect positive association variablesA value -1 means perfect negative association variablesA value -1 means perfect negative association variablesA perfect association one can predict value one variable complete accuracy, just knowing value variable.can use cor function R calculate Pearson's correlation coefficient.tells us two features association. sign magnitude. coefficient negative, bill length increases, bill depth decreases. value -0.22 indicates 22% variation bill length can explained changes bill depth (vice-versa), suggesting variables closely related.\nFigure 12.1: Different relationships two numeric variables. number represents Pearson's correlation coefficient association\nPearson's coefficient designed summarise strength linear relationship, can misleading relationship linear e.g. curved humped. always good idea plot relationship first (see ).Pearson's coefficient designed summarise strength linear relationship, can misleading relationship linear e.g. curved humped. always good idea plot relationship first (see ).Even relationship linear, tell us anything steepness association (see ). tells us often change one variable can predict change value change.Even relationship linear, tell us anything steepness association (see ). tells us often change one variable can predict change value change.can difficult understand first, carefully consider figure .first row shows differing levels strength association. drew perfect straight line two variables, closely data points fit around line.first row shows differing levels strength association. drew perfect straight line two variables, closely data points fit around line.second row shows series perfect linear relationships. can accurately predict value one variable just knowing value variable, steepness relationship example different. important means perfect association can still small effect.second row shows series perfect linear relationships. can accurately predict value one variable just knowing value variable, steepness relationship example different. important means perfect association can still small effect.third row shows series associations clearly relationship two variables, also linear inappropriate Pearson's correlation.third row shows series associations clearly relationship two variables, also linear inappropriate Pearson's correlation.","code":"\ncor.test(penguins$culmen_length_mm, penguins$culmen_depth_mm)## \n##  Pearson's product-moment correlation\n## \n## data:  penguins$culmen_length_mm and penguins$culmen_depth_mm\n## t = -4.4591, df = 340, p-value = 1.12e-05\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  -0.3328072 -0.1323004\n## sample estimates:\n##        cor \n## -0.2350529{r}\nlibrary(rstatix)\n\npenguins |> \n  cor_test(culmen_length_mm, culmen_depth_mm)"},{"path":"data-insights-part-two.html","id":"non-linear-correlations","chapter":"12 Data insights part two","heading":"12.1.2 Non-linear correlations","text":"relationship variables non-linear? Instead using Pearson's correlation coefficient can calculate something called rank correlation.Instead working raw values two variables can use rank ordering instead. idea pretty simple start lowest vaule variable order '1', assign labels '2', '3' etc. ascend rank order. can see way applied manually function dense_rank dplyr :Measures rank correlation just comparison rank orders two variables, value -1 1 just like Pearsons's. already know Pearson's correlation coefficient, expect relationship negative. come surprise highest rank order values bill_length_mm appear associated lower rank order values bill_depth_mm.calculate Spearman's \\(\\rho\\) 'rho' pretty easy, can use cor functions , time specify hidden argument method=\"spearman\".can see example Pearson's r Spearman's \\(\\rho\\) basically identical.","code":"\npenguins |> select(culmen_length_mm, \n                    culmen_depth_mm) |> \n  drop_na() |> \n  mutate(rank_length=dense_rank((culmen_length_mm)), \n         rank_depth=dense_rank((culmen_depth_mm))) |> \n  head()\npenguins |> \n  cor_test(culmen_length_mm, culmen_depth_mm, method=\"spearman\")"},{"path":"data-insights-part-two.html","id":"graphical-summaries-between-numeric-variables","chapter":"12 Data insights part two","heading":"12.1.3 Graphical summaries between numeric variables","text":"Correlation coefficients quick simple way attach metric level association two variables. limited however single number can never capture every aspect relationship. visualise data.already covered scatter plots ggplot2() extensively previous chapters, just cover different ways present nature relationship\nFigure 2.2: scatter plot bill depth bill length mm\nNote - Remember number different options available constructing plot including changing alpha produce transparency plots lying top , colours (shapes) separate subgroups ways present third numerical variables setting aes(size=body_mass_g).\nFigure 12.2: Using patchwork can easily arrange extra plots fit marginals - boxplots, histograms density plots\nefforts allow us capture details spread distribution variables relate . figure provides us insights intoThe central tendency variableThe central tendency variableThe spread data variableThe spread data variableThe correlation two variablesThe correlation two variables","code":"\nlength_depth_scatterplot <- ggplot(penguins, aes(x= culmen_length_mm, \n                                                 y= culmen_depth_mm)) +\n                            geom_point()\n\nlength_depth_scatterplot\nlibrary(patchwork) # package calls should be placed at the TOP of your script\n\nbill_depth_marginal <- penguins |> \n  ggplot()+\n  geom_density(aes(x=culmen_depth_mm), fill=\"darkgrey\")+\n  theme_void()+\n  coord_flip() # this graph needs to be rotated\n\nbill_length_marginal <- penguins |> \n  ggplot()+\n  geom_density(aes(x=culmen_length_mm), fill=\"darkgrey\")+\n  theme_void()\n\nlayout <- \"\nAA#\nBBC\nBBC\"\n# layout is easiest to organise using a text distribution, where ABC equal the three plots in order, and the grid is how much space they take up. We could easily make the main plot bigger and marginals smaller with\n\n# layout <- \"\n# AAA#\n# BBBC\n# BBBC\"\n# BBBC\n\nbill_length_marginal+length_depth_scatterplot+bill_depth_marginal+ # order of plots is important\n  plot_layout(design=layout) # uses the layout argument defined above to arrange the size and position of plots"},{"path":"data-insights-part-two.html","id":"associations-between-categorical-variables","chapter":"12 Data insights part two","heading":"12.2 Associations between categorical variables","text":"Exploring associations different categorical variables quite simple previous numeric-numeric examples. Generally speaking interested whether different combinations categories uniformally distributed show evidence clustering leading - -represented combinations.\nsimplest way investigate use group_by summarise used previously.Note - remember group_by() applies functions comes group-specific pattern.tell us, 168 observations made Island Biscoe, three times many Gentoo penguin observations made Adelie penguins (remeber observations made, individual penguins). account penguin ID see around twice many Gentoo penguins recorded. can see Chinstrap penguins recorded Biscoe. Conversely can see Gentoo penguins observed Biscoe.\nisland Dream two populations Adelie Chinstrap penguins roughly equal size, island Torgensen appears population comprised Adelie penguins.also use bar chart ggplot represent count data.fine, looks bit odd, bars expand fill available space category axis. Luckily advanced version postion_dodge argument.alternative approach look 'relative proportions' population overall dataset. Using methods used previously looking single variables. add aesthetic tweaks improve look.\nFigure 12.3: dodged barplot showing numbers relative proportions data observations recorded penguin species location\n","code":"\nisland_species_summary <- penguins |> \n  group_by(island, species) |> \n  summarise(n=n(),\n            n_distinct=n_distinct(individual_id)) |> \n  ungroup() |> # needed to remove group calculations\n  mutate(freq=n/sum(n)) # then calculates percentage of each group across WHOLE dataset\n\nisland_species_summary\npenguins|> \n  ggplot(aes(x=island, fill=species))+\n  geom_bar(position=position_dodge())+\n  coord_flip()\npenguins|> \n  ggplot(aes(x=island, fill=species))+\n  geom_bar(position=position_dodge2(preserve=\"single\"))+ \n  #keeps bars to appropriate widths\n  coord_flip()\npenguins |> \n  ggplot(aes(x=island, fill=species))+\n  geom_bar(position=position_dodge2(preserve=\"single\"))+ \n  #keeps bars to appropriate widths\n    labs(x=\"Island\",\n       y = \"Number of observations\")+\n  geom_text(data=island_species_summary, # use the data from the summarise object\n            aes(x=island,\n                y= n+10, # offset text to be slightly to the right of bar\n                group=species, # need species group to separate text\n                label=scales::percent(freq) # automatically add %\n                ),\n            position=position_dodge2(width=0.8))+ # set width of dodge\n  scale_fill_manual(values=c(\"cyan\",\n                            \"darkorange\",\n                            \"purple\"\n                            ))+\n  coord_flip()+\n  theme_minimal()+\n  theme(legend.position=\"bottom\") # put legend at the bottom of the graph"},{"path":"data-insights-part-two.html","id":"associations-between-categorical-numerical-variables","chapter":"12 Data insights part two","heading":"12.3 Associations between Categorical-numerical variables","text":"Associations categorical numerical variables can explored various statistical methods data visualization techniques. One common approach use summary statistics box plots examine numerical values (e.g., body mass) differ across different categories (e.g., sex species). allows us identify trends disparities data.Histograms can also used explore associations categorical numerical variables, overlapping histograms comparing distributions within categories faceted histograms providing structured view different categories impact numerical data distributions. visualizations reveal patterns variations, aiding data analysis hypothesis testing.","code":"\npenguins |> \n  ggplot(aes(x=species,\n             y=body_mass_g))+\n  geom_boxplot()+\n  labs(y=\"Body mass (g)\",\n         x= \"Species\")\npenguins |> \n  ggplot(aes(x=body_mass_g,\n             fill=species))+\n  geom_histogram(alpha=0.6,\n         bins=30,\n         position=\"identity\")+\n  facet_wrap(~species,\n             ncol=1)"},{"path":"data-insights-part-two.html","id":"activity-2","chapter":"12 Data insights part two","heading":"12.4 Activity","text":"Start thinking complex interactions. wish investigate relationship body mass beak length. variables consider?reasonable think perhaps either species sex might affect morphology beaks directly - might affect body mass (direct relationship mass beak length, also indirect relationship sex species).Failure account complex interactions can lead misleading insights data.r unhide()parameters investigation - investigate visually check worked answers :Remember first correlated bill length bill depth found overall negative correlation -0.22. However, confounding variable accounted - species.demonstrated example Simpson's Paradox. another example carefully studying data - carefully considering variables likely affect studied controlled . entirely reasonable hypothesis different penguin species might different bill shapes might make overall trend misleading. can easily check effect categoricial variable two numeric variables assigning aesthetic colour.now clearly see striking reversal previous trend, fact within species penguin overall positive association bill length depth.prompt us re-evaluate correlation metrics:now see correlation values three species >0.22 - indicating associations much closer previously estimated.","code":"\ncolours <- c(\"cyan\",\n             \"darkorange\",\n             \"purple\")\n\nlength_depth_scatterplot_2 <- ggplot(penguins, aes(x= culmen_length_mm, \n                     y= culmen_depth_mm,\n                     colour=species)) +\n    geom_point()+\n  geom_smooth(method=\"lm\",\n              se=FALSE)+\n  scale_colour_manual(values=colours)+\n  theme_classic()+\n  theme(legend.position=\"none\")+\n    labs(x=\"Bill length (mm)\",\n         y=\"Bill depth (mm)\")\n\nlength_depth_scatterplot\nbill_depth_marginal_2 <- penguins |> \n  ggplot()+\n  geom_density(aes(x=culmen_depth_mm,\n                   fill=species),\n               alpha=0.5)+\n  scale_fill_manual(values=colours)+\n  theme_void()+\n  coord_flip() # this graph needs to be rotated\n\nbill_length_marginal_2 <- penguins |> \n  ggplot()+\n  geom_density(aes(x=culmen_length_mm,\n                   fill=species),\n               alpha=0.5)+\n  scale_fill_manual(values=colours)+\n  theme_void()+\n  theme(legend.position=\"none\")\n\nlayout2 <- \"\nAAA#\nBBBC\nBBBC\nBBBC\"\n\nbill_length_marginal_2+length_depth_scatterplot_2+bill_depth_marginal_2+ # order of plots is important\n  plot_layout(design=layout2) # uses the layout argument defined above to arrange the size and position of plots\npenguins |> \n  group_by(species) |> \n  cor_test(culmen_length_mm, culmen_depth_mm)"},{"path":"data-insights-part-two.html","id":"summing-up","chapter":"12 Data insights part two","heading":"12.5 Summing up","text":"last data handling workshop. built towards able discover examine relationships differences among variables data. now skills handle many different types data, tidy , produce visuals generate insight communicate others.note caution required - easy spot identify patterns.spot trend, difference relationship, important recognise may enough evidence assign reason behind observation. scientists important develope hypotheses based knowledge understanding, can help (sometimes) avoiding spurious associations.Sometimes may see pattern data, likely occurred due random chance, rather result underlying process. formal statistical analysis, quantitatively assess evidence, assess probability study effect sizes can incredibly powerful. delve exciting topics next term.! Thank taking time get far. kind found difficult. done incredibly well.","code":""},{"path":"writing-functions.html","id":"writing-functions","chapter":"13 Writing Functions","heading":"13 Writing Functions","text":"","code":""},{"path":"writing-functions.html","id":"structuring-a-function","chapter":"13 Writing Functions","heading":"13.1 Structuring a function","text":"R makes easy create user defined functions using function(). works:Give function object name assign function , e.g. my_function_name <- function().Give function object name assign function , e.g. my_function_name <- function().Within parentheses specify inputs arguments just like pre-written functions work, e.g. function(my_args).Within parentheses specify inputs arguments just like pre-written functions work, e.g. function(my_args).Next, put code want function execute inside curly brackets like : function(my_args) {code run}Next, put code want function execute inside curly brackets like : function(my_args) {code run}Use return() specify want function output done running code.Use return() specify want function output done running code.","code":"\n# this is an example function\nmy_function_name <- function(my_args) {\n  # document your function here\n  # what the function does\n  # function inputs and outputs\n  some_calculated_output <- (argument1 + argument2 )\n  \n  return(some_calculated_output)\n}"},{"path":"writing-functions.html","id":"activity-understand-the-function","chapter":"13 Writing Functions","heading":"13.1.1 Activity: Understand the function","text":"simple function. Can guess ?\nnow shortcut writing functions R (x)\nremoves need call function() use curly\nbraces{}.\n\ntutorial use older method now, briefly\ndemonstrate simpler syntax\nvalue get running function ? Now try applying function vector:see worked element inside vector. emphasises R vector based language (default apply functions elements object).","code":"\nadd_one <- function(x) {\n  return(x + 1)\n}\nadd_one <- \\(x) x + 1\nadd_one(10)## [1] 11\nnumber_series <- c(1,5,10)"},{"path":"writing-functions.html","id":"function-environments","chapter":"13 Writing Functions","heading":"13.2 Function environments","text":"function evaluated, creates environment. arguments passed function,\nalong variables created function stored new environment.function's environment's parent global environment, can see variables created \nglobal environment. Variables created function's environment visible global environment\nthough.reassign variable function take copy variable rather mutating value global environment. want update x global environment need use <<- operator.create function called fahr_to_kelvin converts temperature values degrees Fahrenheit Kelvin.return() function can return single object. want return multiple values R, can use list (objects) return .\ngeneral rule thumb. end repeating line code \nthree times script - write function \nwork instead. write clear comments use!\n\n?\n\nreduces numbers lines code script, reduces\namount repetition code, need make changes \ncan change function without hunt \ncode.\n\nreally good way organise functions organise \nseparate script rest analysis. Write functions \nseparate script use source(“scripts/functions.R”)\n","code":"\n# x has a value of 1 in the global environment\nx <- 1 \n\nfn <- function(y) {\n # the value of x is copied from the global environment\n # but any changes remain only within the function environment\n  x <- x * 2\n  z <- x + y\n  return(z)\n}\n\nfn(2)\nx## [1] 4\n## [1] 1\nfahr_to_kelvin <- function(fahr) {\n\n  kelvin <- ((fahr - 32) * (5 / 9)) + 273.15\n  return(kelvin)\n}\nfahr_to_kelvin_celsius <- function(fahr) {\n\n  celsius <- ((fahr - 32) * (5 / 9))\n  kelvin <- celsius +  + 273.15\n  \n  temps <- list(celsius, kelvin)\n  names(temps) <- c(\"celsius\", \"kelvin\")\n  \n  return(temps)\n}"},{"path":"writing-functions.html","id":"argument-defaults","chapter":"13 Writing Functions","heading":"13.2.1 Argument defaults","text":"example simple function just prints string \"Hello World\" whenever type function say_hello()","code":"\nsay_hello <- function(){\n  paste(\"Hello World\") \n}\n\nsay_hello()## [1] \"Hello World\""},{"path":"writing-functions.html","id":"activity-understanding-arguments","chapter":"13 Writing Functions","heading":"13.2.2 Activity: Understanding arguments","text":"happens try put something brackets using function?Now lets try similar function, include argument:example included argument function. now requires value provided order work.","code":"\nsay_morning <- function(x){\n  paste(\"Good morning\", x)\n}\n\n#  what about this one?\nsay_morning(\"Phil\")## [1] \"Good morning Phil\"Error in paste(\"Good morning\", x) : \n  argument \"x\" is missing, with no default"},{"path":"writing-functions.html","id":"argument-defaults-1","chapter":"13 Writing Functions","heading":"13.2.2.1 Argument defaults","text":"However, probably used idea many functions \"default\" values arguments, can easily set .\nnow default value supplied argument, \nstill able changed running function. Try !\n","code":"\nsay_morning_default <- function(name = \"you\"){\n  paste(\"Good morning\", name)\n}\n\nsay_morning_default()## [1] \"Good morning you\""},{"path":"writing-functions.html","id":"wrapper-functions","chapter":"13 Writing Functions","heading":"13.3 Wrapper functions","text":"Wrapper functions R powerful tool simplifying customizing use existing functions. functions act intermediaries user underlying function, allowing add additional functionality, handle errors, make function user-friendly. especially useful want streamline repetitive tasks, create intuitive interfaces, modify behavior built-functions without altering source code. brief introduction, explore concept wrapper functions, benefits, create use effectively R.","code":""},{"path":"writing-functions.html","id":"default-values","chapter":"13 Writing Functions","heading":"13.3.1 Default values","text":"ou can create wrapper function calls existing function default argument values simplify usage. instance, frequently use mean function specific argument, can create wrapper like :Now, can use my_mean(x) calculate mean always ignoring NA values.happens try use new function my_mean set na.rm = F?want able allow users specify values na.rm = T need modify wrapper functionWith modification, users can provide value na.rm argument calling my_mean. example:modification makes na.rm argument my_mean function flexible allows users override default behavior needed.","code":"\nmy_mean <- function(x) {\n  mean(x, na.rm = TRUE)\n}Error in my_mean(c(5, 6, 7, 8), na.rm = F) : unused argument (na.rm = F)\nmy_mean <- function(x, na.rm = TRUE) {\n  mean(x, na.rm = na.rm)\n}\nmy_mean(c(1, 2, NA, 4))# By default, NA values are removed\nmy_mean(c(1, 2, NA, 4), na.rm = FALSE)  # NA values are not removed## [1] 2.333333\n## [1] NA"},{"path":"writing-functions.html","id":"using-...","chapter":"13 Writing Functions","heading":"13.3.2 Using \"...\"","text":"can allow user access original arguments mean() using ... (ellipsis) argument wrapper function.R ellipse, ..., used functions one two things.capture unknown number argumentsto capture unknown number argumentsor pass arguments underlying function, ?print().pass arguments underlying function, ?print().... argument allows pass additional arguments directly underlying function. can modify my_mean function maintain flexibility mean() function's arguments:Now can pass arguments directly mean, version default removes NA dataframe (can overidden necessary)can pass additional arguments found mean new function e.g. trim\nfunctions designed accept arbitrary unspecified\nadditional arguments via …. case lm() function \nexample, formal … argument allows arbitrary\nadditional arguments passed.\n\nfunction doesn’t support …, attempting pass extra arguments\nusing … result error, “used incorrect\ncontext, … look ” error encountered.\n","code":"\nmy_mean <- function(..., na.rm = TRUE) {\n  mean(..., na.rm = na.rm)\n}\nmy_mean(c(1, 2, NA, 4))## [1] 2.333333\nmy_mean(c(1, 2, NA, 4), trim = 1) ## [1] 2"},{"path":"writing-functions.html","id":"documenting-functions","chapter":"13 Writing Functions","heading":"13.4 Documenting functions","text":"important document functions :Remind future self function doesRemind future self function doesShow future self colleagues use functionShow future self colleagues use functionHelp anyone else looking code understand think function doesHelp anyone else looking code understand think function doesA common way add documentation software add comments function specifyWhat function ?function ?arguments (inputs) function, supposed (e.g., class ? Character, numeric, logical?)arguments (inputs) function, supposed (e.g., class ? Character, numeric, logical?)function return, kind object ?function return, kind object ?Like :\nFormal documentation R functions see access \nhelp R written separate .Rd using markup language similar \nLaTeX. see result documentation look \nhelp file given function, e.g. ?read.csv. \nroxygen2 package allows R coders write documentation\nalongside function code process appropriate .Rd\nfiles. consider switching formal method writing\ndocumentation start working complicated R projects. \naspire write packages R! R\npackages 2nd Edition\n","code":"\n# Function: fahr_to_kelvin_celsius\n# Description: Converts a temperature in degrees Fahrenheit to degrees Celsius and Kelvin.\n#\n# Input:\n#   fahr: Numeric value representing temperature in degrees Fahrenheit.\n#\n# Output:\n#   A list containing two elements:\n#   - celsius: Numeric value representing temperature in degrees Celsius.\n#   - kelvin: Numeric value representing temperature in Kelvin.\n#\n# Example Output:\n#   If you call fahr_to_kelvin_celsius(32), the result would be:\n#   celsius: 0\n#   kelvin: 273.15\n  \n\nfahr_to_kelvin_celsius <- function(fahr) {\n\n # Calculate the temperature in degrees Celsius  \n  celsius <- ((fahr - 32) * (5 / 9))\n  \n  # Calculate the temperature in Kelvin\n  kelvin <- celsius +  + 273.15\n  \n  # Create a list to store the results \n  temps <- list(celsius, kelvin)\n  names(temps) <- c(\"celsius\", \"kelvin\")\n \n  # Return the list of temperatures \n  return(temps)\n}"},{"path":"writing-functions.html","id":"exercise","chapter":"13 Writing Functions","heading":"13.4.1 Exercise","text":"","code":"\nmy_lm <- function(formula, data) {\n \n  model <- lm(formula, data = data)\n  \n\n  summary_model <- summary(model)\n  \n  \n  cat(\"Coefficients:\\n\")\n  print(summary_model$coefficients)\n  \n  \n  par(mfrow = c(2, 2))  # Arrange plots in a 2x2 grid\n  plot(model, which = 1)  # Residuals vs. Fitted\n  plot(model, which = 2)  # Normal Q-Q plot\n  plot(model, which = 3)  # Scale-Location plot\n  plot(model, which = 4)  # Residuals vs. Leverage\n  \n  # Return the fitted model\n  return(model)\n}\n# Function: my_lm\n# Description: Fit a linear regression model and provide summary statistics and diagnostic plots.\n#\n# Input:\n#   formula: A formula specifying the regression model.\n#   data: The data frame containing the variables used in the model.\n#\n# Output:\n#   A linear regression model object fitted to the data.\n#\n# Example Usage:\n#   To fit a linear regression model to the 'body_mass_g' variable as a function of 'flipper_length_mm in the 'penguins' dataset,\n#   you can call:\n#   my_lm(body_mass_g ~ flipper_length_mm, data = penguins_raw)\n\nmy_lm <- function(formula, data) {\n  # Fit a linear regression model\n  model <- lm(formula, data = data)\n\n  # Get summary statistics of the model\n  summary_model <- summary(model)\n\n  # Print model coefficients\n  cat(\"Coefficients:\\n\")\n  print(summary_model$coefficients)\n\n  # Arrange plots in a 2x2 grid\n  par(mfrow = c(2, 2))\n\n  # Plot diagnostics:\n  # 1. Residuals vs. Fitted\n  plot(model, which = 1)\n\n  # 2. Normal Q-Q plot\n  plot(model, which = 2)\n\n  # 3. Scale-Location plot\n  plot(model, which = 3)\n\n  # 4. Residuals vs. Leverage\n  plot(model, which = 4)\n\n  # Return the fitted model\n  return(model)\n}"},{"path":"writing-functions.html","id":"checking-functions","chapter":"13 Writing Functions","heading":"13.5 Checking functions","text":"","code":""},{"path":"writing-functions.html","id":"print","chapter":"13 Writing Functions","heading":"13.5.1 print","text":"One simple easy way keep top functions, understand use lots print statements.","code":"\n# This edited function will now remind the user what the input value was\n\nfahr_to_kelvin_celsius <- function(fahr) {\n    # Calculate the temperature in degrees Celsius\n    celsius <- (fahr - 32) * (5 / 9)\n    \n    # Calculate the temperature in Kelvin\n    kelvin <- celsius + 273.15\n    \n    # Create a list to store the results\n    temps <- list(celsius = celsius, kelvin = kelvin)\n    \n    # Return the list of temperatures along with a message\n    print(paste(\"The temperature in Fahrenheit was\", fahr))\n    return(temps)\n}"},{"path":"writing-functions.html","id":"testthat","chapter":"13 Writing Functions","heading":"13.5.2 testthat","text":"Pure Functions:\npure function concept programming describes function following characteristics:always produces output input.\nside effects, meaning modify external state variables.\nrelies input parameters generate output.\nR, pure functions essential creating clean predictable code. often used functional programming perform operations data without causing unexpected side effects.function pure, can run expectation tests using testthat package:","code":"\ntest_that(\"it works as expected\", {\n    expect_equal(fahr_to_kelvin(92), 306.483, tolerance=1e-2)  \n   \n})"},{"path":"writing-functions.html","id":"debugging","chapter":"13 Writing Functions","heading":"13.5.3 debugging","text":"complex functions, may need go digging! three basic commands:debug()debug()browser()browser()undebug()undebug()debug(function_name) next time run function_name() interactive session open Rstudio.\ndebug mode can call individual objects function, run commands line line:done debugging important turn debug mode - close interactive page run undebug(function_name) debugging panel reopen next time launch function.debugging mode, can use various commands inspect control debugging process. common debugging commands:n next: Step next line function.n next: Step next line function.c continue: Continue execution function returns.c continue: Continue execution function returns.Q quit: Quit debugging return R console.Q quit: Quit debugging return R console.: Show call stack see function.: Show call stack see function.print(var_name): Print value variable.print(var_name): Print value variable.","code":"\nmake_sum <- function(a,b){\n  c <- a+b\n  return(c)\n}\n\ndebug(make_sum)\n\nmake_sum(a = 5, b =2)\n\nundebug(make_sum)"},{"path":"writing-functions.html","id":"flow","chapter":"13 Writing Functions","heading":"13.5.3.1 flow","text":"flow great package helping understand code structures - visualizes chart diagram functional architecture.","code":"\nlibrary(flow)\n\nflow_run(fahr_to_kelvin_celsius(92))"},{"path":"writing-functions.html","id":"exercises","chapter":"13 Writing Functions","heading":"13.6 Exercises","text":"function designed calculate triangular numbersLet's build check works:Test passed 😸Test passed 😀","code":"\nlibrary(testthat)\n\ntriangle_number <- function(x) {\n    0.5 * x * (x + 1)\n}\ntest_that(\"it works as expected\", {\n    expect_equal(triangle_number(1),  1)  \n    expect_equal(triangle_number(2),  3)  \n    expect_equal(triangle_number(3),  6)  \n    expect_equal(triangle_number(4), 10)  \n    expect_equal(triangle_number(5), 15)  \n})\ntest_that(\"it works as expected\", {\n    expect_equal(fahr_to_kelvin_celsius(92), list(33, 306), tolerance = 1)  \n    \n})\n# the output is a named list, so these must be supplied with the test\nnamed_list <- list(celsius = 33.3, kelvin = 306.4)\n\n\ntest_that(\"it works as expected\", {\n    expect_equal(fahr_to_kelvin_celsius(92), list(33, 306), tolerance = 1e-2)  \n    \n})"},{"path":"flow-control.html","id":"flow-control","chapter":"14 Flow control","heading":"14 Flow control","text":"Imagine want variable equal certain value condition met. typical problem requires else construct. instance:Another way achieve using ifelse() function:else might seem interchangeable ifelse(), ’re . ifelse() vectorized. Let’s try following:Trying attempt else result error first element can evaluatedThe work around use loop, element along vector can evaluated turn. revisit loops shortly.","code":"\na <- 4\nb <- 5\nif (a > b) {\n  f <- 20\n    } else {\n  f <- 10\n}\n\nf## [1] 10\nf <- ifelse(a > b, 20, 10)\nf## [1] 10\nifelse(c(1,2,4) > c(3, 1, 0), \"yes\", \"no\")## [1] \"no\"  \"yes\" \"yes\"\nif (c(1, 2, 4) > c(3, 1, 0)) print(\"yes\") else print(\"no\")Error in if (c(1, 2, 4) > c(3, 1, 0)) print(\"yes\") else print(\"no\") : \n  the condition has length > 1\n\nvector1 <- c(1, 2, 4)\nvector2 <- c(3, 1, 0)\n\nresult <- character(length(vector1))  # Create an empty character vector to store the results\n\nfor (i in 1:length(vector1)) {\n  if (vector1[i] > vector2[i]) {\n    result[i] <- \"yes\"\n  } else {\n    result[i] <- \"no\"\n  }\n}\n\nprint(result)## [1] \"no\"  \"yes\" \"yes\""},{"path":"flow-control.html","id":"case_when","chapter":"14 Flow control","heading":"14.0.1 case_when","text":"case_when powerful tidyverse function R serves extension if_else, providing flexible way create conditional transformations multiple values within dataset. if_else primarily used single condition, case_when designed handle multiple conditions allows assign specific values perform operations based conditions.simple introduction case_when extension if_else:Imagine dataset column called \"temperature,\" want create new column called \"weather\" based different temperature ranges. if_else, might write something like :","code":"\ntemperature <-  c(10, 25, 5, 30, 15)\n\nifelse(temperature < 10, \"Cold\",\n        ifelse(temperature >= 10 & temperature < 25, \"Moderate\", \"Hot\"))## [1] \"Moderate\" \"Hot\"      \"Cold\"     \"Hot\"      \"Moderate\"\ncase_when(\n    temperature < 10 ~ \"Cold\",\n    temperature >= 10 & temperature < 25 ~ \"Moderate\",\n    temperature >= 25 ~ \"Hot\"\n  )## [1] \"Moderate\" \"Hot\"      \"Cold\"     \"Hot\"      \"Moderate\""},{"path":"flow-control.html","id":"conditional-functions","chapter":"14 Flow control","heading":"14.1 Conditional functions","text":"make function reports p-values APA format (\"p = [rounded value]\" p >= .001 \"p < .001\" p < .001).can add default value argument. argument skipped, function uses default argument.First make function rounds value three digits.like conditional response well: need else statement.However soon hit first problem, function works well provided single numeric value, applied vector dataframe encounter error:R, conditional statements vector operations. deal single value. pass , example, vector, statement check first element issue warning. solution ifelse() tidyverse equivalent if_else() functionhttps://stackoverflow.com/questions/50646133/dplyr--else-vs-base-r-ifelse","code":"\nreport_p <- function(p, digits = 3) {\n      roundp <- round(p, digits)\n    reported <-  paste(\"p =\", roundp)\n    \n    return(reported)\n}\n report_p <- function(p, digits = 3) {\n     reported <- if(p < 0.001){\n             \"p < 0.001\"} else{\n             paste(\"p =\", round(p, digits))}\n             \n     \n     return(reported)\n }\nx <- c(0,0.05,0.3,0.4)\n\nreport_p(x)Error in if (p < 0.001) { : the condition has length > 1\n report_p <- function(p, digits = 3) {\n     reported <- ifelse(p < 0.001,\n             \"p < 0.001\",\n             paste(\"p =\", round(p, digits)))\n     \n     return(reported)\n }\n report_p <- function(p, digits = 3) {\n     reported <- if_else(p < 0.001,\n             \"p < 0.001\",\n             paste(\"p =\", round(p, digits)))\n     \n     return(reported)\n }"},{"path":"flow-control.html","id":"warnings-and-errors","chapter":"14 Flow control","heading":"14.2 Warnings and errors","text":"\nhappens omit argument p, set value 1.5 \ncharacter “”?\nSometimes function run, first example provide argument default.p = 1.5 probably run (p = 1.5 makes sense), !p = \"\" warning perhaps intuitive one.can make custom/specific warnings, try run arguments !","code":"\n report_p <- function(p, digits = 3) {\n   \n  if (!is.numeric(p)) stop(\"p must be a number\")\n  if (p <= 0) warning(\"p-values cannot less 0\")\n  if (p >= 1) warning(\"p-values cannot be greater than 1\")\n   \n     reported <- ifelse(p < 0.001,\n             \"p < 0.001\",\n             paste(\"p =\", round(p, digits)))\n     return(reported)\n }\nreport_p <- function(p, digits = 3) {\n \n if (!is.numeric(p)) stop(\"p must be a number\")\n \n   result <- case_when(\n       p <= 0 ~ \"p-values cannot be less than or equal to 0\",\n       p >= 1 ~ \"p-values cannot be greater than or equal to 1\",\n       p < 0.001 ~ \"p < 0.001\",\n       .default = paste(\"p =\", round(p, digits))\n   )\n   \n   return(result)\n}"},{"path":"flow-control.html","id":"activities","chapter":"14 Flow control","heading":"14.3 Activities","text":"Exercise 1: Write Simple Function\ncreate function calculates GC content DNA sequence, result melting temperature sequence returns list.GC content percentage DNA molecule's nitrogenous bases either guanine (G) cytosine (C).common metric used molecular biology genetics analyze DNA sequences. GC base addes 4 degrees melting temp base adds 2 degrees.Hint stringr associated functions helpful herestr_count can let selectively add letters vectorstr_length can let count characters vectorExercise 2: Document FunctionAdd documentation factorial function comments. Include description, inputs, outputs examples.Exercise 3: Test FunctionCreate test script uses test_that check function returns correct GC percentage melting tempsExercise 4: Handle ErrorsYou can optionally modify gc_content function handle errors input contains non-DNA characters, warnings length exceeds 30nt?","code":"\ngc_content <- function(dna_sequence) {\n  # Convert the input sequence to uppercase to handle mixed-case input\n  dna_sequence <- toupper(dna_sequence)\n  \n \n  # Calculate the number of GC bases (C and G) in the sequence\n gc_positions <- unlist(gregexpr(\"[GC]\", dna_sequence))\n gc_count <- length(gc_positions)\n\n  # Calculate the total number of bases in the sequence\n  total_bases <- nchar(dna_sequence)\n  \n  # Calculate the GC content as a percentage\n  gc_percentage <- (gc_count / total_bases) * 100\n  \n  gc_percentage <- round(gc_percentage, 2)\n  \n  # Calculate AT numbers\n  at_count <- total_bases - gc_count\n  \n  # Calculate melting temp of sequence\n  melt_temp <- (gc_count*4) + (at_count*2)\n  \n  \n  dna_content <- list(gc_percentage, melt_temp)\n  names(dna_content) <- c(\"GC Percentage\", \"Melting temp (celsius)\")\n  \n  \n  return(dna_content)\n}\ngc_content <- function(dna_sequence) {\n  # Convert the input sequence to uppercase to handle mixed-case input\n  dna_sequence <- str_to_upper(dna_sequence)\n  \n\n  \n  # Calculate the number of GC bases (C and G) in the sequence\n  gc_count <- sum(str_count(dna_sequence %in% c(\"G\", \"C\")))\n  \n  # Calculate the total number of bases in the sequence\n  total_bases <- str_length(dna_sequence)\n  \n  # Calculate the GC content as a percentage\n  gc_percentage <- (gc_count / total_bases) * 100\n  \n  gc_percentage <- round(gc_percentage, 2)\n  \n   # Calculate AT numbers\n  at_count <- total_bases - gc_count\n  \n  # Calculate melting temp of sequence\n  melt_temp <- (gc_count*4) + (at_count*2)\n  \n  \n  dna_content <- list(gc_percentage, melt_temp)\n  names(dna_content) <- c(\"GC Percentage\", \"Melting temp (celsius)\")\n  \n  \n  return(dna_content)\n}\n# Function: gc_content\n# Description: calculates the GC (Guanine-Cytosine) content and the melting temperature of a given DNA sequence. \n#\n# Input:\n#   dna_sequence: A character string representing the DNA sequence for which you want to calculate GC content and melting temperature.   \n#   The function is case-insensitive, meaning it can handle mixed-case input. The sequence should consist of valid DNA bases (A, T, C, G).\n#\n# Output:\n#   A named list containing two elements:\n#   - \"GC Percentage\" (numeric): The calculated GC content as a percentage, rounded to two decimal places.\n#   - \"Melting temp (celsius)\" (numeric): The estimated melting temperature of the input DNA sequence in degrees Celsi\n#\n# Example Output:\n#   If you call gc_content(\"ATGCGTAGCT\")\n#   $`GC Percentage`\n#   [1] 50\n#  $`Melting temp (celsius)`\n#  [1] 30\n\ngc_content <- function(dna_sequence) {\n  # Convert the input sequence to uppercase to handle mixed-case input\n  dna_sequence <- str_to_upper(dna_sequence)\n  \n\n  \n  # Calculate the number of GC bases (C and G) in the sequence\n  gc_count <- sum(str_count(dna_sequence %in% c(\"G\", \"C\")))\n  \n  # Calculate the total number of bases in the sequence\n  total_bases <- str_length(dna_sequence)\n  \n  # Calculate the GC content as a percentage\n  gc_percentage <- (gc_count / total_bases) * 100\n  \n  gc_percentage <- round(gc_percentage, 2)\n  \n   # Calculate AT numbers\n  at_count <- total_bases - gc_count\n  \n  # Calculate melting temp of sequence\n  melt_temp <- (gc_count*4) + (at_count*2)\n  \n  \n  dna_content <- list(gc_percentage, melt_temp)\n  names(dna_content) <- c(\"GC Percentage\", \"Melting temp (celsius)\")\n  \n  \n  return(dna_content)\n}\ntest_that(\"gc_content function tests\", {\n    # Test valid input and GC content calculation\n    dna_seq1 <- \"ATGCGTAGCT\"\n    result1 <- gc_content(dna_seq1)\n    expect_equal(result1$`GC Percentage`, 50)\n    expect_equal(result1$`Melting temp (celsius)`, 30)})## Test passed 🎊# this is the regular expression to detect ATCG\n\nstr_detect(dna_sequence, \"^[ATCG]+$\")) \ngc_content <- function(dna_sequence) {\n  # Convert the input sequence to uppercase to handle mixed-case input\n  dna_sequence <- toupper(dna_sequence)\n  \n  # Check if the input sequence contains only valid DNA characters (A, T, C, G)\n  if (!grepl(\"^[ATCG]+$\", dna_sequence)) stop(\"Invalid DNA sequence. Only A, T, C, and G are allowed.\")\n  \n  if (nchar(dna_sequence) > 30 ) warning(\"Sequence is > 30 nt temperature predictions may be inaccurate\")\n  \n  \n  # Calculate the number of GC bases (C and G) in the sequence\n gc_positions <- unlist(gregexpr(\"[GC]\", dna_sequence))\n gc_count <- length(gc_positions)\n\n  # Calculate the total number of bases in the sequence\n  total_bases <- nchar(dna_sequence)\n  \n  # Calculate the GC content as a percentage\n  gc_percentage <- (gc_count / total_bases) * 100\n  \n  gc_percentage <- round(gc_percentage, 2)\n  \n  # Calculate AT numbers\n  at_count <- total_bases - gc_count\n  \n  # Calculate melting temp of sequence\n  melt_temp <- (gc_count*4) + (at_count*2)\n  \n  \n  dna_content <- list(gc_percentage, melt_temp)\n  names(dna_content) <- c(\"GC Percentage\", \"Melting temp (celsius)\")\n  \n  \n  return(dna_content)\n}\ngc_content <- function(dna_sequence) {\n  # Convert the input sequence to uppercase to handle mixed-case input\n  dna_sequence <- str_to_upper(dna_sequence)\n  \n  # Check if the input sequence contains only valid DNA characters (A, T, C, G)\nif (!str_detect(dna_sequence, \"^[ATCG]+$\")) stop(\"Invalid DNA sequence. Only A, T, C, and G are allowed.\")\n\n    if (str_length(dna_sequence) > 30 ) warning(\"Sequence is > 30 nt temperature predictions may be inaccurate\")\n\n  \n  # Calculate the number of GC bases (C and G) in the sequence\n  gc_count <- sum(str_count(dna_sequence %in% c(\"G\", \"C\")))\n  \n  # Calculate the total number of bases in the sequence\n  total_bases <- str_length(dna_sequence)\n  \n  # Calculate the GC content as a percentage\n  gc_percentage <- (gc_count / total_bases) * 100\n  \n  gc_percentage <- round(gc_percentage, 2)\n  \n   # Calculate AT numbers\n  at_count <- total_bases - gc_count\n  \n  # Calculate melting temp of sequence\n  melt_temp <- (gc_count*4) + (at_count*2)\n  \n  \n  dna_content <- list(gc_percentage, melt_temp)\n  names(dna_content) <- c(\"GC Percentage\", \"Melting temp (celsius)\")\n  \n  \n  return(dna_content)\n}"},{"path":"simple-iteration.html","id":"simple-iteration","chapter":"15 Simple iteration","heading":"15 Simple iteration","text":"’ve seen write function can used create concise re-usable operations can applied multiple times script without copy paste, functions really come combined iteration. Iteration process running operation group objects, minimising code replication.Functional programming R requires good understanding types data structure available R. make sure remember distinctions vectors, lists, matrices dataframes.section start simple functions allow replicate arguments","code":""},{"path":"simple-iteration.html","id":"rep","chapter":"15 Simple iteration","heading":"15.1 rep()","text":"function rep() lets repeat first argument set number times.default amount repetition times = print entire vector start finish repeat.second argument vector number elements first vector, repeat specified values eachOr use argument rep first element first followed second etc.think happen set times 3 2?","code":"\nrep(1:5, 5)\n\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), 2)##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n## [1] \"Adelie\"    \"Gentoo\"    \"Chinstrap\" \"Adelie\"    \"Gentoo\"    \"Chinstrap\"\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), c(2, 1, 3))## [1] \"Adelie\"    \"Adelie\"    \"Gentoo\"    \"Chinstrap\" \"Chinstrap\" \"Chinstrap\"\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), each = 3)## [1] \"Adelie\"    \"Adelie\"    \"Adelie\"    \"Gentoo\"    \"Gentoo\"    \"Gentoo\"   \n## [7] \"Chinstrap\" \"Chinstrap\" \"Chinstrap\"\nrep(c(\"Adelie\", \"Gentoo\", \"Chinstrap\"), times = 2, each = 3)##  [1] \"Adelie\"    \"Adelie\"    \"Adelie\"    \"Gentoo\"    \"Gentoo\"    \"Gentoo\"   \n##  [7] \"Chinstrap\" \"Chinstrap\" \"Chinstrap\" \"Adelie\"    \"Adelie\"    \"Adelie\"   \n## [13] \"Gentoo\"    \"Gentoo\"    \"Gentoo\"    \"Chinstrap\" \"Chinstrap\" \"Chinstrap\""},{"path":"simple-iteration.html","id":"seq","chapter":"15 Simple iteration","heading":"15.2 seq()","text":"function seq() useful generating sequence numbers pattern.Use seq() create vector integers 0 10.initially similar just making vector withBut seq extra functions. can set argument count numbers 1 (default). Use seq() create vector numbers 0 100 10s.also argument length., useful want know many steps divide something ","code":"\nseq(1,5)## [1] 1 2 3 4 5\nc(1:5)## [1] 1 2 3 4 5\nseq(0, 100, by = 10)##  [1]   0  10  20  30  40  50  60  70  80  90 100\nseq(0, 100, length.out = 12)##  [1]   0.000000   9.090909  18.181818  27.272727  36.363636  45.454545\n##  [7]  54.545455  63.636364  72.727273  81.818182  90.909091 100.000000"},{"path":"simple-iteration.html","id":"replicate","chapter":"15 Simple iteration","heading":"15.3 replicate()","text":"Replicate first example function whose purpose iterate functionsFor example rnorm function generates numbers normal distribution.Nesting inside replicate() function repeat command specified number timeshttps://www.r-bloggers.com/2023/07/-replicate-function--r/Note default behaviour replicate simplify = TRUE, return compact data structure can. set simplfy = FALSE return list.","code":"\nreplicate(3, # times to replicate function\n          expr = rnorm(n = 5, \n                       mean = 1,\n                       sd = 1))##             [,1]       [,2]      [,3]\n## [1,]  0.15777458  1.4633883 0.3409807\n## [2,]  1.32342825 -0.4650372 2.3607988\n## [3,]  1.66379826  0.9914023 0.1729935\n## [4,]  1.77568409 -0.7147539 1.3281941\n## [5,] -0.03470096  1.6855677 1.1956467"},{"path":"loops.html","id":"loops","chapter":"16 Loops","heading":"16 Loops","text":"Loops one staples programming languages, just R, can powerful tool; though see later suite alternative loops R.loops make possible repeat set instructions times. example, try following:OrThis dynamic piece code index '' iteratively replaced value vector 1:5.break . Since first value sequence (1:3) 1, loop begins substituting '' 1 executing everything within curly braces {1+1}. Loops conventionally use '' counter, short iteration. However, free use variable name prefer:first loop essentially:first iteration complete, loops back beginning replaces next value 1:3 sequence (2 case):process repeated loop reaches final value sequence","code":"\nfor (i in 1:5){\n  print(\"hello\")\n}## [1] \"hello\"\n## [1] \"hello\"\n## [1] \"hello\"\n## [1] \"hello\"\n## [1] \"hello\"\nfor (i in 1:3) {\n  print(i+1)\n}## [1] 2\n## [1] 3\n## [1] 4i <- 1 + 1\nprint(i)\ni <- 2 + 1\nprint(i)\nfor (i in 1:3) { # the SEQUENCE is defined (numbers 1 to 5) and loop is opened with \"{\"\n  print(i + 1)    # The OPERATIONS (add 1 to each sequence number and print)\n}                            # The loop is closed with \"}\"\n"},{"path":"loops.html","id":"functions-in-for-loops","chapter":"16 Loops","heading":"16.1 Functions in for loops","text":"Whilst using simple addition body loop, can also combine loops functions.","code":"\n# Define a function to calculate the square of a number\nsquare <- function(x) {\n  return(x * x)\n}\n\n# Use a for loop to calculate and print the squares of numbers from 1 to 5\nfor (num in 1:5) { # Here I have replace i with num\n  result <- square(num)\n  cat(\"The square of\", num, \"is\", result, \"\\n\")\n}## The square of 1 is 1 \n## The square of 2 is 4 \n## The square of 3 is 9 \n## The square of 4 is 16 \n## The square of 5 is 25"},{"path":"loops.html","id":"for-loops-in-dataframes","chapter":"16 Loops","heading":"16.2 For loops in dataframes","text":"create somewhat intricate function. Initially, generate new tibble creating four vectors, consisting 10 randomly generated numbers. numbers designed approximately centered around mean 0 standard deviation 1. Afterward, combine vectors form final tibble.vector randomly generated actual averages slightly different, can test :code works, repetitive, applying function .simple loop:Now run loop:time mean calculate one column df stored element previously empty output vector.() loops useful quickly iterating list, R prefers store everything new object loop iteration, loops can become quite slow complex, running many processes many iterations.","code":"\nset.seed(1234)\n\n# a simple tibble\ndf <- tibble(\n  a =  rnorm(10),\n  b =  rnorm(10),\n  c =  rnorm(10),\n  d = rnorm(10),\n  e = rnorm(10),\n  f = rnorm(10),\n  g = rnorm(10),\n  h = rnorm(10),\n)\n\ndf\nmean(df$a)\n\nmean(df$b)\n\nmean(df$c)\n\nmean(df$d)## [1] -0.3831574\n## [1] -0.1181707\n## [1] -0.3879468\n## [1] -0.7661931\n#1. Having a predefined empty vector to receive the values is good practice, we will see why a bit later\n\noutput <- vector(\"double\", ncol(df)) # this will have four empty elements the same as the number of columns for the dataframe. The vector is set to receive numeric data\nfor (i in 1:ncol(df)) {            # 2. sequence - determines what to loop over \n  \n  output[[i]] <- mean(df[[i]])      # 3. body - each time the loop runs it allocates a value to output, \n}\noutput## [1] -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474\n## [7]  0.61659223 -0.04230209"},{"path":"loops.html","id":"speed","chapter":"16 Loops","heading":"16.3 Speed","text":"can wrap function calls iterations inside different functions capture runspeed.Use system.timeUse microbenchmark - add package runs default 100 evaluations, comes handy ggplot1 integration autoplotting.","code":"system.time(function)mm <- microbenchmark(function)\n\nautplot(mm)"},{"path":"loops.html","id":"initialise-objects","chapter":"16 Loops","heading":"16.3.1 Initialise objects","text":"Pre-allocating output appropriate length loop avoids reallocation memory inside loop, can inefficient large data. example:Depending computer processing power may get different results - ","code":"\noutput2 <- NULL\n\nmicrobenchmark::microbenchmark(\n  for (i in 1:ncol(df)){             \n  \n  output2 <- c(output2, mean(df[[i]])) # each new calculation is concatenated onto the end of the growing vector\n}\n)\noutput2 # note because we did not predefine our vector length it continues to grow! "},{"path":"loops.html","id":"simple-datatypes","chapter":"16 Loops","heading":"16.3.2 simple datatypes","text":"Depending computer processing power may get different results - ","code":"\ndf_list <- as.list(df)\n\n\nmicrobenchmark::microbenchmark( # check average processing time\nfor (i in length(df_list)) {           \n  \n  output[[i]] <- mean(df_list[[i]])      \n}\n)"},{"path":"loops.html","id":"visualise-speed","chapter":"16 Loops","heading":"16.3.3 Visualise speed","text":"microbenchmark package useful features including ability run multiple functions comparison simultaneously integration ggplot2 can plot results","code":"\noutput_vector <- vector(\"double\", ncol(df))\noutput_list <- vector(mode = \"list\", length = ncol(df))\nnew_output_vector <- NULL\nnew_output_vector2 <- NULL\n\n\nmbm <- microbenchmark::microbenchmark(\ndf_input_vector_output = for (i in 1:ncol(df)) {\n  output_vector[[i]] <- mean(df[[i]]) \n}, \nlist_input_vector_output = for (i in length(df_list)) {           \n    output_vector[[i]] <- mean(df_list[[i]])      \n}, \ndf_input_build_vector =  for (i in 1:ncol(df)){             \n    \n    new_output_vector <- c(new_output_vector, mean(df[[i]])) # each new calculation is concatenated onto the end of the growing vector\n}, \nlist_input_build_vector = for (i in 1:length(df_list)){             \n    \n   new_output_vector2 <- c(new_output_vector2, mean(df[[i]])) # each new calculation is concatenated onto the end of the growing vector\n}\n)\n\nmbmUnit: milliseconds\n                     expr      min       lq     mean   median       uq      max neval\n   df_input_vector_output 2.295303 2.401428 2.617219 2.447673 2.556309 12.36447   100\n list_input_vector_output 1.877293 1.946628 2.135324 1.997003 2.071233 12.31188   100\n    df_input_build_vector 2.351764 2.411968 2.604022 2.455673 2.531924 13.46052   100\n  list_input_build_vector 2.204953 2.297524 2.691931 2.351203 2.419803 12.77457   100\n\nautoplot(mbm)"},{"path":"loops.html","id":"do-as-little-as-possible-inside-a-loop","chapter":"16 Loops","heading":"16.3.4 Do as little as possible inside a loop","text":"R interpreted language every thing write inside loop runs multiple times. best thing can parsimonious writing code inside loop. number steps can speed loop bit .Calculate results loopCalculate results loopInitialize objects loopInitialize objects loopIterate numbers possibleIterate numbers possibleWrite functions inside loop possibleWrite functions inside loop possibleThe main tip Get loop quickly possible.See also https://bookdown.org/csgillespie/efficientR/programming.html#top-5-tips--efficient-programming","code":""},{"path":"loops.html","id":"exercise-1","chapter":"16 Loops","heading":"16.4 Exercise","text":"section workshop provides real world example using iterations create graphs population trends Living Planet Index number vertebrate species 1970 2014.data can collected :Can make four plots using lists loops? exercise can make list four\nspecies based column Common.Name, House sparrow, Great tit, Corn bunting Meadow pipit loop make four plots?","code":"\n# Method 1\nspecies_to_filter <- c(\"House sparrow\", \"Great tit\", \"Corn bunting\", \"Meadow pipit\")\n\nfiltered_data <- filter(LPI_UK, Common.Name %in% species_to_filter)\n\nsp_list <- split(filtered_data, filtered_data$Common.Name)\n\n# Method 2\n\n\n\nhouse_sparrow <- filter(LPI_UK, Common.Name == \"House sparrow\")\ngreat_tit <- filter(LPI_UK, Common.Name == \"Great tit\")\ncorn_bunting <- filter(LPI_UK, Common.Name == \"Corn bunting\")\nmeadow_pipit <- filter(LPI_UK, Common.Name == \"Meadow pipit\")\n\nsp_list <- list(house_sparrow, great_tit, corn_bunting, meadow_pipit)\n\nmy_list <- vector(\"list\", length = 4)\n\nfor (i in 1:length(sp_list)) {                                    \n  # For every item along the length of Sp_list we want R to perform the following functions\n  data <- as.data.frame(sp_list[[i]])                               \n  # Create a dataframe for each species\n  sp.name <- unique(data$Common.Name)                             \n  # Create an object that holds the species name, so that we can title each graph\n  plot <- ggplot(data, aes (x = year, y = abundance)) +               \n    # Make the plots and add our customised theme\n    geom_point(size = 2, colour = \"#00868B\") +                              \n    geom_smooth(method = lm, colour = \"#00868B\", fill = \"#00868B\") +        \n    theme_classic() +\n    labs(y = \"Abundance\\n\", x = \"\", title = sp.name)\n \n   # makes a list of all the plots generates\n  my_plots[[i]] <- plot \n}"},{"path":"apply.html","id":"apply","chapter":"17 Apply","heading":"17 Apply","text":"can recreate output loops previous chapter apply function R.apply functions can alternative writing loops. general idea apply (map) function element object. example, can apply function row column matrix.function takes least two arguments: object another function. function passed argument.Every apply function dots, ..., argument used pass arguments function given argument.Using apply functions possible, can lead shorter, succinct R code. section, cover three main functions, apply(), lapply(), sapply().lapply(): Loop list evaluate function elementlapply(): Loop list evaluate function elementsapply(): lapply try simplify resultsapply(): lapply try simplify resultapply(): Apply function margins arrayapply(): Apply function margins arrayIt (think) important apply family still looping - actual looping done internally C code efficiency reasons. Apply functions loops hood meant convenience speed.","code":""},{"path":"apply.html","id":"lapply","chapter":"17 Apply","heading":"17.1 lapply","text":"lapply() function following simple series operations:loops list, vector dataframe, iterating element turnit applies function element list (function specify)always returns list (l “list”).can see operation lapply() function :Notice passing mean() function argument lapply() function. Functions R can used way can passed back forth arguments just like object. pass function another function, need include open closed parentheses.well slightly faster () loop, arguably, lapply also easier read.","code":"> lapply\nfunction (X, FUN, ...) \n{\n    FUN <- match.fun(FUN)\n    if (!is.vector(X) || is.object(X)) \n        X <- as.list(X)\n    .Internal(lapply(X, FUN))\n}\n<bytecode: 0x7f79498e5528>\n<environment: namespace:base>\n\nlapply(df_list, mean)\nempty_list <- vector(mode = \"list\", length = length(df_list))\n\n\nmicrobenchmark::microbenchmark(\n \n  forloop = for (i in length(df_list)) {           \n  \n  empty_list[[i]] <- mean(df_list[[i]])      \n  },\n apply = lapply(df_list, mean)\n)Unit: microseconds\n    expr      min        lq       mean    median       uq      max neval\n forloop 1908.053 1981.7625 2341.55928 2038.9475 2119.488 11949.11   100\n   apply   23.531   24.8655   29.73571   27.9205   30.050   119.41   100\n"},{"path":"apply.html","id":"run-lapply-with-additional-arguments","chapter":"17 Apply","heading":"17.1.1 Run lapply with additional arguments","text":"first argument lapply() gives list object iterated .\nsecond argument defines anonymous function.","code":""},{"path":"apply.html","id":"functions-with-lapply","chapter":"17 Apply","heading":"17.1.1.1 Functions with lapply","text":"example define list run function numbers, write function normal. Defined like call anonymous function, name used outside lapply function.","code":"\n# Create a list of numbers\nnumbers <- list(1, 2, 3, 4, 5)\n\n\n# Use lapply to add 10 to each number in the list\nresult <- lapply(numbers, function(x){\n  return(x + 10)\n})\n\n# Print the result\nprint(result)## [[1]]\n## [1] 11\n## \n## [[2]]\n## [1] 12\n## \n## [[3]]\n## [1] 13\n## \n## [[4]]\n## [1] 14\n## \n## [[5]]\n## [1] 15"},{"path":"apply.html","id":"using-existing-functions-in-lapply","chapter":"17 Apply","heading":"17.1.1.2 Using existing functions in lapply","text":"example write named function. Notice use curly brackets anonymous function, instead, just passed meanadd_valueas second argument oflapply()`. also supply necessary arguments required function specifying afterwards.","code":"\n# Create a list of numbers\nnumbers <- list(1, 2, 3, 4, 5)\n\n# Define a custom function that adds a given value to each number\nadd_value <- function(x, value) {\n  return(x + value)\n}\n\n# Use lapply to add 10 to each number in the list\nresult <- lapply(numbers, add_value, value = 10)\n\n# Print the result\nprint(result)## [[1]]\n## [1] 11\n## \n## [[2]]\n## [1] 12\n## \n## [[3]]\n## [1] 13\n## \n## [[4]]\n## [1] 14\n## \n## [[5]]\n## [1] 15"},{"path":"apply.html","id":"sapply","chapter":"17 Apply","heading":"17.2 sapply","text":"sapply() function behaves similarly lapply(); real difference return value. sapply() try simplify result lapply() possible. Essentially, sapply() calls lapply() input applies following algorithm:result list every element length 1, vector returnedIf result list every element length 1, vector returnedIf result list every element vector length (> 1), matrix returned.result list every element vector length (> 1), matrix returned.can’t figure things , list returned.can’t figure things , list returned.Notice sapply() returns vector element length 1.","code":"\nsapply(df_list, mean)##           a           b           c           d           e           f \n## -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474 \n##           g           h \n##  0.61659223 -0.04230209"},{"path":"apply.html","id":"apply-1","chapter":"17 Apply","heading":"17.3 apply","text":"apply() function used evaluate function (often anonymous one) array. often used apply function rows columns matrix dataframe, fact function used list. Using apply() often really faster writing loop, works one line highly compact.MARGIN = 1 means apply function rowsMARGIN = 2 means apply function columnsIf result list every element length 1, vector returnedIf result list every element length 1, vector returnedIf result list every element vector length (> 1), matrix returned.result list every element vector length (> 1), matrix returned.","code":"\napply(df, MARGIN = 1, mean)##  [1] -0.017615796 -0.155554062 -0.400917401 -0.454979941 -0.003522308\n##  [6] -0.125228280 -0.584980350 -0.650446262  0.119856528 -0.188911702"},{"path":"apply.html","id":"summary-of-apply-functions","chapter":"17 Apply","heading":"17.3.1 summary of apply functions","text":"","code":""},{"path":"apply.html","id":"exercise-2","chapter":"17 Apply","heading":"17.4 Exercise","text":"Z-scoresapply(df, MARGIN = 2, z_score)","code":"\nz_score <- function(x) {\n    (x - mean(x, na.rm = TRUE)) /  \n        sd(x, na.rm = TRUE)\n}"},{"path":"purrr.html","id":"purrr","chapter":"18 Purrr","heading":"18 Purrr","text":"purrr::map() family functions tidyverse equivalent applyThe base equivalent map() lapply(). difference lapply() support helpers ’ll learn , ’re using map() purrr, can skip additional dependency use lapply() directly.basic syntax map(.x = SEQUENCE, .f = FUNCTION, ARGUMENTS). bit detail:.x = inputs upon .f function iteratively applied - e.g. vector jurisdiction names, columns data frame, list data frames.x = inputs upon .f function iteratively applied - e.g. vector jurisdiction names, columns data frame, list data frames.f = function apply element .x input - function like print() already exists, custom function define. function often written tilde ~ (details ).\nnotes syntax:.f = function apply element .x input - function like print() already exists, custom function define. function often written tilde ~ (details ).\nnotes syntax:function needs arguments specified, can written parentheses tilde (e.g. .f = mean).function needs arguments specified, can written parentheses tilde (e.g. .f = mean).can use .x (simply .) within .f = function placeholder .x value iterationYou can use .x (simply .) within .f = function placeholder .x value iterationThe output usingmap() list - list object class like vector whose elements can different classes. , list produced map() contain many data frames, many vectors, many single values, even many lists! alternative versions map() explained produce types outputs (e.g. map_dfr() produce data frame, map_chr() produce character vectors, map_dbl() produce numeric vectors).Basic map() always return list, variants return different data types.Unlike apply, map return one type data, removing potential changing data types occasionally happens using apply.","code":""},{"path":"purrr.html","id":"example","chapter":"18 Purrr","heading":"18.1 Example","text":"","code":"\nlapply(df_list, mean)\nmap(.x = df_list, .f = mean)\n\nmap(df_list, mean)"},{"path":"purrr.html","id":"more-maps","chapter":"18 Purrr","heading":"18.2 more maps","text":"map() always returns list, makes general map family can put anything list. inconvenient return list simpler data structure , four specific variants: map_lgl(), map_int(), map_dbl(), map_chr(). returns atomic vector specified type:\nspecialized map functions “type-safe” fail \nincorrect return type.\n\nsafer using functions like sapply() tries \nsimplify results return list, vector matrix depending \ninput.\npurrr uses convention suffixes, like _dbl(), refer output. map_*() functions can take type vector input.","code":"\n# map lgl always returns a logical vector\nmap_lgl(df_list, is.double)\n#   a    b    c    d    e    f    g    h \n# TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n# map_dbl always returns a double vector\nmap_dbl(df_list, mean)\n#          a           b           c           d           e           f           g           h \n# -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474  0.61659223 -0.04230209 \n\n# map_int always returns an integer vector\nmap_int(df_list, ~.x |>  mean() |> round())\n# a  b  c  d  e  f  g  h \n# 0  0  0 -1 -1  0  1  0 \n\n# map_int always returns an integer vector - note this comes with a deprecated coercion warning - use as.character()\n map_chr(df_list, mean)\n#          a           b           c           d           e           f           g           h \n#\"-0.383157\" \"-0.118171\" \"-0.387947\" \"-0.766193\" \"-0.609797\" \"-0.278865\"  \"0.616592\" \"-0.042302\" \n \n# map_df always returns a dataframe \n map_df(df_list, mean)\n#       a      b      c      d      e      f     g       h\n#   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> <dbl>   <dbl>\n#   1 -0.383 -0.118 -0.388 -0.766 -0.610 -0.279 0.617 -0.0423"},{"path":"purrr.html","id":"anonymous-functions","chapter":"18 Purrr","heading":"18.3 Anonymous functions","text":"multiple ways structuring map() call","code":"\nmap(df_list, mean)\n\ndf_list |>  \n  map(mean)\n\ndf_list |> \n    map(~mean(.))"},{"path":"purrr.html","id":"whats-up-with","chapter":"18 Purrr","heading":"18.3.1 What's up with ~?","text":"Instead using map() exisiting function, can use inline anonymous functions demonstrated apply()quite verbose can use ~ support shortcutIt look little quirky refer . argument functions.\nReserve syntax short simple functions. good rule \nthumb function spans lines uses {}, ’s time give\nname.\n","code":"\nmap_dbl(df_list, function(x) sum(x)/length(x))##           a           b           c           d           e           f \n## -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474 \n##           g           h \n##  0.61659223 -0.04230209\nmap_dbl(df_list, ~ sum(.x)/length(.x))##           a           b           c           d           e           f \n## -0.38315741 -0.11817071 -0.38794682 -0.76619306 -0.60979706 -0.27886474 \n##           g           h \n##  0.61659223 -0.04230209"},{"path":"purrr.html","id":"passing-arguments","chapter":"18 Purrr","heading":"18.3.2 Passing arguments","text":"map functions pass ... along, two ways can pass additional arguments functions","code":"\nmap_dbl(df_list, ~ mean(.x, na.rm = T))\n\n\nmap_dbl(df_list, mean, na.rm = T)"},{"path":"purrr.html","id":"map-with-nested-dataframes","chapter":"18 Purrr","heading":"18.4 map with nested dataframes","text":"Nested data frames tibbles, data structure R, allow store complex structured data within single column tibble. feature particularly useful dealing hierarchical nested data, lists, data frames, even tibbles.\nuse penguins data need load . Either run \ncleaning script run readRDS file made\nNested data frames tibbles can particularly useful working map functions, like purrr::map()apply function elements within nested structure.First use nest() function select want nest dataWe can run iterative functions lists - generating new dataframes adding new columns. wish keep penguins larger average species body weight.Note stage replicating iteration can achieved using group_by() actions.can now produce individual plots nested dataframe:Plots can now called number ways:wish see plots can use purrr::walk - another iteration function, primary output \"silent\" - wish see outputs printed console. useful functions like plot making writing outputs file.\ngg objects type objects can created using\nmap() mutate(). Another application two functions \nfitting models data storing results new column. \nexample, use map() mutate() fit linear regression\nmodel x y columns store model output new\ncolumn\nview plots together, can use patchwork::wrap_plots() function","code":"\nnested_penguins <- penguins |> \n  nest(data = -species)\n\nnested_penguins\nnested_heavy_penguins <- penguins |> \n    nest(data = -species) |> \n  mutate(new_data = map(data, ~ .x \n                        |> filter(body_mass_g > mean(body_mass_g, na.rm = T)))\n         )\n\nnested_heavy_penguins\nplots_df <- nested_heavy_penguins |> \n    mutate(scatterplots = map(new_data, ~ \n            ggplot(data = .x, aes(x = body_mass_g, y = flipper_length_mm)) +\n                geom_point()\n        ))\nplots_df[[1,4]]\n\nplots_df$scatterplots[[1]]\nwalk(plots_df$scatterplots, ~print(.x))\nlibrary(patchwork)\nplots_df$scatterplots |> wrap_plots()"},{"path":"purrr.html","id":"map2","chapter":"18 Purrr","heading":"18.5 map2","text":"map2 versatile function purrr package R allows iterate two input vectors lists parallel, applying specified function pairs corresponding elements. particularly useful need perform operations depend elements two separate input sources simultaneously, offering powerful way combine process data pairwise manner.quick example building plot making function - able alter colour plots according ","code":"\npal <- c(\n  \"Adelie\" = \"#FF8C00\", \n  \"Chinstrap\" = \"#A034F0\", \n  \"Gentoo\" = \"#159090\")\n\n\nplots_df <- nested_heavy_penguins |> \n    mutate(scatterplots = map2(.x = new_data, .y = pal, ~ \n            ggplot(data = .x, aes(x = body_mass_g, y = flipper_length_mm, colour = .y)) +\n            geom_point() +\n            scale_colour_identity()\n        ))\n\n\nplots_df$scatterplots |> \n    wrap_plots(... = _, guides = \"collect\")"},{"path":"purrr.html","id":"running-different-summary-functions-on-each-nested-dataframe","chapter":"18 Purrr","heading":"18.5.1 Running different summary functions on each nested dataframe","text":"working nested data frames, map2 provides capability apply distinct functions nested data frame, making versatile tool performing customized specialized operations grouped data. flexibility distinct simple operations group_by(), allows tailor computations unique characteristics subgroup within nested data structure.","code":"\nsummary_functions <- list(\n    Adelie <- function(data) {\n        summarise(data, \n                  mean_bill_length = mean(bill_length_mm, na.rm = T),\n                  mean_flipper_length = mean(flipper_length_mm, na.rm = T))\n    },\n    Chinstrap <- function(data) {\n        summarise(data,\n                  max_bill_length = max(bill_length_mm, na.rm = T),\n                  max_flipper_length = max(flipper_length_mm, na.rm = T))\n    },\n    Gentoo <- function(data) {\n        summarise(data,\n                  min_bill_length = min(bill_length_mm, na.rm = T),\n                  min_flipper_length = min(flipper_length_mm, na.rm = T))\n    }\n)\n\n# Apply the summary functions to each species using map2\nresult <- nested_penguins %>%\n    mutate(summaries = map2(data, summary_functions, ~ .y(.x)))\n\nresult$summaries## [[1]]\n## # A tibble: 1 × 2\n##   mean_bill_length mean_flipper_length\n##              <dbl>               <dbl>\n## 1             38.8                190.\n## \n## [[2]]\n## # A tibble: 1 × 2\n##   max_bill_length max_flipper_length\n##             <dbl>              <int>\n## 1            59.6                231\n## \n## [[3]]\n## # A tibble: 1 × 2\n##   min_bill_length min_flipper_length\n##             <dbl>              <int>\n## 1            40.9                178"},{"path":"purrr.html","id":"exercises-1","chapter":"18 Purrr","heading":"18.6 Exercises","text":"","code":"\nmap_df(.x = df, \n       .f = z_score)\n\ndf %>% \n  map_df(z_score)\n\ndf %>% \n    map_df(~z_score(.))"},{"path":"purrr.html","id":"reading-1","chapter":"18 Purrr","heading":"18.7 Reading","text":"like practice map() check blogpostBelow links may find usefulRStudio education cheat sheet purrRStudio education cheat sheet purrR4DS - intro programmingR4DS - intro programming","code":""},{"path":"bonus-simulation.html","id":"bonus-simulation","chapter":"19 Bonus: Simulation","heading":"19 Bonus: Simulation","text":"computer simulation (“sim”) attempt model real-life hypothetical situation computer can studied see system works. changing variables simulation, predictions may made behavior system. tool virtually investigate behavior system study - WikipediaYou can use computer simulations :Test statistical intuition demonstrate mathematical properties easily anticipate\ne.g. test whether supposedly random data generated, 5% significant effects variable model\ne.g. test whether supposedly random data generated, 5% significant effects variable modelUnderstand sampling theory, probability distributions test whether understand underlying processes system\ne.g. see whether simulated data drawn specific distribution comparable real data\ne.g. see whether simulated data drawn specific distribution comparable real dataPerform power analyses\ne.g. assess whether sample size (within replicate) high enough detect effect simulated, 80% cases\ne.g. assess whether sample size (within replicate) high enough detect effect simulated, 80% casesPerform bootstrapping get confidence interval around parameter estimate\n.e. bootstrapping means sample replacement (.e. original options draw available draw) observed dataset. generates new 'simulated' datasets. , one can run statistical analysis made observed dataset, saving time parameter estimate interest. multiple time, obtain confidence interval parameter interest\n.e. bootstrapping means sample replacement (.e. original options draw available draw) observed dataset. generates new 'simulated' datasets. , one can run statistical analysis made observed dataset, saving time parameter estimate interest. multiple time, obtain confidence interval parameter interest","code":""},{"path":"bonus-simulation.html","id":"random-number-generators","chapter":"19 Bonus: Simulation","heading":"19.1 Random number generators","text":"R contains several functions generate random numbers.\nType ?function console get information function's arguments (.e. values must provided obtain function's result).functionsample(x, n, replace=FALSE) draws n values given vector x without replacement (default).Sampling without replacement means repeatedly draw e.g. 1 item pool items, item selected first draw available selection second draw, first second selected items pool select third draw, etc. Sampling replacement means original options available draw.TURN:\nSample 100 values 3 103 replacement.following functions draw n values distributions specified parameters:runif(n, min, max) draws n values uniform distribution specified min maxrpois(n, lambda) draws n values poisson distribution specified lambdarnorm(n, mean, sd) draws n values normal distribution specified mean standard deviationrbinom(n, prob) draws n values binomial distribution specified probabilityYOUR TURN:Draw 100 values normal distribution mean 0 sd 1.\nDraw 50 values normal distribution mean 10 sd 5.\nDraw 1000 values poisson distribution lambda 50.\nDraw 30 values uniform distribution 0 10.","code":"\nx <- 3:103\nsample(x, 100, replace = TRUE)\nrnorm(n = 100, mean = 0, sd = 1)\nrnorm(100) # if you sample from a normal distribution with a mean of 0 and a sd of 1, you do not need to provide them, they are the defaults\n\nrnorm(sd = 5, mean = 10, n = 50)\n\nrpois(n = 1000, lambda = 50)\n\nrunif(n = 30, min = 0, max = 10)"},{"path":"bonus-simulation.html","id":"replication","chapter":"19 Bonus: Simulation","heading":"19.2 Replication","text":"replicate(10, mean(rnorm(100)))reads: 'draw 100 values normal distribution mean 0 sd 1 (default values), caclulate mean 100 values, 10 times.TURN:Replicate 1000 times mean 10 values drawn unifrom distribution 0 10.Make histogram results.","code":"\nset.seed(42) \n\n# replicate(1000, mean(runif(10, max = 10)))\nhist(replicate(1000, mean(runif(10, max = 10))))\nset.seed(42) \n\nmeans <- replicate(1000, mean(runif(10, max = 10)))\n\nmeans |> \n  as_tibble() |> \nggplot(aes(x = means)) +\n  geom_histogram(binwidth = 0.2, fill = \"lightblue\", color = \"black\") +\n  labs(title = \"Histogram of Means\", x = \"Mean Value\", y = \"Frequency\")"},{"path":"bonus-simulation.html","id":"set-seed","chapter":"19 Bonus: Simulation","heading":"19.3 Set seed","text":"set.seed()Computers general, R specifically, can, fact, provide pseudo random number generators.\npseudorandom number generator's number sequence completely determined seed, .e. number used initialize sequence.Thus, pseudorandom number generator reinitialized seed, produce sequence numbers. can set seed (arbitrary number) beginning script, , commands drawing random numbers ran exact order, provide output subsequent runs.useful sharing code reproduce simulations, well debugging code.","code":""},{"path":"bonus-simulation.html","id":"sample-size","chapter":"19 Bonus: Simulation","heading":"19.4 Sample size","text":"example going simulate data two groups - group 1 mean 0 sd 1, group 2 mean whatever value supply effect_size sd 1.default simulation set repeat experiment 30 samples taken population compared true difference. experiment repeated 100 times.purpose simulation understand estimated difference means varies across different random samples data true effect size known. helps assess sampling variability provides insights precision estimated difference. Additionally, can used create confidence interval assess uncertainty around estimated effect. determine power experiments.example know true difference, see happens confidence intervals change sample size, effect size iterations:","code":"\nlibrary(ggplot2)\n\n# Define a function to run the simulation for a given sample size and effect size\nsimulate_difference <- function(sample_size, effect_size) {\n    set.seed(123)\n    \n    # Initialize a data frame to store the estimated differences\n    results <- data.frame(Simulated_Difference = numeric(100))\n    \n    for (i in 1:100) {  # Perform 100 simulations for the fixed sample size\n        # Generate data for two groups with a specified effect size\n        group1 <- rnorm(sample_size, mean = 0, sd = 1)\n        group2 <- rnorm(sample_size, mean = effect_size, sd = 1)\n        \n        # Create a data frame for the two groups\n        data_df <- data.frame(Group = rep(c(\"Group1\", \"Group2\"), each = sample_size),\n                              Value = c(group1, group2))\n        \n        # Fit a linear model to estimate the difference in means\n        lm_model <- lm(Value ~ Group, data = data_df)\n        \n        # Extract the estimated difference from the model\n        estimated_difference <- coef(lm_model)[2]\n        \n        results$Simulated_Difference[i] <- estimated_difference\n    }\n    \n    # Return the data frame of estimated differences\n    return(results)\n}\n\n# Fixed sample size of 20\nsample_size <- 30\n\n# Set the effect size\neffect_size <- .8  # Adjust as needed\n\n# Run the simulation for the fixed sample size\nsimulation_results <- simulate_difference(sample_size, effect_size)\n\n# Calculate the mean and 2.5th and 97.5th percentiles for the confidence interval\nmean_difference <- mean(simulation_results$Simulated_Difference)\nlower_percentile <- quantile(simulation_results$Simulated_Difference, 0.025)\nupper_percentile <- quantile(simulation_results$Simulated_Difference, 0.975)\n\n# Create a density histogram of the estimated differences with lines for percentiles\nggplot(simulation_results, aes(x = Simulated_Difference)) +\n    geom_histogram(binwidth = 0.05, fill = \"lightblue\", color = \"black\") +\n    geom_vline(aes(xintercept = mean_difference), color = \"red\", linetype = \"dashed\") +\n    geom_vline(aes(xintercept = lower_percentile), color = \"blue\") +\n    geom_vline(aes(xintercept = upper_percentile), color = \"blue\") +\n    labs(x = \"Estimated Difference\", y = \"Density\") +\n    ggtitle(paste(\"Density Histogram of Estimated Differences (Sample Size = 20)\")) +\n    scale_x_continuous(limits = c(0, 2), breaks = c(0,0.5,1,1.5,2))+\n    theme_minimal()"},{"path":"bonus-simulation.html","id":"exercise-3","chapter":"19 Bonus: Simulation","heading":"19.5 Exercise","text":"Testing R might, can simplify speed simulation ?","code":"\n set.seed(123)\ntwo_group_fun <- function(sample_size = 30, effect_size = .8){\n        group1 <- rnorm(sample_size, mean = 0, sd = 1)\n        group2 <- rnorm(sample_size, mean = effect_size, sd = 1)\n        \n        # Create a data frame for the two groups\n        data_df <- data.frame(Group = rep(c(\"Group1\", \"Group2\"), each = sample_size),\n                              Value = c(group1, group2))\n        \n        # Fit a linear model to estimate the difference in means\n        lm_model <- lm(Value ~ Group, data = data_df) \n        estimated_difference <- coef(lm_model)[2]\n}\n\nsim <- replicate(100, two_group_fun()) |> \n  as_tibble()\n\nggplot(sim, aes(x = value)) +\n    geom_histogram(binwidth = 0.05, fill = \"lightblue\", color = \"black\") +\n    geom_vline(aes(xintercept = mean_difference), color = \"red\", linetype = \"dashed\") +\n    geom_vline(aes(xintercept = lower_percentile), color = \"blue\") +\n    geom_vline(aes(xintercept = upper_percentile), color = \"blue\") +\n    labs(x = \"Estimated Difference\", y = \"Density\") +\n    ggtitle(paste(\"Density Histogram of Estimated Differences (Sample Size = 20)\")) +\n    scale_x_continuous(limits = c(0, 2), breaks = c(0,0.5,1,1.5,2))+\n    theme_minimal()\n set.seed(123)\n\ntwo_group_fun_opt <- function(sample_size = 30, effect_size = .8){\n   group1 <- rnorm(sample_size, mean = 0, sd = 1)\n    group2 <- rnorm(sample_size, mean = effect_size, sd = 1)\n\n    # Fit a linear model to estimate the difference in means avoid making a dataframe\n    lm_model <- lm(c(group1, group2) ~ rep(c(\"Group1\", \"Group2\"), each = sample_size))\n    estimated_difference <- coef(lm_model)[2]\n}\n\nsim <- replicate(100, two_group_fun_opt()) |> \n  as_tibble()"},{"path":"bonus-simulation.html","id":"power","chapter":"19 Bonus: Simulation","heading":"19.6 Power","text":"useful application simulations work power statistical test. can flip simulation specifically focus calculating statistical power detection simulated dataset known effect-size:","code":"\n# Define a function to run the simulation for a given sample size and effect size\nsimulate_power <- function(sample_size, effect_size) {\n  set.seed(123)\n  \n  # Initialize a counter for the number of significant t-tests\n  num_significant <- 0\n  \n  for (i in 1:100) {  # Perform 100 simulations for each sample size\n\n          # Generate data for two groups with a specified effect size\n    group1 <- rnorm(sample_size, mean = 0, sd = 1)\n    group2 <- rnorm(sample_size, mean = effect_size, sd = 1)\n\n     # Create a data frame for the two groups\n        data_df <- data.frame(Group = rep(c(\"Group1\", \"Group2\"), each = sample_size),\n                              Value = c(group1, group2))\n        \n        # Fit a linear model to estimate the difference in means\n        lm_model <- lm(Value ~ Group, data = data_df)\n        \n        # Extract the p value from the model\n       \n      \n        \n    # Check if the null hypothesis is rejected (p-value < 0.05)\n    if ( broom::tidy(lm_model)[[2,5]] < 0.05) {\n      num_significant <- num_significant + 1\n    }\n  }\n  \n  # Return the proportion of significant t-tests (power)\n  return(num_significant / 100)\n}\n\n# Specify a range of sample sizes to test\nsample_sizes <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\n\n# Set the effect size\neffect_size <- 1  # Adjust as needed\n\n# Run the simulation for each sample size\nsimulation_results <- map_dbl(sample_sizes, simulate_power, effect_size)\n\n# Plot the power as a function of sample size\nplot(sample_sizes, simulation_results, type = \"b\", xlab = \"Sample Size\", ylab = \"Power\", main = \"Power vs. Sample Size\")"},{"path":"bonus-simulation.html","id":"exercise-4","chapter":"19 Bonus: Simulation","heading":"19.7 Exercise","text":"Can optimise iterations get stable predictions power?Alter parameters effect, size sample size iterations.","code":""},{"path":"bonus-simulation.html","id":"further-reading","chapter":"19 Bonus: Simulation","heading":"19.8 Further Reading:","text":"https://bookdown.org/ndphillips/YaRrr/generating-random-data.htmlSimulations: https://rstudio-education.github.io/hopr/https://aosmith.rbind.io/2018/01/09/simulate-simulate-part1/#simulate-simulate-dance---musichttps://aosmith.rbind.io/2019/07/22/automate-model-fitting--loops/https://aosmith.rbind.io/2017/12/31/many-datasets/#list--files--read-","code":"\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] patchwork_1.1.2       testthat_3.1.10       palmerpenguins_0.1.1 \n##  [4] microbenchmark_1.4.10 knitr_1.43            webexercises_1.1.0   \n##  [7] glossary_1.0.0        lubridate_1.9.2       forcats_1.0.0        \n## [10] stringr_1.5.0         dplyr_1.1.2           purrr_1.0.1          \n## [13] readr_2.1.4           tidyr_1.3.0           tibble_3.2.1         \n## [16] ggplot2_3.4.2         tidyverse_2.0.0      \n## \n## loaded via a namespace (and not attached):\n##  [1] sass_0.4.6        utf8_1.2.3        generics_0.1.3    xml2_1.3.5       \n##  [5] stringi_1.7.12    hms_1.1.3         digest_0.6.33     magrittr_2.0.3   \n##  [9] evaluate_0.21     grid_4.3.1        timechange_0.2.0  bookdown_0.34    \n## [13] fastmap_1.1.1     jsonlite_1.8.7    backports_1.4.1   brio_1.1.3       \n## [17] fansi_1.0.4       scales_1.2.1      codetools_0.2-19  jquerylib_0.1.4  \n## [21] cli_3.6.1         rlang_1.1.1       munsell_0.5.0     withr_2.5.0      \n## [25] cachem_1.0.8      yaml_2.3.7        tools_4.3.1       tzdb_0.4.0       \n## [29] memoise_2.0.1     colorspace_2.1-0  broom_1.0.5       vctrs_0.6.3      \n## [33] R6_2.5.1          lifecycle_1.0.3   fs_1.6.2          pkgconfig_2.0.3  \n## [37] pillar_1.9.0      bslib_0.5.0       gtable_0.3.3      glue_1.6.2       \n## [41] highr_0.10        xfun_0.39         tidyselect_1.2.0  rstudioapi_0.15.0\n## [45] farver_2.1.1      htmltools_0.5.5   labeling_0.4.2    rmarkdown_2.23   \n## [49] compiler_4.3.1    downlit_0.4.3"},{"path":"reading-files-with-readr.html","id":"reading-files-with-readr","chapter":"20 Reading files with readr","heading":"20 Reading files with readr","text":"Make sure exercises starting clean session","code":""},{"path":"reading-files-with-readr.html","id":"cleaning-column-names","chapter":"20 Reading files with readr","heading":"20.1 Cleaning column names","text":"Reading CSV file often requires data cleaning. example, say want import data convert column names snake_case.us probably read .CSV file first, start data cleaning - example janitor::clean_names() function.previous example, used clean_names() function \"janitor\" package convert column names lowercase. can achieve result using make_clean_names() function within read_csv function, specifying name_repair argument.default janitor::make_clean_names function default argument snake_case within function also case argument common naming conventions can used.","code":"\nlibrary(tidyverse)\nlibrary(janitor)\n#load data\npenguins_raw <- read_csv (\"data/penguins_raw.csv\")\n\npenguins_raw |> \njanitor::clean_names() \npenguins_clean <- read_csv (\"data/penguins_raw.csv\",\n                      name_repair = janitor::make_clean_names)"},{"path":"reading-files-with-readr.html","id":"selecting-columns","chapter":"20 Reading files with readr","heading":"20.2 Selecting columns","text":"addition cleaning column names, can also directly select columns using \"read_csv\" function utilizing \"col_select\" argument. can extremely useful working large files, selecting columns need can memory-efficient.","code":"\npenguins_clean <- read_csv (\"data/penguins_raw.csv\",\n                      name_repair = janitor::make_clean_names,\n                      col_select = c(species, body_mass_g, flipper_length_mm)) |> \n  glimpse()"},{"path":"reading-files-with-readr.html","id":"reading-multiple-files","chapter":"20 Reading files with readr","heading":"20.3 Reading multiple files","text":"actually start complete dataframe - first iterate split 25 equally sized dataframes.\nwalk2 operates way map2 - preferred option \"silent\"","code":"\ndir.create(c(\"data/many_files\"))\npeng_samples <- map(1:25, ~ slice_sample(penguins_clean, n = 20))\n\nwalk2(peng_samples, 1:25, ~ write_csv(.x, paste0(\"data/many_files/\", .y, \".csv\")))"},{"path":"reading-files-with-readr.html","id":"create-a-vector-of-file-paths","chapter":"20 Reading files with readr","heading":"20.3.1 Create a vector of file paths","text":"Now, create vector file paths, use list.files function R. function allows us identify list files specific extension directory. example, looking CSV files \"data/many_files\" directory.function \"list.files\" several arguments. explanation key arguments:\"path\": argument allows specify directory files located. essential ensure path set correctly. working within R-Studio project defined working directory avoid issues.\"path\": argument allows specify directory files located. essential ensure path set correctly. working within R-Studio project defined working directory avoid issues.\"pattern\": provide regular expression argument filter files want list. example, mentioned looking files containing string \"csv.\" helps narrow selection specific file types patterns.\"pattern\": provide regular expression argument filter files want list. example, mentioned looking files containing string \"csv.\" helps narrow selection specific file types patterns.\"full.names\": Setting argument TRUE indicates want store full paths files, just names. important ensuring can correctly access read files later. \"full.names\" set TRUE, may encounter difficulties attempting read files file paths incomplete.\"full.names\": Setting argument TRUE indicates want store full paths files, just names. important ensuring can correctly access read files later. \"full.names\" set TRUE, may encounter difficulties attempting read files file paths incomplete.vector, csv_files_list_files, now hold file paths CSV files specified directory, making easy access manipulate files R environment","code":"\ncsv_files_list_files <- list.files(path = \"data/many_files\",\n                                    pattern = \"csv\", full.names = TRUE) [1] \"data/many_files/1.csv\"  \"data/many_files/10.csv\" \"data/many_files/11.csv\" \"data/many_files/12.csv\"\n [5] \"data/many_files/13.csv\" \"data/many_files/14.csv\" \"data/many_files/15.csv\" \"data/many_files/16.csv\"\n [9] \"data/many_files/17.csv\" \"data/many_files/18.csv\" \"data/many_files/19.csv\" \"data/many_files/2.csv\" \n[13] \"data/many_files/20.csv\" \"data/many_files/21.csv\" \"data/many_files/22.csv\" \"data/many_files/23.csv\"\n[17] \"data/many_files/24.csv\" \"data/many_files/25.csv\" \"data/many_files/3.csv\"  \"data/many_files/4.csv\" \n[21] \"data/many_files/5.csv\"  \"data/many_files/6.csv\"  \"data/many_files/7.csv\"  \"data/many_files/8.csv\" \n[25] \"data/many_files/9.csv\""},{"path":"reading-files-with-readr.html","id":"read-multiple-files","chapter":"20 Reading files with readr","heading":"20.3.2 Read multiple files","text":"Now obtained file paths, can proceed load files R. preferred method tidyverse use map_dfr function purrr package. function iterates file paths combines data frames single, unified data frame. following code, .x represents file name path. read output actual content CSV files (just filenames), include .x (path) within readr function. example deals CSV files, approach works similarly rectangular file formats.","code":"\ndf <- map_dfr(csv_files_list_files,\n              ~ read_csv(.x))\n\nglimpse(df)"},{"path":"reading-files-with-readr.html","id":"selecting-files","chapter":"20 Reading files with readr","heading":"20.3.3 Selecting files","text":"Now, filter choose specific files reading, use str_detect() function stringr package R. function allows us search specific patterns within vector file paths select files match criteria. pattern argument specifies pattern want detect, , case, \"[2-4]\". negate = FALSE argument ensures select files match pattern. work made easier good naming conventions.want narrow criteria include files meet specific pattern file names ending \"2.csv\" \"4.csv.\" can work subset files specifically fit analysis needs.str_detect(csv_files_list_files, pattern = \"[24]\\\\.csv$ core code. , applying str_detect() function search particular pattern within csv_files_list_files. pattern looking \"[24].csv$,\" essentially means seeking files file name ends \"2.csv\" \"4.csv.\"","code":"\ncsv_files_list_files[str_detect(csv_files_list_files, pattern = \"[2-4]\",\nnegate = FALSE)] [1] \"data/many_files/12.csv\" \"data/many_files/13.csv\" \"data/many_files/14.csv\"\n [4] \"data/many_files/2.csv\"  \"data/many_files/20.csv\" \"data/many_files/21.csv\"\n [7] \"data/many_files/22.csv\" \"data/many_files/23.csv\" \"data/many_files/24.csv\"\n[10] \"data/many_files/25.csv\" \"data/many_files/3.csv\"  \"data/many_files/4.csv\"\ncsv_files_list_files[str_detect(csv_files_list_files, pattern = \"[24]\\\\.csv$\")][1] \"data/many_files/12.csv\" \"data/many_files/14.csv\" \"data/many_files/2.csv\" \n[4] \"data/many_files/22.csv\" \"data/many_files/24.csv\" \"data/many_files/4.csv\"\n"},{"path":"reading-files-with-readr.html","id":"exercise-5","chapter":"20 Reading files with readr","heading":"20.4 Exercise","text":"final section workshop provides real world example using iterations create graphs population trends Living Planet Index number vertebrate species 1970 2014.data can collected :1. Can make four plots using data nesting map functions?exercise like filter dataframe House sparrow, Great tit, Corn bunting Meadow pipit nest data apply map function produce scatter plot year abundance. Customise plot see fit.2. Can write object multiple dataframes based \"Common.Name\".exercise like read entire dataframe, produce four new .csv files one House sparrow, Great tit, Corn bunting Meadow pipit.","code":"\nnested_LPI <- LPI |> \n  group_by(Common.Name) |> \n  nest() |> \n  filter(Common.Name %in% c(\"House sparrow\", \"Great tit\", \"Corn bunting\", \"Meadow pipit\")) |> \n     mutate(plots = map(data, ~ ggplot(., aes (x = year, y = abundance)) +              \n                            geom_point(size = 2, colour = \"#00868B\") +                                                \n                            geom_smooth(method = lm, colour = \"#00868B\", fill = \"#00868B\") +\n                            ggtitle(Common.Name)+\n                            labs(y = \"Abundance\\n\", x = \"\")))\n\n\n  wrap_plots(nested_LPI$plots)\nLPI <- read_csv(\"https://raw.githubusercontent.com/UEABIO/data-sci-v1/main/book/files/LPI_data_loops.csv\")\n\nLPI |> \n  group_by(Common.Name) |> \n  nest() |> \n  filter(Common.Name %in% c(\"House sparrow\", \"Great tit\", \"Corn bunting\", \"Meadow pipit\")) \n\nwalk2(nested$data, nested$Common.Name, ~ write_csv(.x, paste0(paste0(\"split_files/\", .y , \".csv\"))))"},{"path":"working-across-columns.html","id":"working-across-columns","chapter":"21 Working across columns","heading":"21 Working across columns","text":"section go following functions:last_col()last_col()starts_with()starts_with()ends_with()ends_with()contains()contains()matches()matches()num_range()num_range()()()set handy functions helps streamline column selection manipulation data frames. functions serve various purposes, selecting specific columns based names targeting numeric ranges custom patterns, ultimately making data wrangling efficient precise.","code":""},{"path":"working-across-columns.html","id":"select-the-last-column","chapter":"21 Working across columns","heading":"21.1 Select the last column","text":"can also select n---last last_col()\nIndexing starts 0, 1 indicates n-1.\n","code":"\npenguins_clean |> \n  select(last_col()) |> \n  glimpse()## Rows: 344\n## Columns: 1\n## $ comments <chr> \"Not enough blood for isotopes.\", NA, NA, \"Adult not sampled.…\npenguins_clean |> \n  select(last_col(3)) |> \n  glimpse()## Rows: 344\n## Columns: 1\n## $ sex <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\"…"},{"path":"working-across-columns.html","id":"selecting-columns-based-on-string","chapter":"21 Working across columns","heading":"21.2 Selecting columns based on string","text":"code selects columns \"start s\"starts_with ends_with works character, also vector characters, allows us select columns begin either \"s c\".","code":"\npenguins_clean |> \n  select(starts_with(\"s\")) |> \n  glimpse()Rows: 344\nColumns: 5\n$ study_name    <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\"…\n$ sample_number <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,…\n$ species       <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie …\n$ stage         <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\"…\n$ sex           <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", NA, NA, NA, NA, \"F…\n\npenguins_clean |> \n  select(starts_with(c(\"s\", \"c\"))) |> \n  glimpse()Rows: 344\nColumns: 9\n$ study_name        <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0…\n$ sample_number     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,…\n$ species           <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Ade…\n$ stage             <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg St…\n$ sex               <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", NA, NA, NA, NA…\n$ clutch_completion <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", …\n$ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, …\n$ culmen_depth_mm   <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, …\n$ comments          <chr> \"Not enough blood for isotopes.\", NA, NA, \"Adult not sampled.\", NA, NA, \"Nest neve…"},{"path":"working-across-columns.html","id":"contains","chapter":"21 Working across columns","heading":"21.2.1 Contains","text":"can also use contains() function search columns contain specific string, searches exact match string (regular expressions) case-insensitive","code":"\npenguins_clean |> \n  select(contains(\"length\")) |> \n  glimpse()Rows: 344\nColumns: 2\n$ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, …\n$ flipper_length_mm <dbl> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180, 182, 191, 198, 185, 195…"},{"path":"working-across-columns.html","id":"regular-expressions","chapter":"21 Working across columns","heading":"21.2.2 Regular expressions","text":"Regular expressions, often abbreviated regex, powerful tools pattern matching text manipulation. provide concise flexible way search, extract, manipulate text based specific patterns, allowing data analysts programmers efficiently handle complex text-processing tasks.working regex time use stringr looking literal characters\ncan use regex types look specific patternsThis example look columns match contains numbers.modifier means columns returned least two numbers column headerThis pattern looks exact string match \"length_\" must also followed two letters...","code":"\npenguins_clean |> \n  select(matches(\"[0-9]\")) |> \n  glimpse()Rows: 344\nColumns: 2\n$ delta_15_n_o_oo <dbl> NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18718, 9.46060, NA, 9.13362, 8.63243, …\n$ delta_13_c_o_oo <dbl> NA, -24.69454, -25.33302, NA, -25.32426, -25.29805, -25.21799, -24.89958, NA, -25.09…\n\npenguins_clean |> \n  select(matches(\"[0-9]{2}\")) |> \n  glimpse()\npenguins_clean |> \n    select(matches(\"length_[a-z]{2}\")) |> \n    glimpse()"},{"path":"working-across-columns.html","id":"selecting-by-column-type","chapter":"21 Working across columns","heading":"21.3 Selecting by column type","text":"() function used want select variables specific data type dataset. example, can use select character variables.\"predicate functions\" includeis.doubleis.doubleis.numericis.numericis.logicalis.logicalis.factoris.factoris.integeris.integer","code":"\npenguins_clean |> \n    select(where(is.character)) |> \n    glimpse()Rows: 344\nColumns: 10\n$ study_name        <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0…\n$ species           <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Ade…\n$ region            <chr> \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"A…\n$ island            <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Tor…\n$ stage             <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg St…\n$ individual_id     <chr> \"N1A1\", \"N1A2\", \"N2A1\", \"N2A2\", \"N3A1\", \"N3A2\", \"N4A1\", \"N4A2\", \"N5A1\", \"N5A2\", \"N…\n$ clutch_completion <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", …\n$ date_egg          <chr> \"11/11/2007\", \"11/11/2007\", \"16/11/2007\", \"16/11/2007\", \"16/11/2007\", \"16/11/2007\"…\n$ sex               <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", NA, NA, NA, NA…\n$ comments          <chr> \"Not enough blood for isotopes.\", NA, NA, \"Adult not sampled.\", NA, NA, \"Nest neve…"},{"path":"working-across-columns.html","id":"combos","chapter":"21 Working across columns","heading":"21.4 Combos","text":"Using standard logical operators | & can string together different combinations selection criteria:column must type numeric title contains \"species\"","code":"\npenguins_clean |> \n  select(where(is.numeric) | contains(\"species\")) |> \n  glimpse()Rows: 344\nColumns: 8\n$ sample_number     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,…\n$ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, …\n$ culmen_depth_mm   <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, …\n$ flipper_length_mm <dbl> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180, 182, 191, 198, 185, 195…\n$ body_mass_g       <dbl> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 4250, 3300, 3700, 3200, 3800, …\n$ delta_15_n_o_oo   <dbl> NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18718, 9.46060, NA, 9.13362, 8.63243…\n$ delta_13_c_o_oo   <dbl> NA, -24.69454, -25.33302, NA, -25.32426, -25.29805, -25.21799, -24.89958, NA, -25.…\n$ species           <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Ade…\n"},{"path":"modifying-variables.html","id":"modifying-variables","chapter":"22 Modifying variables","heading":"22 Modifying variables","text":"","code":""},{"path":"modifying-variables.html","id":"count","chapter":"22 Modifying variables","heading":"22.1 count","text":"Counting one common tasks working data. Counting may\nsound simple, can get complicated quickly. Consider examples:Sometimes want count continuous variables. Suppose year variable\ndata frame data type integer (e.g. 1982, 1945, 1990). want \nknow number people decade. , must first convert year\nvariable decades start counting.Sometimes want count continuous variables. Suppose year variable\ndata frame data type integer (e.g. 1982, 1945, 1990). want \nknow number people decade. , must first convert year\nvariable decades start counting.Often want count things per group (example, number players \nparticular sports team) add counts per group new variable data\nframe. use joins , less code \nefficiently?Often want count things per group (example, number players \nparticular sports team) add counts per group new variable data\nframe. use joins , less code \nefficiently?example, created new variable body_mass_intervals calculated variable body_mass_g. also used name argument give count column descriptive name.can see bins range 10. Also, bins surrounded square brackets parentheses. parenthesis means number included bin, square bracket means number included bin, second example, mean 2.75e+03 included, 2.85e+03.","code":"\npenguins_clean |> \n  count(body_mass_intervals = cut_width(body_mass_g, 100))"},{"path":"modifying-variables.html","id":"extract","chapter":"22 Modifying variables","heading":"22.2 extract","text":"code using separate function tidyr package split \"species\" column penguins_clean data frame two separate columns: \"species\" \"full_latin_name.\" separation based specific delimiter, opening parenthesis (.approach reaches limits quite quickly - note left ugly ) end second column. also issues lack clear separator distinguish columns want create. use cases extract.Now suppose want separate common names latin names species variable regex:first group captures one word characters (\\w+).first group captures one word characters (\\w+)..* captures characters string capture .* captures characters string capture themThe last group contains anything found inside brackets ()\n\\\\( finds open bracket capture \n([^)]+) captures anything except closing parenthesis\nlast group contains anything found inside brackets ()\\\\( finds open bracket capture ([^)]+) captures anything except closing parenthesis","code":"\npenguins_clean |> \n  separate(species,\n          into = c(\"species\", \"full_latin_name\"),\n          sep = \"\\\\(\"\n          )\npenguins_clean_split <- penguins_clean |> \n  extract(species,\n          into = c(\"species\", \"full_latin_name\"),\n          regex = \"(\\\\w+) .* \\\\(([^)]+)\\\\)\"\n          )\npenguins_clean_split |> colnames()##  [1] \"study_name\"        \"sample_number\"     \"species\"          \n##  [4] \"full_latin_name\"   \"region\"            \"island\"           \n##  [7] \"stage\"             \"individual_id\"     \"clutch_completion\"\n## [10] \"date_egg\"          \"culmen_length_mm\"  \"culmen_depth_mm\"  \n## [13] \"flipper_length_mm\" \"body_mass_g\"       \"sex\"              \n## [16] \"delta_15_n_o_oo\"   \"delta_13_c_o_oo\"   \"comments\""},{"path":"factors-1.html","id":"factors-1","chapter":"23 Factors","heading":"23 Factors","text":"","code":""},{"path":"factors-1.html","id":"anonymising-factors","chapter":"23 Factors","heading":"23.1 Anonymising factors","text":"Sometimes want make data completely anonymous people can’t see sensitive information. wish blind analyses can forcats::fct_anon","code":"\npenguins_clean_split |> \n  mutate(species = fct_anon(species,\n         prefix = \"species_\"))"},{"path":"factors-1.html","id":"lump-factors","chapter":"23 Factors","heading":"23.2 Lump factors","text":"fct_lump_min() function forcats package R, used lump group together levels categorical variable way keeps common levels intact grouping less common levels \"\" \"Miscellaneous\" category.example, species represented least 150 observations, lumped \"\" category:","code":"\npenguins_clean_split |> \n  mutate(body_size = fct_lump_min(as_factor(species), 150)) |> \n  ggplot(aes(x = body_size,\n         y = flipper_length_mm))+\n  geom_boxplot()"},{"path":"factors-1.html","id":"ordering-factors","chapter":"23 Factors","heading":"23.3 Ordering factors","text":"fct_relevel function can set factors apply specified level time:function fct_infreq can change order according frequently level occursThe fct_rev() function R used reverse order levels factor variable. particularly useful changing order factor levels want display data reversed descending order.fct_reorder function allows us order levels based another continuous variable","code":"\npenguins_clean_split |> \n  mutate(species = fct_relevel(species, \"Adelie\", \"Chinstrap\", \"Gentoo\")) |> \n  ggplot(aes(x = species))+\n  geom_bar()+\n  coord_flip()\npenguins_clean_split |> \n  mutate(species = fct_infreq(species)) |> \n  ggplot(aes(x = species))+\n  geom_bar()+\n  coord_flip()\npenguins_clean_split |> \n  mutate(species = fct_rev(as_factor(species))) |> \n  ggplot(aes(x = species))+\n  geom_bar()+\n  coord_flip()\npenguins_clean_split |> \n  mutate(species = as_factor(species) |> \n           fct_reorder(body_mass_g,\n                       .fun = median)) |> \n  # by default the levels are ordered by the median values of the continuous variable\n  # mean, min and max can all be included here\n  ggplot(aes(x = species,\n             y = body_mass_g,\n             colour = species))+\n  geom_boxplot(width = .2,\n               outlier.shape = NA)+\n  geom_jitter(width = .2,\n              alpha = .4)"},{"path":"applying-functions-across-columns.html","id":"applying-functions-across-columns","chapter":"24 Applying functions across columns","heading":"24 Applying functions across columns","text":"One credos programming “Don’t repeat ”. seen previous tutorials many us fall victim principle quite often. Fortunately, tidyverse team developed set functions make easier repeat :","code":""},{"path":"applying-functions-across-columns.html","id":"calculate-summary-statistics-across-columns","chapter":"24 Applying functions across columns","heading":"24.1 calculate summary statistics across columns","text":"example generating summary statistics two columns, can make process efficient:couple things important :• function across works inside dplyr verbs (e.g. mutate)• function three important arguments: .cols stands column apply \nfunction . can use tidyselect functions ; .fns stands function(s)\napplied columns; .names used whenever want change \nnames selected columns.use case work general structure:Instead can use across function get result, supply column names .cols = c(\"body_mass_g\", \"flipper_length_mm\") can use get whole column types :","code":"\npenguins_clean_split |> \n  group_by(species) |> \n  summarise(\n    mean_body_mass = mean(body_mass_g, na.rm = T),\n    mean_flipper_length = mean(flipper_length_mm, na.rm = T)\n  )<DFRAME> |> \n<DPLYR VERB>(\nacross(\n.cols = <SELECTION OF COLUMNS>,\n.fns = <FUNCTION TO BE APPLIED TO EACH COLUMN>,\n.names = <NAME OF THE GENERATED COLUMNS>\n)\n)\npenguins_clean_split |> \n  group_by(species) |> \n  summarise(\n    across(\n      .cols = where(is.numeric),\n      .fns = ~mean(.x, na.rm = T),\n      .names = \"mean_{.col}\")\n    )"},{"path":"applying-functions-across-columns.html","id":"change-variable-types-across-columns","chapter":"24 Applying functions across columns","heading":"24.2 Change variable types across columns","text":"","code":"\npenguins_clean_split |> \n  mutate(\n    across(.cols = c(\"species\", \"island\", \"region\"),\n           .fns = as_factor)\n  ) |> \n  select(where(is.factor)) |> \n  glimpse()## Rows: 344\n## Columns: 3\n## $ species <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie…\n## $ region  <fct> Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers…\n## $ island  <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgers…Rows: 344\nColumns: 3\n$ species <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ region  <fct> Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anve…\n$ island  <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen,…"},{"path":"applying-functions-across-columns.html","id":"correct-typos","chapter":"24 Applying functions across columns","heading":"24.3 Correct typos","text":"can use across functions quickly change typos across multiple columns , example:","code":"\nx <- c(\"Adelie\", \"adelie\", \"pinstrap\", \"Chinstrap\")\ny <- c(\"adelie\", \"Adelie\", \"Chinstrap\",\"Chinstrap\")\n\ntypo_df <- tibble(x,y)\ntypo_df |> \n  mutate(across(\n    .cols = everything(),\n    .fns = ~ case_when(\n      str_detect(., \"adelie\") ~ str_replace(., \"adelie\", \"Adelie\"),\n      str_detect(., \"pinstrap\") ~ str_replace(., \"pinstrap\", \"Chinstrap\"),\n      TRUE ~ .\n    )\n  ))"},{"path":"working-with-rows.html","id":"working-with-rows","chapter":"25 Working with rows","heading":"25 Working with rows","text":"","code":""},{"path":"working-with-rows.html","id":"filtering-rows-based-on-conditions-across-multiple-columns","chapter":"25 Working with rows","heading":"25.1 Filtering rows based on conditions across multiple columns","text":"Suppose want filter multiple rows data frame fail meet criteria.","code":"\npenguins_clean_split |> \n  filter(\n    if_any(.cols = contains(\"culmen\"),\n           .fns = ~. < 40)\n  ) |> \n  glimpse()"},{"path":"working-with-rows.html","id":"filter-rows-based-on-missing-values","chapter":"25 Working with rows","heading":"25.2 filter rows based on missing values","text":"Another useful use case filtering rows based missing values across multiple columns.\nfirst outcome can seem counter-intuitive, can \nexplained ! operator. if_all evaluating\nwhether columns meet condition containing NA.\n\ncan try different combinations if_all, if_any \noperator\n","code":"\npenguins_clean_split |> \n  filter(\n    if_all(.cols = where(is.numeric),\n           .fns = ~!is.na(.))\n  ) "},{"path":"working-with-rows.html","id":"slicing","chapter":"25 Working with rows","heading":"25.3 slicing","text":"Suppose want remove 10 highest values body mass dataframe - sliceslice keeps rows specify positive indices. Note R indexing starts 1 0 programming languages. make clear rows slice keeps, let’s add row numbers data frame slice arbitrary rows:remove specific rows, can use negative indices. Suppose, want remove first 340 rows data frame.Helper functions include slice_head(), slice_tail(), slice_max(), slice_min() slice_sample()\ncan use functions quickly easily filter data situations","code":"\npenguins_clean_split |> \n  arrange(desc(body_mass_g)) |> \n  slice(1:10)\npenguins_clean_split |> \n  arrange(desc(body_mass_g)) |> \n  rownames_to_column(var = \"row_number\") |> \n  slice(c(1,123,307))\npenguins_clean_split |> \n  arrange(desc(body_mass_g)) |> \n  rownames_to_column(var = \"row_number\") |> \n  slice(c(-1:-340))\npenguins_clean_split |> \n  slice_max(order_by = body_mass_g,\n            n = 20) |> # we can also use prop e.g. prop =.1 to slice the top 10%\n  select(species, body_mass_g)"},{"path":"working-with-rows.html","id":"groupwise-slicing","chapter":"25 Working with rows","heading":"25.4 groupwise slicing","text":"apply functions within different sub-categories, use group_by()","code":"\npenguins_clean_split |> \n  group_by(species) |> \n  slice_max(order_by = body_mass_g,\n            n = 3) |> \n  select(species, body_mass_g) |> \n  ungroup()"},{"path":"working-with-rows.html","id":"bootstrapping-with-slice","chapter":"25 Working with rows","heading":"25.5 bootstrapping with slice","text":"set replace argument TRUE slice(), perform sampling replacement. means row data can appear twice dataframe.? functionality allows us create bootstraps data frame. Bootstrapping \ntechnique set samples size drawn single original sample.values appear bootstrapping allows value pulled multiple times original data set. bootstraps, can calculate metrics . example, mean value bootstrap. underlying logic technique since sample population, bootstraps act proxies samples population. Now created one bootstrap sample, can create many. following code used map create 100 bootstraps original sample:","code":"\nslice_sample(penguins_clean_split, \n             prop = .5, \n             replace = TRUE) |> \n  duplicated() |> \n  sum()## [1] 35\nset.seed(342)\nbootstraps <- map(1:100, \n                  ~slice_sample(penguins_clean_split, \n                                prop = .1, # 10% of dataframe\n                                replace = TRUE))\n\nbootstraps %>%\n    map_dbl(~ mean(.$body_mass_g, na.rm = TRUE)) |> \n  tibble(x = _ ) |> \nggplot(aes(x = x)) +\ngeom_histogram(fill = \"grey80\", color = \"black\")+\n  geom_vline(data = penguins_clean_split,\n             aes(xintercept = mean(body_mass_g, na.rm = T)),\n             linewidth = 2, colour = \"red\", linetype  =\"dashed\")"},{"path":"group-work.html","id":"group-work","chapter":"26 Group work","heading":"26 Group work","text":"R4DS book demonstrates functions can used run multiple models simultaneously. technique valuable extracting meaningful insights data.find well culmen length can predict culmen depth build linear regression model.created model, can retrieve results parameters test statistics\nsummary function:\nsummary(model)Now know important covariates consider - appropriate method analysis perspective include covariates within single modelHowever, may occasions wish apply simple models subpopulation turn:First need nest() data - tibbles nested dataframes can manipulated using various functions operations perform tasks like filtering, summarizing, visualization. Nested dataframes also facilitate operations per-group basis, can useful group-wise analysis.First create new nested dataframe 2. run model function (passing broom::tidy() get tibble friendly output) inside mutate. create new column nested tibbles . unnest model extract terms Intercept slope.","code":"\nmodel <- lm(culmen_depth_mm ~ culmen_length_mm, data = penguins_clean_split)\n\nsummary(model)## \n## Call:\n## lm(formula = culmen_depth_mm ~ culmen_length_mm, data = penguins_clean_split)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -4.1381 -1.4263  0.0164  1.3841  4.5255 \n## \n## Coefficients:\n##                  Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)      20.88547    0.84388  24.749  < 2e-16 ***\n## culmen_length_mm -0.08502    0.01907  -4.459 1.12e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.922 on 340 degrees of freedom\n##   (2 observations deleted due to missingness)\n## Multiple R-squared:  0.05525,    Adjusted R-squared:  0.05247 \n## F-statistic: 19.88 on 1 and 340 DF,  p-value: 1.12e-05\nmodel <- lm(culmen_depth_mm ~ culmen_length_mm * species, data = penguins_clean_split)\n\nsummary(model)Call:\nlm(formula = culmen_depth_mm ~ culmen_length_mm * species, data = penguins_clean_split)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.6574 -0.6675 -0.0524  0.5383  3.5032 \n\nCoefficients:\n                                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                       11.40912    1.13812  10.025  < 2e-16 ***\nculmen_length_mm                   0.17883    0.02927   6.110 2.76e-09 ***\nspeciesChinstrap                  -3.83998    2.05398  -1.870 0.062419 .  \nspeciesGentoo                     -6.15812    1.75451  -3.510 0.000509 ***\nculmen_length_mm:speciesChinstrap  0.04338    0.04558   0.952 0.341895    \nculmen_length_mm:speciesGentoo     0.02601    0.04054   0.642 0.521590    \n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 0.9548 on 336 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.7697,    Adjusted R-squared:  0.7662 \nF-statistic: 224.5 on 5 and 336 DF,  p-value: < 2.2e-16\n\npenguins |> \n    group_by(species) |> \n    nest() |> \n    mutate(model = map(data, ~ lm(culmen_depth_mm ~ culmen_length_mm, data = .) |> broom::tidy())) |> \n    unnest(model)# A tibble: 6 × 7\n# Groups:   species [3]\n  species   data                term             estimate std.error statistic  p.value\n  <chr>     <list>              <chr>               <dbl>     <dbl>     <dbl>    <dbl>\n1 Adelie    <tibble [152 × 16]> (Intercept)        11.4      1.34        8.52 1.61e-14\n2 Adelie    <tibble [152 × 16]> culmen_length_mm    0.179    0.0344      5.19 6.67e- 7\n3 Gentoo    <tibble [124 × 16]> (Intercept)         5.25     1.05        4.98 2.15e- 6\n4 Gentoo    <tibble [124 × 16]> culmen_length_mm    0.205    0.0222      9.24 1.02e-15\n5 Chinstrap <tibble [68 × 16]>  (Intercept)         7.57     1.55        4.88 6.99e- 6\n6 Chinstrap <tibble [68 × 16]>  culmen_length_mm    0.222    0.0317      7.01 1.53e- 9\n"},{"path":"pivot.html","id":"pivot","chapter":"27 Pivot","heading":"27 Pivot","text":"","code":""},{"path":"pivot.html","id":"pivot-wider","chapter":"27 Pivot","heading":"27.1 pivot wider","text":"\nUn-tidy data violates one three principles one way \nanother:\n\n• variable forms column • observation forms row • \ntype observation unit table\ndata untidy value measures underlying attribute (number observations) split across three columns. wk1,wk2 wk3 represent underlying variable observations split across three weeks.can use pivot create tidy representation dataWe can tidy dataframe removing \"wk\" prefix:\nNote week column still treated character\nstring. using names_transform can fix \n","code":"\nwk1 <- c(1,2,4,5)\nwk2 <- c(3,4,1,0)\nwk3 <- c(0,0,2,0)\npenguin_id <- c(\"N15A1\" , \"N15A2\" , \"N18A1\", \"N71A2\")\n\npeng_obs <- tibble(penguin_id, wk1,wk2,wk3)\npeng_obs |> \n  pivot_longer(\n    cols = \"wk1\":\"wk3\",\n    names_to = \"week\",\n    values_to = \"observations\"\n  )\npeng_obs |> \n  pivot_longer(\n    cols = \"wk1\":\"wk3\",\n    names_to = \"week\",\n    names_prefix = \"wk\",\n    values_to = \"observations\"\n  )\npeng_obs |> \n  pivot_longer(\n    cols = \"wk1\":\"wk3\",\n    names_to = \"week\",\n    names_prefix = \"wk\",\n    names_transform = as.integer,\n    values_to = \"observations\"\n  )"},{"path":"pivot.html","id":"pivot-longer","chapter":"27 Pivot","heading":"27.2 pivot longer","text":"Suppose like make data frame wider like present results human-readable table. , can use pivot_wider provide arguments main parameters:id_cols: columns identifiers observations. column names\nremain unchanged data frame. values form rows transformed data\nframe. default, columns except specified names_from values_from\nbecome id_cols.id_cols: columns identifiers observations. column names\nremain unchanged data frame. values form rows transformed data\nframe. default, columns except specified names_from values_from\nbecome id_cols.names_from: columns transformed wider format. values \nconverted columns. specify one column names_from, \nnewly created column names combination column values.names_from: columns transformed wider format. values \nconverted columns. specify one column names_from, \nnewly created column names combination column values.values_from: values columns used columns created \nnames_from.values_from: values columns used columns created \nnames_from.","code":""},{"path":"pivot.html","id":"pivot-wider-for-summary-tables","chapter":"27 Pivot","heading":"27.3 pivot wider for summary tables","text":"","code":"\npenguins_clean_split |> \n  group_by(species, island) |> \n  summarise(mean = mean(body_mass_g, na.rm = T))\npenguins_clean_split |> \n  group_by(species, island) |> \n  summarise(mean = mean(body_mass_g, na.rm = T)) |> \n  pivot_wider(names_from = c(species, island),\n              values_from = mean,\n              names_prefix = \"mean_\")"},{"path":"writing-functions-in-tidyverse.html","id":"writing-functions-in-tidyverse","chapter":"28 Writing Functions in Tidyverse","heading":"28 Writing Functions in Tidyverse","text":"goal understand use tidy evaluation write functions incorporate tidyverse functions e.g. (mutate, select, filter) etc.example code select variable:Put exact working code functionThis error occurs becaus tidy evaluation\nTidy evaluation: framework controlling expressions \nvariables code evaluated tidyverse functions.\n\n\nAllows programmers select variables based position,\nname, type\n\n\nAllows programmers select variables based position,\nname, type\n\n\nUseful passing variable names inputs functions use\ntidyverse packages like dplyr ggplot2\n\n\nUseful passing variable names inputs functions use\ntidyverse packages like dplyr ggplot2\n\n\n{dplyr} verbs rely tidy evaluation resolve programming\ncommands\n\n\n{dplyr} verbs rely tidy evaluation resolve programming\ncommands\n","code":"\npenguins_clean_split |> \n  select(species)\ntest_function <- function(select_var){\n  penguins_clean_split |> \n  select(select_var)\n}\n\ntest_function(select_var = species)Error: object 'species' not found\n"},{"path":"writing-functions-in-tidyverse.html","id":"data-masking","chapter":"28 Writing Functions in Tidyverse","heading":"28.1 Data masking","text":"Data masking handy feature tidyverse makes easier program dataframes. allows reference columns wihout using $, whereas almost base R functions use unmasked programming.However, makes harder create functionsData masking used arrange(), count(), filter(), group_by(), mutate(), summarise(). check type tidy evaluation function uses, check help file.passing quoted arguments function, can use directly expression, function evaluate part data frame.However, can avoid embracing curly operators {{.}} allows data-masked argument evaluation delayed data frame columns defined. {{ operator can tunnel data-variables (.e. columns data frames) arg-variables (function arguments).try another data-masked function","code":"\ntest_filter_species <- function(filter_var) {\n  penguins_clean_split %>%\n    filter(species == filter_var)\n}\n\ntest_filter_species(\"Adelie\") %>%\n  glimpse()## Rows: 152\n## Columns: 18\n## $ study_name        <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708…\n## $ sample_number     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n## $ species           <chr> \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"A…\n## $ full_latin_name   <chr> \"Pygoscelis adeliae\", \"Pygoscelis adeliae\", \"Pygosce…\n## $ region            <chr> \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"A…\n## $ island            <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", …\n## $ stage             <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, …\n## $ individual_id     <chr> \"N1A1\", \"N1A2\", \"N2A1\", \"N2A2\", \"N3A1\", \"N3A2\", \"N4A…\n## $ clutch_completion <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\"…\n## $ date_egg          <date> 2007-11-11, 2007-11-11, 2007-11-16, 2007-11-16, 200…\n## $ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n## $ culmen_depth_mm   <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n## $ flipper_length_mm <dbl> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n## $ body_mass_g       <dbl> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n## $ sex               <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"F…\n## $ delta_15_n_o_oo   <dbl> NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18718,…\n## $ delta_13_c_o_oo   <dbl> NA, -24.69454, -25.33302, NA, -25.32426, -25.29805, …\n## $ comments          <chr> \"Not enough blood for isotopes.\", NA, NA, \"Adult not…\ntest_filter_general <- function(filter_condition) {\n  penguins_clean_split %>%\n    filter(filter_condition)\n}\n\ntest_filter_general(\"flipper_length_mm > 180\") %>%\n  glimpse()Error in `filter()`:\nℹ In argument: `filter_condition`.\nCaused by error:\n! `..1` must be a logical vector, not the string \"fliper_length_mm > 180\".\nBacktrace:\n  1. test_filter_general(\"flipper_length_mm > 180\") %>% glimpse()\n 12. dplyr:::dplyr_internal_error(...)\n\ntest_filter_general <- function(filter_condition) {\n  penguins_clean_split %>%\n    filter({{filter_condition}})\n}\n\ntest_filter_general(flipper_length_mm > 180) %>%\n  glimpse()## Rows: 329\n## Columns: 18\n## $ study_name        <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708…\n## $ sample_number     <dbl> 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, …\n## $ species           <chr> \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"A…\n## $ full_latin_name   <chr> \"Pygoscelis adeliae\", \"Pygoscelis adeliae\", \"Pygosce…\n## $ region            <chr> \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"A…\n## $ island            <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", …\n## $ stage             <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, …\n## $ individual_id     <chr> \"N1A1\", \"N1A2\", \"N2A1\", \"N3A1\", \"N3A2\", \"N4A1\", \"N4A…\n## $ clutch_completion <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\"…\n## $ date_egg          <date> 2007-11-11, 2007-11-11, 2007-11-16, 2007-11-16, 200…\n## $ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0…\n## $ culmen_depth_mm   <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2…\n## $ flipper_length_mm <dbl> 181, 186, 195, 193, 190, 181, 195, 193, 190, 186, 18…\n## $ body_mass_g       <dbl> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3475, 4250…\n## $ sex               <chr> \"MALE\", \"FEMALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMAL…\n## $ delta_15_n_o_oo   <dbl> NA, 8.94956, 8.36821, 8.76651, 8.66496, 9.18718, 9.4…\n## $ delta_13_c_o_oo   <dbl> NA, -24.69454, -25.33302, -25.32426, -25.29805, -25.…\n## $ comments          <chr> \"Not enough blood for isotopes.\", NA, NA, NA, NA, \"N…\nsummary_table <- function(df, var){\n  df |> \n    summarise(mean = mean({{var}}, na.rm = T),\n              sd = sd({{var}}, na.rm = T))\n}\n\nsummary_table(penguins_clean_split, body_mass_g)"},{"path":"writing-functions-in-tidyverse.html","id":"alternative-to","chapter":"28 Writing Functions in Tidyverse","heading":"28.1.1 Alternative to {{}}","text":"{{.}} shortcut !!enquo(.) rlang::enquo() captures quote argument expression. result enquo() quosure, combination quoted expression associated environment.!! unquote operator. used unquote unsplice contents quosure. words, takes quoted expression quosure evaluates . can see work one previous examples:","code":"\ntest_filter_general <- function(filter_condition) {\n  \n  filter_quo <- enquo(filter_condition)\n  \n  penguins_clean_split %>%\n    filter(!!filter_quo)\n}\n\ntest_filter_general(flipper_length_mm > 180) %>%\n  glimpse()## Rows: 329\n## Columns: 18\n## $ study_name        <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708…\n## $ sample_number     <dbl> 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, …\n## $ species           <chr> \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"A…\n## $ full_latin_name   <chr> \"Pygoscelis adeliae\", \"Pygoscelis adeliae\", \"Pygosce…\n## $ region            <chr> \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"A…\n## $ island            <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", …\n## $ stage             <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, …\n## $ individual_id     <chr> \"N1A1\", \"N1A2\", \"N2A1\", \"N3A1\", \"N3A2\", \"N4A1\", \"N4A…\n## $ clutch_completion <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\"…\n## $ date_egg          <date> 2007-11-11, 2007-11-11, 2007-11-16, 2007-11-16, 200…\n## $ culmen_length_mm  <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0…\n## $ culmen_depth_mm   <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2…\n## $ flipper_length_mm <dbl> 181, 186, 195, 193, 190, 181, 195, 193, 190, 186, 18…\n## $ body_mass_g       <dbl> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3475, 4250…\n## $ sex               <chr> \"MALE\", \"FEMALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMAL…\n## $ delta_15_n_o_oo   <dbl> NA, 8.94956, 8.36821, 8.76651, 8.66496, 9.18718, 9.4…\n## $ delta_13_c_o_oo   <dbl> NA, -24.69454, -25.33302, -25.32426, -25.29805, -25.…\n## $ comments          <chr> \"Not enough blood for isotopes.\", NA, NA, NA, NA, \"N…"},{"path":"writing-functions-in-tidyverse.html","id":"tidy-select","chapter":"28 Writing Functions in Tidyverse","heading":"28.2 tidy-select","text":"using functions use tidy-select, put variable names quotes use th all_of any_of functions.any_of(): selecting listed variablesany_of(): selecting listed variablesall_of(): strict selection. variables character vector missing, error thrownall_of(): strict selection. variables character vector missing, error thrownCan also use !all_of() select variables found character vector supplied all_of()Can also use !all_of() select variables found character vector supplied all_of()","code":"\nmy_select_function <- function(select_variable){\n  penguins_clean_split |> \n    dplyr::select(select_variable)\n  }\n\nmy_select_function(species) |> \n  glimpse()Error: object 'species' not found\n\nmy_select_function <- function(select_variable){\n  penguins_clean_split |> \n    dplyr::select(select_variable)\n  }\n\nmy_select_function(\"species\") |> \n  glimpse()Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nPlease use `all_of()` or `any_of()` instead.\n# Was:\ndata %>% select(select_variable)\n\n# Now:\ndata %>% select(all_of(select_variable))\n\nmy_select_function <- function(select_variable){\n  penguins_clean_split |> \n    dplyr::select(dplyr::all_of(select_variable))\n  }\n\nmy_select_function(select_variable = c(\"species\", \"sex\")) |> \n  glimpse()## Rows: 344\n## Columns: 2\n## $ species <chr> \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"A…\n## $ sex     <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\", \"FEMALE\", \"M…"},{"path":"writing-functions-in-tidyverse.html","id":"practice","chapter":"28 Writing Functions in Tidyverse","heading":"28.3 Practice","text":"Write function uses filter take two penguin species selects one numeric variable e.g. body_mass_g compares violin plot geom_violin()Try substituting quo_name(enquo(filter_condition)). return character string represents filter condition. example used quo_name(enquo()) enable conversion character strings, means function arguments can provided without \"quotes\".","code":"\ncompare_species_plot <- function(data, species_1, species_2, feature) {\n    \n  filtered_data <- data |> \n        filter(species %in% c(species_1, species_2))\n    \n    # Create a conditional ggplot\n    ggplot(filtered_data, aes(x = species, y = {{feature}}))+ \n      geom_violin()\n        \n\n}\n\ncompare_species_plot(penguins_clean_split, \"Adelie\", \"Chinstrap\", culmen_length_mm)\ncompare_species_plot <- function(data, species_1, species_2, feature) {\n    \n   \n    \n    # Quote species_1 and species_2 using quosures\n    species_1_quo <- quo_name(enquo(species_1))\n    species_2_quo <- quo_name(enquo(species_2))\n    \n\n    filtered_data <- data |> \n        filter(species %in% c(species_1_quo, species_2_quo))\n    \n    # Create a conditional ggplot\n    ggplot(filtered_data, aes(x = species, y = {{feature}})) +\n        geom_violin()\n}\n\n# Example usage without quotes for species names\n\ncompare_species_plot(penguins_clean_split, Adelie, Chinstrap, culmen_length_mm)"},{"path":"writing-functions-in-tidyverse.html","id":"exercise-6","chapter":"28 Writing Functions in Tidyverse","heading":"28.4 Exercise","text":"1.Practice tidy evaluation want produce function allows unquoted arguments produces barplot number penguins recorded species. instance going start function can filter penguins according one variable fill columns according another variable e.g. filter year colour island get year--year abundance chartTry write specific example first:abstract use bare (unquoted) values arguments2. Write custom function Can write custom function tidyverse? something data work - see can functionalise flow?","code":"\npenguins|> \n  filter(year == 2007) |> \n  ggplot(aes(x=species, fill=island))+\n  geom_bar(position=position_dodge2(preserve=\"single\"))+\n  coord_flip()\nplot_count <- function(filter_condition, colour_variable){\npenguins|> \n  filter({{filter_condition}}) |> \n  ggplot(aes(x=species, fill={{colour_variable}}))+\n  geom_bar(position=position_dodge2(preserve=\"single\"))+\n  coord_flip()\n}\n\nplot_count(year == 2007 , colour_variable = island)"},{"path":"customisation-with-ggplot2.html","id":"customisation-with-ggplot2","chapter":"29 Customisation with ggplot2","heading":"29 Customisation with ggplot2","text":"now, created basic plots default visual style. dive working experimental data, explore straightforward ways personalize visuals. numerous ways tweak tailor look plots R, grasp concept behind one customization, find easier apply similar principles examples.can customize appearance elements within specific plot element, aesthetic mapping, adding extra layers using plus sign (+). section, focus common easy--implement customizations, like changing colors, including axis labels, applying different themes plots.\nneed cleaned penguins dataframe Day One.\n","code":""},{"path":"customisation-with-ggplot2.html","id":"colours","chapter":"29 Customisation with ggplot2","heading":"29.1 Colours","text":"two main differences comes colors ggplot2. arguments, color fill, can specified single color \nassigned variables.already seen tutorial, variables inside aesthetics encoded variables outside properties unrelated variables.","code":"\npenguins |> \n    ggplot(aes(x=culmen_length_mm))+\n    geom_histogram(bins=50, \n                   aes(y=..density..,\n                       fill=species), \n                   position = \"identity\",\n                   colour=\"black\")"},{"path":"customisation-with-ggplot2.html","id":"choosing-and-using-colour-palettes","chapter":"29 Customisation with ggplot2","heading":"29.1.1 Choosing and using colour palettes","text":"can specify colours want assign variables number different ways.ggplot2, colors assigned variables modified via scale_color_* scale_fill_* functions. order use color data, importantly need know dealing categorical continuous variable. color palette chosen depending type variable:sequential diverging color palettes used continuous variablessequential diverging color palettes used continuous variablesqualitative color palettes (unordered) categorical variables:qualitative color palettes (unordered) categorical variables:can pick sets colours assign categorical variable. number specified colours match number categories. can use wide number preset colour names can use hexadecimals.can also use range inbuilt colour palettes:\ncan explore schemes available command\nRColorBrewer::display.brewer.()\nalso many, many extensions provide additional colour palettes. favourite packages include ggsci wesanderson","code":"\n## Custom colours ----\n\npal <- c(\n  \"Adelie\" = \"#FF8C00\", \n  \"Chinstrap\" = \"#A034F0\", \n  \"Gentoo\" = \"#159090\")\n\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))+\n  scale_color_manual(values=pal)+\n  theme_minimal()\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))+\n  scale_color_brewer(palette=\"Set1\")+\n  theme_minimal()"},{"path":"customisation-with-ggplot2.html","id":"redundant-aesthetics","chapter":"29 Customisation with ggplot2","heading":"29.1.2 Redundant aesthetics","text":"Specifications made using aes() inherited top layer ggplot default. means set aesthetic mapping beginning ggplot, apply subsequent layers unless explicitly override specific layer. inheritance simplifies process maintaining consistent aesthetics throughout plot.","code":"\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))+\n  geom_smooth(aes(colour = species), # both geoms use aes(colour = species)\n              method = \"lm\", se = FALSE) +\n  scale_color_brewer(palette=\"Set1\")+\n  theme_minimal()\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour = species))+ # this can be set at the ggplot layer\n  geom_point()+\n  geom_smooth(method = \"lm\", se  = FALSE) +\n  scale_color_brewer(palette=\"Set1\")+\n  theme_minimal()"},{"path":"customisation-with-ggplot2.html","id":"accessible-colours","chapter":"29 Customisation with ggplot2","heading":"29.1.3 Accessible colours","text":"easy get carried away colour palettes, remember times figures must accessible. One way check accessible figures use colour blindness checker colorBlindness","code":"\n## Check accessibility ----\n\nlibrary(colorBlindness)\ncolorBlindness::cvdPlot() # will automatically run on the last plot you made"},{"path":"customisation-with-ggplot2.html","id":"guides-to-visual-accessibility","chapter":"29 Customisation with ggplot2","heading":"29.1.3.1 Guides to visual accessibility","text":"Using colours tell categories apart can useful, can see example , choose carefully. aesthetics can access geoms include shape, size - can combine complimentary ways enhance accessibility plots. hierarchy \"interpretability\" different types data","code":""},{"path":"customisation-with-ggplot2.html","id":"axes","chapter":"29 Customisation with ggplot2","heading":"29.2 Axes","text":"ggplot automatically pick scale axis, type coordinate space. plots Cartesian (linear X vs linear Y) coordinate space.might observed depending data distributed portion plot visible, axis values can vary. Sometimes, prefer keep values consistent. achieve , already used functions control axis scaling previous sections paper – specifically, \"scale_*\" functions.Now, utilize \"scale_x_continuous()\" \"scale_y_continuous()\" setting desired values axes. key parameters functions \"limits\" (defined \"limits = c(value, value)\") \"breaks\" (represent tick marks, specified \"breaks = value:value\"). important note \"limits\" comprise two values (minimum maximum), \"breaks\" consists range values (instance, 0 100).plot, let’s say want x y origin set 0. can add xlim() ylim() functions, define limits axes:, can control coordinate space using coord() functions. Say want flip x y axes, add coord_flip():","code":"\n## Set axis limits ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  scale_x_continuous(limits = c(0,240), breaks = c(30,60,90,120,150,180,210,240))+\n  scale_y_continuous(limits = c(0,7000), breaks = (0:7000))\n## Set axis limits ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  scale_x_continuous(limits = c(0,240), breaks = seq(0,240,30))+\n  scale_y_continuous(limits = c(0,7000), breaks = seq(0,7000, 1000))\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  scale_x_continuous(limits = c(0,240), breaks = seq(0,240,30))+\n  scale_y_continuous(limits = c(0,7000), breaks = seq(0,7000, 1000))+\n  coord_flip()"},{"path":"customisation-with-ggplot2.html","id":"discrete-scales","chapter":"29 Customisation with ggplot2","heading":"29.2.1 Discrete scales","text":"idea limits within scale_* function can also used change order categories discrete scale. example look boxplots againThe figures always default alphabetical order. Sometimes want; sometimes want. wanted switch order use scale_x_discrete() function set limits within (limits = c(\"category\",\"category\")) follows:can see example scale_*_ arguments actually control data plotted - wish zoom subsection plot, without actually eliminating data use different function","code":"\npenguins |> \n  drop_na(sex) |> \nggplot(aes(x = species, y = culmen_length_mm)) +\n  geom_violin(aes(fill = sex),\n              width = 0.5)+\n  scale_fill_brewer(palette = \"Dark2\")\npenguins |> \n  drop_na(sex) |> \nggplot(aes(x = species, y = culmen_length_mm)) +\n  geom_violin(aes(fill = sex),\n              width = 0.5)+\n  scale_fill_brewer(palette = \"Dark2\") +\n  scale_x_discrete(limits = c(\"Gentoo\",\"Chinstrap\")) "},{"path":"customisation-with-ggplot2.html","id":"zooming-in-and-out","chapter":"29 Customisation with ggplot2","heading":"29.2.2 Zooming in and out","text":"seen can set parameters axes continuous discrete scales.can beneficial able zoom figures, mainly focus frame given section. One function can use coord_cartesian(), ggplot2. main arguments limits x-axis (xlim = c(value, value)), limits y-axis (ylim = c(value, value)), whether add small expansion limits (expand = TRUE/FALSE).","code":"\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  coord_cartesian(xlim = c(180,210), ylim = c(3000,4000), expand = FALSE)"},{"path":"customisation-with-ggplot2.html","id":"labels","chapter":"29 Customisation with ggplot2","heading":"29.3 Labels","text":"default, axis labels column names gave aesthetics aes(). can change axis labels using xlab() ylab() functions. Given column names often short can cryptic, functionality particularly important effectively communicating results.","code":"\n## Custom labels ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  labs(x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\")"},{"path":"customisation-with-ggplot2.html","id":"titles-and-subtitles","chapter":"29 Customisation with ggplot2","heading":"29.3.1 Titles and subtitles","text":"","code":"\n## Add titles ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  labs(x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       title= \"Penguin Size, Palmer Station LTER\",\n       subtitle= \"Flipper length and body mass for three penguin species\")"},{"path":"customisation-with-ggplot2.html","id":"controlling-the-legend","chapter":"29 Customisation with ggplot2","heading":"29.3.2 Controlling the legend","text":"ability control legend placement, can done setting theme(legend.position = ...) either \"top\", \"bottom\", \"left\" \"right\" shown:even coordinate within figure expressed propotion figure - .e. c(x = .8, y = .2) bottom right figure","code":"\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  labs(x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       title= \"Penguin Size, Palmer Station LTER\",\n       subtitle= \"Flipper length and body mass for three penguin species\")+\n  theme(legend.position =\"top\")\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  labs(x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       title= \"Penguin Size, Palmer Station LTER\",\n       subtitle= \"Flipper length and body mass for three penguin species\")+\n  theme(legend.position = c(.8,.2))"},{"path":"customisation-with-ggplot2.html","id":"controlling-redundant-legends","chapter":"29 Customisation with ggplot2","heading":"29.3.3 Controlling redundant legends","text":"plot shows quite ugly legend plots layer boxplot violin timeYou can use show.legend argument within geom_boxplot() function set FALSE. prevent geom_boxplot included legend. example:course - can agree legend actually redundant , x-axis plots species names. can remove entirely theme() function.can also choose remove specific aesthetics legends using guides()","code":"\npenguins |> \n  drop_na(sex) |> \nggplot(aes(x = species, y = culmen_length_mm, fill = species)) +\n  geom_violin(width = .5,\n              alpha = .4)+\n  geom_boxplot(width = .2)+\n  scale_fill_brewer(palette = \"Dark2\") \npenguins |> \n  drop_na(sex) |> \nggplot(aes(x = species, y = culmen_length_mm, fill = species)) +\n  geom_violin(width = .5,\n              alpha = .4)+\n  geom_boxplot(width = .2,\n               show.legend = FALSE)+\n  scale_fill_brewer(palette = \"Dark2\") \npenguins |> \n  drop_na(sex) |> \nggplot(aes(x = species, y = culmen_length_mm, fill = species)) +\n  geom_violin(width = .5,\n              alpha = .4)+\n  geom_boxplot(width = .2)+\n  scale_fill_brewer(palette = \"Dark2\") +\n  theme(legend.position = \"none\")\npenguins |> \n  drop_na(sex) |> \nggplot(aes(x = species, y = culmen_length_mm, fill = species)) +\n  geom_violin(width = .5,\n              alpha = .4)+\n  geom_boxplot(width = .2)+\n  scale_fill_brewer(palette = \"Dark2\") +\n  guides(fill = \"none\")"},{"path":"customisation-with-ggplot2.html","id":"themes","chapter":"29 Customisation with ggplot2","heading":"29.4 Themes","text":"Finally, overall appearance plot can modified using theme() functions. default theme grey background.\nmay prefer theme_classic(), theme_minimal() even theme_void(). Try .\nlot customisation available theme()\nfunction. look making custom themes later\nlessons\n\ncan also try installing running even wider range \npre-built themes install R package ggthemes.\n\nFirst need run \ninstall.packages(\"ggthemes\") command. Remember one\ntimes command written script \ntyped directly console. ’s ’s rude send\nsomeone script install packages computer - think \nlibrary() polite request instead!\n\naccess range themes available type\nhelp(ggthemes) follow documentation find \ncan .\n","code":"\n## Custom themes ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  labs(x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       title= \"Penguin Size, Palmer Station LTER\",\n       subtitle= \"Flipper length and body mass for three penguin species\")+\n  theme_void()\n## Custom themes ----\npenguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  labs(x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       title= \"Penguin Size, Palmer Station LTER\",\n       subtitle= \"Flipper length and body mass for three penguin species\")+\n  theme_void()+\n  theme(legend.position = c(.8, .2)) # note theme customisations must come AFTER theme sets or they will be overridden"},{"path":"customisation-with-ggplot2.html","id":"multiple-plots","chapter":"29 Customisation with ggplot2","heading":"29.5 Multiple plots","text":"","code":""},{"path":"customisation-with-ggplot2.html","id":"facets","chapter":"29 Customisation with ggplot2","heading":"29.5.1 Facets","text":"Adding combinations different aesthetics allows layer information onto 2D plot, sometimes though things just become busy. point becomes difficult see trends differences plot want break single plot sub-plots; called ‘faceting’. Facets commonly used much data display clearly single plot. revisit faceting , however now, let’s try facet plot according sex.use tilde symbol ‘~’ indicate column name form facet.","code":"\n## Facetting ----\npenguins |> \n  drop_na(sex) |> \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g,\n             colour=species))+ \n  geom_point()+\n  geom_smooth(method=\"lm\",    \n              se=FALSE)+\n  scale_color_brewer(palette=\"Set1\")+\n  facet_wrap(~sex)"},{"path":"customisation-with-ggplot2.html","id":"patchwork","chapter":"29 Customisation with ggplot2","heading":"29.5.2 Patchwork","text":"many times might want combine separate figures multi-panel plots. Probably easiest way patchwork package (Pedersen (2022)).","code":"\n## Patchwork ----\nlibrary(patchwork)\n\np1 <- penguins |> \n  ggplot(aes(x=flipper_length_mm, \n             y = culmen_length_mm))+\n  geom_point(aes(colour=species))+\n  scale_color_manual(values=pal)+\n  theme_minimal()\n\np2 <- penguins |> \n  ggplot(aes(x=culmen_depth_mm, \n             y = culmen_length_mm))+\n  geom_point(aes(colour=species))+\n  scale_color_manual(values=pal)+\n  theme_minimal()\n\np3 <- penguins |>     \n  group_by(sex,species) |> \n    summarise(n=n()) |> \n     drop_na(sex) |> \n     ggplot(aes(x=species, y=n)) + \n  geom_col(aes(fill=sex), \n               width=0.8,\n               position=position_dodge(width=0.9), \n               alpha=0.6)+\n     scale_fill_manual(values=c(\"darkorange1\", \"azure4\"))+\n     theme_classic()\n\n (p1+p2)/p3+\n  plot_layout(guides = \"collect\") "},{"path":"customisation-with-ggplot2.html","id":"fonts","chapter":"29 Customisation with ggplot2","heading":"29.6 Fonts","text":"can customise fonts used themes. computers able recognise families \"sans\", \"serif\", \"mono\", computers able access installed fonts name.easiest way add lots custom fonts showtext.second argument, family, optional. gives family name font used R. words, means name used refer font R need original name font. case, font Special Elite going special family.showtext_auto() must called indicate showtext going automatically invoked draw text whenever plot created.","code":"\nlibrary(showtext)\nfont_add_google(\"Special Elite\", family = \"special\")\nshowtext_auto()"},{"path":"customisation-with-ggplot2.html","id":"activity-replicate-this-figure","chapter":"29 Customisation with ggplot2","heading":"29.7 Activity: Replicate this figure","text":"\nclose can get replicating figure ?\n\nMake NEW script assignment - replicate_figure.R\n\nMake sure use tips links end chapter, \ndone save file\n","code":"\npal <- c(\n  \"Adelie\" = \"#FF8C00\", \n  \"Chinstrap\" = \"#A034F0\", \n  \"Gentoo\" = \"#159090\")\n\npenguins |> \n  ggplot(aes(x = species, y = body_mass_g, color = species, fill = species)) +\n      geom_boxplot(aes(fill = species),\n               colour = \"black\",\n        width = .5,\n        outlier.shape = NA,\n        alpha = .7)+\n  geom_jitter(width =.2,\n              shape = 21,\n              colour = \"white\")+\n  scale_fill_manual(values = pal)+\n  scale_colour_manual(values = pal)+\n  theme_classic()+\n  theme(legend.position = \"none\")+\n    labs(\n    x = \"\",\n    y = \"Body mass (g)\",\n    title = \"Body mass of brush-tailed penguins\",\n    subtitle = \"Box and jitter plot of body mass by species\")"},{"path":"customisation-with-ggplot2.html","id":"saving","chapter":"29 Customisation with ggplot2","heading":"29.8 Saving","text":"One easiest ways save figure made ggsave() function. default save last plot made screen.specify output path figures folder, provide file name. decided call plot plot (imaginative!) want save .PNG image file. can also specify resolution (dpi 300 good enough computer screens).\ngot far still time try one \nfollowing:\n\n\nMaking another type figure using penguins dataset, use \nreading use inspiration.\n\n\nMaking another type figure using penguins dataset, use \nreading use inspiration.\n\n\nUse data\n\n\nUse data\n","code":"\n# OUTPUT FIGURE TO FILE\n\nggsave(\"outputs/YYYYMMDD_ggplot_workshop_final_plot.png\", dpi=300)"},{"path":"customisation-with-ggplot2.html","id":"what-we-learned","chapter":"29 Customisation with ggplot2","heading":"29.8.1 What we learned","text":"learnedThe anatomy ggplotsThe anatomy ggplotsHow add geoms different layersHow add geoms different layersHow use colour, colour palettes, facets, labels themesHow use colour, colour palettes, facets, labels themesPutting together multiple figuresPutting together multiple figuresHow save export imagesHow save export images","code":""},{"path":"customisation-with-ggplot2.html","id":"further-reading-guides-and-tips-on-data-visualisation","chapter":"29 Customisation with ggplot2","heading":"29.9 Further Reading, Guides and tips on data visualisation","text":"R Cheat SheetsR Cheat SheetsFundamentals Data Visualization: book tells everything need know presenting figures accessbility clarityFundamentals Data Visualization: book tells everything need know presenting figures accessbility clarityBeautiful Plotting R: incredibly handy ggplot guide build improve figuresBeautiful Plotting R: incredibly handy ggplot guide build improve figuresThe ggplot2 book: original Hadley Wickham book ggplot2The ggplot2 book: original Hadley Wickham book ggplot2","code":""},{"path":"extensions-for-ggplot2.html","id":"extensions-for-ggplot2","chapter":"30 Extensions for ggplot2","heading":"30 Extensions for ggplot2","text":"tutorial scratched surface visualisation options available using R. provided advanced plots customisation options feeling confident content covered tutorial. However, plots give idea possible.Check https://exts.ggplot2.tidyverse.org/ full list approved extensions ggplot","code":""},{"path":"extensions-for-ggplot2.html","id":"ggdist","chapter":"30 Extensions for ggplot2","heading":"30.1 ggdist","text":"","code":""},{"path":"extensions-for-ggplot2.html","id":"rainclouds","chapter":"30 Extensions for ggplot2","heading":"30.1.1 Rainclouds","text":"Raincloud plots combine density plot, boxplot, raw data points, desired summary statistics complete visualisation data. called density plot plus raw data reminiscent rain cloud.","code":"\nlibrary(ggdist)\n\npenguins |> \n    ggplot(aes(x = species,\n               y = culmen_length_mm,\n              fill = species)) +\n  ggdist::stat_halfeye(\n    point_colour = NA,\n    .width = 0,\n    # shift raincloud up\n    justification = -.2)+\n  geom_boxplot(# remove outlier dots\n    outlier.shape = NA,\n    # shrink width of box\n    alpha = .4,\n    # fade box\n               width = .1)+\n  ggdist::stat_dots(aes(colour = species),\n                  # put dots underneath\n                    side = \"left\",\n                  # move position down\n                    justification = 1.1,\n                  # size of dots \n                    dotsize = .2,\n                    \n                  # adjust bins (grouping) of dots\n                    binwidth = .4)+\n  scale_fill_manual(values = pal) +\n  scale_colour_manual(values = pal)+\n  guides(fill = \"none\")+\n  coord_flip() # rotate figure"},{"path":"extensions-for-ggplot2.html","id":"interval-plots","chapter":"30 Extensions for ggplot2","heading":"30.1.2 Interval plots","text":"interval plot type data visualization used display intervals ranges associated data points. particularly useful visualizing uncertainty variability data. Interval plots can used represent various types intervals, confidence intervals, prediction intervals, kind range interval associated data.","code":"\npenguins |> \n  drop_na(sex) |> \n    ggplot(aes(x = species,\n               y = culmen_length_mm))+\n  ggdist::stat_interval(.width = c(.5, .66, .95))+\n  ggdist::stat_halfeye(aes(fill = sex),\n                       .width = 0,\n                       shape = 21,\n                       colour = \"white\",\n                       slab_alpha = .4,\n                       size = .5,\n                       position = position_nudge(x = .05))+\n  scale_color_viridis_d(option = \"mako\", direction = -1, end = .9)"},{"path":"extensions-for-ggplot2.html","id":"density","chapter":"30 Extensions for ggplot2","heading":"30.2 Density","text":"density plot data visualization technique used represent distribution continuous numeric variable. provides smoothed estimate probability density function (PDF) data, showing values concentrated sparse. Density plots particularly useful visualizing shape, central tendency, spread data.","code":"\nlibrary(ggdensity)\n\npenguins |>  \n    ggplot(aes(x = culmen_length_mm, \n               y = culmen_depth_mm,\n               colour = species)) +\n  geom_point(alpha = .2) +\n  ggdensity::geom_hdr_lines()+\n   scale_colour_manual(values = pal)"},{"path":"extensions-for-ggplot2.html","id":"ggridges-1","chapter":"30 Extensions for ggplot2","heading":"30.3 ggridges","text":"ridge plot data visualization technique similar density plot designed displaying multiple probability density distributions side side, allowing easier comparison different groups categories. Ridge plots particularly useful want visualize compare distribution multiple continuous variables data sets simultaneously.","code":"\nlibrary(ggridges)\n\npenguins |>  \n    ggplot(aes(x = culmen_length_mm, \n               y = species,\n               fill = species)) +\n  geom_density_ridges() + # use hjust and vjust to position text\n  scale_fill_manual(values = pal) +\n  scale_colour_manual(values = pal)+\n  theme(legend.position = \"none\")"},{"path":"extensions-for-ggplot2.html","id":"bump-charts","chapter":"30 Extensions for ggplot2","heading":"30.4 Bump charts","text":"bump chart, also known line chart path chart, data visualization technique used show ranking changes ranking entities (teams, players, products) time across different categories. Bump charts especially useful visualizing rise fall ranked items, making easy identify trends compare changes relative position.","code":"\nlibrary(ggbump)\n\npenguin_summary <- penguins |> \n  mutate(date_egg = dmy(date_egg)) |> \n  filter(clutch_completion == \"Yes\") |> \n  mutate(year = year(date_egg)) |> \n  group_by(species, year) |> \n  summarise(n = n())\n\npenguin_summary |>\n  ggplot(aes(x = year, \n             y = n,\n             colour = species))+\n  geom_point(size = 7)+\n  geom_bump()+\n  geom_text(data = penguin_summary |> filter(year == max(year)),\n                                             aes(x = year + 0.1,\n                                                 label = species,\n                                                  hjust = 0),\n            size = 5)+\n  scale_x_continuous(limits = c(2007, 2009.5),\n                     breaks = (2007:2009))+\n  labs(y = \"Total number of complete clutches\")+\n  scale_fill_manual(values = pal) +\n  scale_colour_manual(values = pal)+\n  theme(legend.position = \"none\")"},{"path":"extensions-for-ggplot2.html","id":"dumbell-charts","chapter":"30 Extensions for ggplot2","heading":"30.5 Dumbell charts","text":"dumbbell chart data visualization technique used compare two data points multiple categories entities. called \"dumbbell\" chart often resembles pair dumbbells, circles dots representing data points ends line connecting . Dumbbell charts useful comparing --values, two different groups, two related data points different categories entities.","code":"\nlibrary(ggalt)\n\nsummary_counts <- penguins |> \n  group_by(sex, species) |> \n  summarise(mean = mean(body_mass_g, na.rm = T)) |> \n  pivot_wider(names_from = sex, values_from = mean)\n\nggplot(summary_counts, \n       aes(y=species, x=FEMALE, xend=MALE)) +\n  geom_dumbbell(size=3, color=\"#e3e2e1\",\n                colour_x = \"#5b8124\", colour_xend = \"#bad744\") +\n  geom_text( x=summary_counts[[3,2]], y=3, aes(label=\"Female\"),\n             color=\"#9fb059\", size=3, vjust=-2, fontface=\"bold\")+\n  geom_text(x=summary_counts[[3,3]], y=3, aes(label=\"Male\"),\n             color=\"#bad744\", size=3, vjust=-2, fontface=\"bold\")+\n  labs(x = \"Body mass (g)\",\n       y = \"\")"},{"path":"extensions-for-ggplot2.html","id":"facets-1","chapter":"30 Extensions for ggplot2","heading":"30.6 Facets","text":"facet_nested() function ggh4x package used creating nested hierarchical faceting ggplot2 plots. Faceting process breaking data visualization multiple subplots panels based one categorical variables, allowing see data behaves within different categories. Nested faceting allows subdivide panels smaller panels, creating hierarchy facets.","code":"\nlibrary(ggh4x)\n\npenguins |> \n  mutate(Nester = ifelse(species==\"Gentoo\", \"Crustaceans\", \"Fish & Krill\")) |> \n  ggplot(aes(x = culmen_length_mm,\n             y = culmen_depth_mm,\n             colour = species))+\n  geom_point()+\n  facet_nested(~ Nester + species)+\n  scale_colour_manual(values = pal)+\n  theme(legend.position = \"none\")"},{"path":"extensions-for-ggplot2.html","id":"highlighting","chapter":"30 Extensions for ggplot2","heading":"30.7 Highlighting","text":"Using plot highlighting, gghighlight package R, can beneficial data visualization several reasons:Emphasizing Key Information: Plot highlighting allows draw attention specific data points groups interest. can helpful want highlight outliers, key observations, certain categories important data.Emphasizing Key Information: Plot highlighting allows draw attention specific data points groups interest. can helpful want highlight outliers, key observations, certain categories important data.Enhanced Interpretation: Highlighting specific elements plot can make easier viewers interpret understand data. reducing visual clutter emphasizing relevant information, can improve effectiveness data visualization.Enhanced Interpretation: Highlighting specific elements plot can make easier viewers interpret understand data. reducing visual clutter emphasizing relevant information, can improve effectiveness data visualization.Storytelling: Plot highlighting useful tool storytelling data visualization. can use guide viewer's attention convey main message story behind data.Storytelling: Plot highlighting useful tool storytelling data visualization. can use guide viewer's attention convey main message story behind data.Comparative Analysis: Highlighting allows compare specific data points groups easily. example, can highlight one group others demonstrate differences trends.Comparative Analysis: Highlighting allows compare specific data points groups easily. example, can highlight one group others demonstrate differences trends.","code":"\nlibrary(gghighlight)\n\npenguins |> \n  ggplot(aes(body_mass_g,\n             fill = species),\n         position = \"identity\")+\n  geom_histogram()+\n  gghighlight()+\n  scale_fill_manual(values = pal)+\n  facet_wrap(~ species)\nlibrary(ggbeeswarm)\nlibrary(gghighlight)\npenguins |> \n    ggplot(aes(x = species,\n               y = body_mass_g,\n               fill = species))+\n    geom_beeswarm(shape = 21, \n                  colour = \"white\")+\n    scale_fill_manual(values = pal)+\n    gghighlight(body_mass_g > 4000)"},{"path":"extensions-for-ggplot2.html","id":"text","chapter":"30 Extensions for ggplot2","heading":"30.8 Text","text":"Annotating chart text common valuable practice data visualization several important reasons:Provide Context: Text annotations help provide context background information data. explain chart represents, variables involved, meaning various data points patterns. context crucial viewers may familiar data chart.Provide Context: Text annotations help provide context background information data. explain chart represents, variables involved, meaning various data points patterns. context crucial viewers may familiar data chart.Highlight Key Points: Text annotations can used emphasize draw attention important findings insights data. can use annotations highlight specific data points, trends, outliers, notable features chart.Highlight Key Points: Text annotations can used emphasize draw attention important findings insights data. can use annotations highlight specific data points, trends, outliers, notable features chart.Label Data: Annotating chart labels helps identify individual data points, data series, categories. especially useful scatterplots, bar charts, types visualizations labeling individual elements important.Label Data: Annotating chart labels helps identify individual data points, data series, categories. especially useful scatterplots, bar charts, types visualizations labeling individual elements important.Clarify Relationships: Annotations can used clarify relationships data points groups. example, can add arrows labels indicate data points related causes certain patterns.Clarify Relationships: Annotations can used clarify relationships data points groups. example, can add arrows labels indicate data points related causes certain patterns.Provide Sources Citations: cases data comes external sources studies, annotations can used provide proper attribution citations give credit data sources.Provide Sources Citations: cases data comes external sources studies, annotations can used provide proper attribution citations give credit data sources.Explain Methodology: Annotations can also explain methodology statistical techniques used generate chart, important transparency trust data analysis.Explain Methodology: Annotations can also explain methodology statistical techniques used generate chart, important transparency trust data analysis.provide packages help text annotation:","code":""},{"path":"extensions-for-ggplot2.html","id":"ggforce","chapter":"30 Extensions for ggplot2","heading":"30.8.1 ggforce","text":"","code":"\npenguins |> \n    ggplot(\n        aes(x = culmen_length_mm,\n            y= body_mass_g,\n            colour = species)) +\n    geom_point(aes(fill = species), shape = 21, colour = \"white\") +\n    geom_smooth(method = \"lm\", se = FALSE,linetype = \"dashed\", alpha = .4)+\nggforce::geom_mark_ellipse(aes(\n    label = species,\n    filter = species == 'Adelie'),\n    con.colour  = \"#526A83\",\n    con.cap = 0,\n    con.arrow = arrow(ends = \"last\",\n                      length = unit(0.5, \"cm\")),\n    show.legend = FALSE) +\n    gghighlight(species == \"Adelie\")+\n  scale_colour_manual(values = pal)+\n  scale_fill_manual(values = pal)"},{"path":"extensions-for-ggplot2.html","id":"textpaths","chapter":"30 Extensions for ggplot2","heading":"30.8.2 textpaths","text":"","code":"\nlibrary(geomtextpath)\n\npenguins |> \n    ggplot(aes(x = culmen_length_mm, \n               colour = species,\n               label = species))+\n  geom_textdensity( hjust = 0.35, vjust = .1)+ # use hjust and vjust to position text\n  theme(legend.position = \"none\")"},{"path":"extensions-for-ggplot2.html","id":"ggtext","chapter":"30 Extensions for ggplot2","heading":"30.8.3 ggtext","text":"","code":"\nlibrary(ggtext)\n\n\npenguins |> \n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |> \n  group_by(species) |> \n    summarise(n=n()) |> \nggplot(aes(x = species,\n           y = n,\n           fill = species))+\n        geom_col()+\n  geom_label(aes(label = n),\n            fill = \"white\",\n            nudge_y = 1,\n            colour = \"black\",\n            fontface = \"bold\")+\n  labs(x = \"\",\n       y = \"Count\",\n       title = paste(\n         'There are almost half the observations on <br> <span style = \"color:#A034F0\">Chinstrap<\/span> penguins,  as there are <br> on <span style = \"color:#FF8C00\">Adelie<\/span> and <span style =\"color:#159090\">Gentoo<\/span>penguins'\n       ))+\n  scale_fill_manual(\n    # when reordering levels - be careful about keeping colours consistent!!! May need manually sorting\n    values = pal)+\n  coord_flip()+\n  scale_y_continuous(limits = c(0, 200))+\n  theme(legend.position = \"none\",\n        axis.text.y = element_text(\n      color = c( \"#A034F0\", \"#159090\", \"#FF8C00\")),\n      plot.title = element_markdown())"},{"path":"extensions-for-ggplot2.html","id":"scales","chapter":"30 Extensions for ggplot2","heading":"30.8.4 scales","text":"scalespackage provides much infrastructure underlies ggplot2’s scales, using allow customize transformations, breaks, labels used ggplot2. particularly good providing sensible labels apply transformations log scale.good example scales package action.distribution GDP per capita gapminder dataset heavily skewed, countries reporting less $10,000. result, scatterplot makes upside-L shape. Try sticking regression line ’ll get trouble.Fit onto log scale (R's standard log function natural log). get straighter line ugly axis labels.GGplot scale_x/y_log10 scale applues wrong transformation data - particular example little difference range values using log10 vs log transformation (see moment).can set whatever custom transformation wish","code":"\nlibrary(scales)\n\npenguins |>  \n    ggplot(aes(x = culmen_length_mm, \n               y = species,\n               fill = species)) +\n  geom_density_ridges() + # use hjust and vjust to position text\n  scale_fill_manual(values = pal) +\n  scale_colour_manual(values = pal)+\n  theme(legend.position = \"none\") +\n  scale_x_continuous(labels = label_number(\n    scale_cut = cut_si(\"mm\")))+\n  labs( x = \"Bill length\",\n        y = \"Species\")\nlibrary(gapminder)\ngapminder |> \n  filter(year == 2007) |> \nggplot(aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point() +\n  guides(color = \"none\") +\n  labs(title = \"GDP per capita\",\n       subtitle = \"GDP per capita raw values\")\ngapminder |> \n  filter(year == 2007) |> \nggplot(aes(x = log(gdpPercap), y = lifeExp, color = continent)) +\n  geom_point() +\n  guides(color = \"none\") +\n  labs(title = \"GDP per capita, natural log (base e)\",\n       subtitle = \"GDP per capita logged manually\")\ngapminder |> \n  filter(year == 2007) |> \nggplot(aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point() +\n  guides(color = \"none\") +\n  labs(title = \"GDP per capita, log (base 10)\",\n       subtitle = \"GDP per capita logged with scale\") +\n  scale_x_log10()\nlog_natural <- trans_new(\n  name = \"logn\",\n  transform = function(x) log(x),\n  inverse = function(x) exp(x),\n  breaks = log_breaks()\n)\n\ngapminder |> \n  filter(year == 2007) |> \nggplot(aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point() +\n  guides(color = \"none\") +\n  labs(title = \"GDP per capita, natural log (base e)\",\n       subtitle = \"GDP per capita logged manually\") +\n  scale_x_continuous(trans = log_natural,\n                     labels = label_dollar(accuracy = 1))"},{"path":"extensions-for-ggplot2.html","id":"maps","chapter":"30 Extensions for ggplot2","heading":"30.9 Maps","text":"Working maps can tricky. sf package provides functions work ggplot2, geom_sf(). rnaturalearth package provides high-quality mapping coordinates.","code":"\nlibrary(sf)          # for mapping geoms\nlibrary(rnaturalearth) # for map data\n\n# get and bind country data\nuk_sf <- ne_states(country = \"united kingdom\", returnclass = \"sf\")\nireland_sf <- ne_states(country = \"ireland\", returnclass = \"sf\")\nislands <- bind_rows(uk_sf, ireland_sf) %>%\n  filter(!is.na(geonunit))\n\n# set colours\ncountry_colours <- c(\"Scotland\" = \"#0962BA\",\n                     \"Wales\" = \"#00AC48\",\n                     \"England\" = \"#FF0000\",\n                     \"Northern Ireland\" = \"#FFCD2C\",\n                     \"Ireland\" = \"#F77613\")\n\nggplot() + \n  geom_sf(data = islands,\n          mapping = aes(fill = geonunit),\n          colour = NA,\n          alpha = 0.75) +\n  coord_sf(crs = sf::st_crs(4326),\n           xlim = c(-10.7, 2.1), \n           ylim = c(49.7, 61)) +\n  scale_fill_manual(name = \"Country\", \n                    values = country_colours)"},{"path":"extensions-for-ggplot2.html","id":"layouts-and-compositions","chapter":"30 Extensions for ggplot2","heading":"30.10 Layouts and compositions","text":"control layouts allow tailor appearance plot match specific needs preferences. can control every aspect plot's design, including arrangement facets, legends, titles, labels. need create complex composite plots combine multiple geoms facets, custom layouts enable precisely position arrange .","code":"\nlibrary(patchwork)\nlibrary(png)\nlibrary(ggpubr)\n\npenguin_pic <- png::readPNG(\"images/lter_penguins.png\")\n\npenguin_fig <- ggplot() +\n  background_image(penguin_pic)\ntext <- tibble(\n  x = 0, y = 0, label = 'Simpsons Paradox is a statistical phenomenon where an association between two variables in a population emerges, disappears or reverses when the population is divided into subpopulations such as <span style = \"color:#FF8C00\">Adelie<\/span>, <span style =\"color:#159090\">Gentoo<\/span>, and <span style = \"color:#A034F0\">Chinstrap<\/span> penguin species'\n)\n\n\n\npt <- ggplot(text, aes(x = x, y = y)) +\n  ggtext::geom_textbox(\n    aes(label = label),    # Map the 'label' column from the 'text' data to the text labels\n    box.color = NA,         # Make the text box border color transparent\n    width = unit(10, \"lines\"),  # Set the width of the text boxes to 15 lines\n    color = \"grey40\",       # Set the text color to a light gray\n    size = 3,             # Set the text size to 4 (adjust as needed)\n    lineheight = 1.4        # Set the line height for text within the boxes\n  ) +\n  # Customize the plot coordinate system\n  coord_cartesian(expand = FALSE, clip = \"off\") +\n\n  # Apply a theme with a blank (void) background\n  theme_void()\n\npt\nlayout <- \"\nAACCC\nAACCC\nBBDDD\nBBDDD\n\"\n\np1 <- ggplot(penguins, aes(x= culmen_length_mm, \n                     y= culmen_depth_mm)) +\n    geom_point()+\n  geom_smooth(method=\"lm\",\n              se=FALSE)+\n  theme(legend.position=\"none\")+\n    labs(x=\"Bill length (mm)\",\n         y=\"Bill depth (mm)\")\n\np2 <- ggplot(penguins, aes(x= culmen_length_mm, \n                     y= culmen_depth_mm,\n                     colour=species)) +\n    geom_point()+\n  geom_smooth(method=\"lm\",\n              se=FALSE)+\n  scale_colour_manual(values=pal)+\n  theme(legend.position=\"none\")+\n    labs(x=\"Bill length (mm)\",\n         y=\"Bill depth (mm)\")\n\np1 + p2 + \n  pt +  penguin_fig + \n  plot_layout(design = layout)"},{"path":"extensions-for-ggplot2.html","id":"activity-create-a-publication-style-multi-panel-figure","chapter":"30 Extensions for ggplot2","heading":"30.11 Activity: Create a Publication-Style Multi-Panel Figure","text":"Objective: Design create multi-panel data visualization figure style research publication. exercise challenge skills data visualization, data manipulation, creating complex figures.Steps:Choose Dataset: Select dataset suitable creating multi-panel figure. related scientific research topic, public data (e.g., government sources data repositories), dataset interests .Choose Dataset: Select dataset suitable creating multi-panel figure. related scientific research topic, public data (e.g., government sources data repositories), dataset interests .Data Preprocessing: Use dplyr tidyr preprocess data. may need aggregate, filter, reshape data fit structure want figure.Data Preprocessing: Use dplyr tidyr preprocess data. may need aggregate, filter, reshape data fit structure want figure.Design Figure: Decide structure multi-panel figure. create subplots facets represent different aspects data. example, might multiple box plots, scatter plots, visualizations arranged grid.Design Figure: Decide structure multi-panel figure. create subplots facets represent different aspects data. example, might multiple box plots, scatter plots, visualizations arranged grid.Create Plot: Use ggplot2 create individual panels subplots. Customize appearance panel, including labels, colors, titles.Create Plot: Use ggplot2 create individual panels subplots. Customize appearance panel, including labels, colors, titles.Combine Panels: Use patchwork package another method arrange individual panels single figure. may involve adjusting layout, labeling, legends make figure coherent.Combine Panels: Use patchwork package another method arrange individual panels single figure. may involve adjusting layout, labeling, legends make figure coherent.Add Annotations: Add relevant annotations figure, titles, subtitles, captions, necessary notes explain data results.Add Annotations: Add relevant annotations figure, titles, subtitles, captions, necessary notes explain data results.Customize Theme: Apply custom theme entire figure. can modify fonts, colors, grid lines, elements match style publication.Customize Theme: Apply custom theme entire figure. can modify fonts, colors, grid lines, elements match style publication.Tips:Plan figure carefully, considering story message want convey.\nExperiment different geoms, scales, themes achieve desired visual effect.\nUse effective data visualization principles, avoiding misleading scales, providing clear labels legends, ensuring figure accessible wide audience.","code":""},{"path":"custom-ggplot-themes.html","id":"custom-ggplot-themes","chapter":"31 Custom ggplot themes","heading":"31 Custom ggplot themes","text":"often case start default particular 'style' figures, may making several similar figures within research paper. Creating custom functions can extend making custom ggplot themes. probably already used theme variants theme_bw(), theme_void(), theme_minimal() - incredibly useful, might find still wish make consistent changes.addition title theme_classic() can improve style quicklyBut still want make changes, rather work one figure, potentially repeat several times subsequent figures, can decide make new function instead. See full breakdown arguments theme() function.\nNote using pre-set theme, modifying , \nimportant get order syntax correct e.g\n\ntheme_classic + theme() # correct\n\ntheme() + theme_classic() # work intended\nfunction set, can now use many figures wish. use future probably save unique script, clear title comments future use.easily use source(\"custom_theme_function.R\") make available scripts using.","code":"\nplot <- penguins |> \n  drop_na(sex) |> \nggplot(aes(x = species, y = culmen_length_mm, fill = species)) +\n  geom_violin(width = .5,\n              alpha = .4)+\n  geom_boxplot(width = .2)+\n  scale_fill_brewer(palette = \"Dark2\") \n\nplot\nplot+\n  ggtitle(\"Comparison of bill lengths by species in Palmer Penguins\")+\n  labs(x = \"\",\n       y = \"Bill length (mm)\")+\n  theme_classic()\n# custom theme sets defaults for font and size, but these can be changed without changing the function\ntheme_custom <- function(base_size=12, base_family=\"serif\"){\n  theme_classic(base_size = base_size, \n                base_family = base_family,\n                )  %+replace%\n# update theme minimal \ntheme(\n  # specify default settings for plot titles - use rel to set titles relative to base size\n  plot.title=element_text(size=rel(1.5),\n      face=\"bold\",\n      family=base_family),\n  #specify defaults for axis titles\n  axis.title=element_text(\n    size=rel(1),\n    family=base_family),\n  # specify position for y axis title\n  axis.title.y=element_text(angle = 90,\n                            margin = margin(r = 10, l= 10)),\n  # specify position for x axis title\n  axis.title.x = element_text(margin = margin(t = 10, b = 10)),\n  # set major y grid lines\n  panel.grid.major.y = element_line(colour=\"gray\", size=0.5),\n  # add axis lines\n  axis.line=element_line(),\n   # Adding a 0.5cm margin around the plot\n  plot.margin = unit(c(0.2, 0.5, 0.5, 0.5), units = , \"cm\"),    \n   # Setting the position for the legend\n  legend.position = \"none\"             \n)\n  \n}\nplot+\n  ggtitle(\"Comparison of bill lengths\\n by species in Palmer Penguins\")+\n  labs(x = \"\",\n       y = \"Bill length (mm)\")+\n  theme_custom()"},{"path":"making-tables-with-gt.html","id":"making-tables-with-gt","chapter":"32 Making tables with gt","heading":"32 Making tables with gt","text":"chapter, accomplish two main objectives:Acquire fundamental principles creating improved tables.Acquire fundamental principles creating improved tables.Apply principles using gt package.\nNaturally, put ideas practice, utilize fantastic penguins dataset palmerpenguins since preference penguins.Apply principles using gt package.\nNaturally, put ideas practice, utilize fantastic penguins dataset palmerpenguins since preference penguins.PROS: gt? grammar tables, like ggplot2, supports HTML, Latex RTF, followstidyverse conventions.CONS: Still quite new, syntax changing developing.tutorials use gt package helpers provided gtExtras.follow along run section code, look output Viewer PaneLet's use dataset tally penguins. counts provide us straightforward dataset use practicing table construction. need cleaned penguins dataframe Day One.real table, data might restructured better readability. nothing inherently wrong long (.e., containing many rows) data format, format excellent data analysis. However, table intended human readers, rather machines, likely opt wider format.six guidelines guide us make tables:Avoid gridlinesAvoid gridlinesUse better column namesUse better column namesAlign columnsAlign columnsUse groups instead repetitive columnsUse groups instead repetitive columnsRemove missing numbersRemove missing numbersAdd summariesAdd summaries","code":"\nlibrary(gt)\nlibrary(gtExtras)\npenguin_counts <- penguins |> \n  drop_na(sex) |> \n  mutate(year = as.character(year)) |> \n  mutate(sex = str_to_lower(sex)) |> \n  group_by(species, island, sex, year) |> \n  summarise(n = n(), .groups = \"drop\")\n\npenguin_counts\npenguin_counts_wider <- penguin_counts |> \n  pivot_wider(\n    names_from = c(species, sex),\n    values_from = n\n  ) |> \n  # Make missing numbers (NAs) into zero\n  mutate(across(.cols = -(1:2), ~replace_na(., replace = 0))) |> \n  arrange(island, year) \n\npenguin_counts_wider"},{"path":"making-tables-with-gt.html","id":"avoid-vertical-lines","chapter":"32 Making tables with gt","heading":"32.0.1 Avoid vertical lines","text":"Vertical lines can make data look cramped. Fortunately, appears gt adheres principle default. Hence, need supply dataset, penguin_counts_wider, gt() function.","code":"\npenguin_counts_wider |> \n  gt()"},{"path":"making-tables-with-gt.html","id":"use-better-column-names-and-make-them-stand-out","chapter":"32 Making tables with gt","heading":"32.0.2 Use better column names and make them stand out","text":"cols_*() functions allow modifications entire columns.can control column labels, cell alignment, column width placement plus can combine multiple columns cols_*() functions.modify column names, can employ \"layer\" named cols_layer(). Similar {ggplot2} operates layers, {gt} follows similar approach. make adjustments table, simply transfer one layer next, can done conveniently piping. understanding, can label columns just previously.However, labeling columns manner may effective approach. explore alternative method. First, can create known \"spanners,\" merged columns.can modify look table parts generally [tab_*()] functionsHere can generate column spanners tab_spanner() layers, one layer dedicated spanner. can also control text formatting labels Markdown HTML syntax. can used text gt table. applied md put spanners bold.can see, tab_spanner() always requires two arguments label columns. columns argument shown three ways get job done:Vector column numbersVector column numbersVector column namesVector column namestidyselect helperstidyselect helpersFirst, longer need species labels actual column names, spanners already provide information. update column names, can employ handy trick save us tedious typing.Begin creating named vector establishes connection original column names, include species labels, desired column names exclude labels. example:named vector place, proceed rename columns using .list argument cols_label()Finally add title table. can tab_header()wanted wrap simple function - headers titles change across tutorial:","code":"\npenguin_counts_wider |> \n  gt() |> \n  cols_label(\n    island = 'Island',\n    year = 'Year',\n    Adelie_female = 'Adelie (female)',\n    Adelie_male = 'Adelie (male)',\n    Chinstrap_female = 'Chinstrap (female)',\n    Chinstrap_male = 'Chinstrap (male)',\n    Gentoo_female = 'Gentoo (female)',\n    Gentoo_male = 'Gentoo (male)',\n  )\npenguin_counts_wider |> \n  gt() |> \n  cols_label(\n    island = 'Island',\n    year = 'Year',\n    Adelie_female = 'Adelie (female)',\n    Adelie_male = 'Adelie (male)',\n    Chinstrap_female = 'Chinstrap (female)',\n    Chinstrap_male = 'Chinstrap (male)',\n    Gentoo_female = 'Gentoo (female)',\n    Gentoo_male = 'Gentoo (male)',\n  ) |> \n  # md() function applies markdown styling - we can make text bold\n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male')\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  )\ndesired_colnames <- colnames(penguin_counts_wider) |> \n  str_remove(\"(Adelie|Gentoo|Chinstrap)_\") |> \n  str_to_title()\n\nnames(desired_colnames) <- names(penguin_counts_wider)\npenguin_counts_wider |> \n    gt() |> \n  cols_label(.list = desired_colnames) |> \n  # md() function applies markdown styling - we can make text bold\n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male')\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  )\npenguin_counts_wider |> \n    gt() |> \n  cols_label(.list = desired_colnames) |> \n  # md() function applies markdown styling - we can make text bold\n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male')\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  ) |> \n   tab_header(\n    title = 'Penguins of the Palmer Archipelago',\n    subtitle = 'Data is courtesy of the palmerpenguins R package by Allison Horst'\n  ) \nlabels_and_title <- function(gt_tbl){\n gt_tbl |> \n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male')\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  ) |> \n   tab_header(\n    title = 'Penguins of the Palmer Archipelago',\n    subtitle = 'Data is courtesy of the palmerpenguins R package by Allison Horst'\n  )\n}\n\n# This produces the same output\npenguin_counts_wider |> \n  gt() |> \n  cols_label(.list = desired_colnames)  |> \n  labels_and_title() "},{"path":"making-tables-with-gt.html","id":"alignment","chapter":"32 Making tables with gt","heading":"32.0.3 Alignment","text":"Align text within column using cols_align(). commonly left-align text varying length right-align numbers.default alignments make sense:Numbers Right: Numeric values, counts, usually aligned right aligns decimal points makes easier compare perform calculations numbers. also allows neat alignment digits, particularly important working large datasets.Numbers Right: Numeric values, counts, usually aligned right aligns decimal points makes easier compare perform calculations numbers. also allows neat alignment digits, particularly important working large datasets.Text Left: Text data, like character vectors, aligned left default. text decimal points numeric values compare, left-aligning text provides clean uniform appearance. makes start text easily scannable helps maintain readability, even lengthy text entries.Text Left: Text data, like character vectors, aligned left default. text decimal points numeric values compare, left-aligning text provides clean uniform appearance. makes start text easily scannable helps maintain readability, even lengthy text entries.Center Alignment Factors: Factors (categorical data) aligned center default. compromise left right alignment. factor's entries characters, represent categories often used grouping sorting. Center alignment ensures category labels visually centered available space, making easier identify category maintaining visually appealing table.Center Alignment Factors: Factors (categorical data) aligned center default. compromise left right alignment. factor's entries characters, represent categories often used grouping sorting. Center alignment ensures category labels visually centered available space, making easier identify category maintaining visually appealing table.default alignments well-established conventions table formatting help readers quickly interpret work tabular data. follow balance readability, aesthetics, nature data presented.Island currently coded factor, recode data, can use cols_align() layer:","code":"\npenguin_counts_wider |> \n  gt() |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title()  |> \n  cols_align(align = 'right', columns = 'year') |> \n  cols_align(\n    align = 'left', \n    columns = where(is.factor)\n  ) "},{"path":"making-tables-with-gt.html","id":"move-columns-around","chapter":"32 Making tables with gt","heading":"32.0.4 Move columns around","text":"Move columns start end wherever like cols_move_*() functions","code":"\npenguin_counts_wider |> \n  gt() |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title()  |> \n  cols_align(align = 'right', columns = 'year') |> \n  cols_align(\n    align = 'left', \n    columns = where(is.factor)\n  ) |> \n  cols_move_to_start(columns = vars(year))"},{"path":"making-tables-with-gt.html","id":"avoid-repetitive-information","chapter":"32 Making tables with gt","heading":"32.0.5 Avoid repetitive information","text":"Removing repetitive columns using additional rows group data can indeed enhance readability table. context gt package, achieving straightforward. can group_name_col() Specifying group use columns apply grouping :island label nice. easiest way add group names via string manipulation gt() called.","code":"\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title()  \npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title() "},{"path":"making-tables-with-gt.html","id":"remove-missing-numbers","chapter":"32 Making tables with gt","heading":"32.0.6 Remove missing numbers","text":"want remove zeroes table, use dplyr functionsOr can accomplish thing adding sub_zero() layer","code":"\npenguin_counts_wider |> \n    mutate(\n        island = as.character(island), \n        year = as.numeric(year),\n        island = paste0('Island: ', island)\n    ) |> \n    mutate(across(.cols = where(is.integer), .fns = ~ifelse(.x <= 0, \"-\", as.character(.) ))) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title() \npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title()  |> \n  sub_zero(zero_text = '-')"},{"path":"making-tables-with-gt.html","id":"add-summaries","chapter":"32 Making tables with gt","heading":"32.0.7 Add summaries","text":"think necessary even add summaries tables summary_rows().\nSub-zero seem work summaries, include workaround:","code":"\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title()  |> \n  sub_zero(zero_text = '-')|>\n   summary_rows(\n    groups = everything(),\n   fns = list(\n      \"Mean\" = ~na_if(mean(., na.rm = TRUE), 0),\n      \"Total\" = ~na_if(sum(., na.rm = TRUE), 0)\n    ),\n    fmt = list(~fmt_number(., decimals = 0)),\n    missing_text = \"-\")"},{"path":"making-tables-with-gt.html","id":"stylise","chapter":"32 Making tables with gt","heading":"32.0.8 Stylise","text":"additional information incorporated table, grown length, may ideal. address , can make table concise decreasing row heights.achieve , can adjust -called data_row.padding 2 pixels. can accomplish using tab_options() function, central layer styling table. Similarly, padding options available summary_row row_group. , good idea enhance table's appearance applying predefined theme using opt_stylize().","code":"\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title()  |> \n  sub_zero(zero_text = '-')|>\n   summary_rows(\n    groups = everything(),\n   fns = list(\n      \"Mean\" = ~na_if(mean(., na.rm = TRUE), 0),\n      \"Total\" = ~na_if(sum(., na.rm = TRUE), 0)\n    ),\n    fmt = list(~fmt_number(., decimals = 0)),\n    missing_text = \"-\") |> \n    tab_options(\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  opt_stylize(style = 6, color = 'gray')"},{"path":"making-tables-with-gt.html","id":"use-appropriate-colour","chapter":"32 Making tables with gt","heading":"32.0.9 Use appropriate colour","text":"far, table hasn’t used color. ’ll add now highlight outlier values.repeat code column, generate result shown ","code":"\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title()  |> \n  sub_zero(zero_text = '-')|>\n   summary_rows(\n    groups = everything(),\n   fns = list(\n      \"Mean\" = ~na_if(mean(., na.rm = TRUE), 0),\n      \"Total\" = ~na_if(sum(., na.rm = TRUE), 0)\n    ),\n    fmt = list(~fmt_number(., decimals = 0)),\n    missing_text = \"-\") |> \n    tab_options(\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n   )|> \n    tab_style(style = cell_text(color = \"orange\",\n                              weight = \"bold\"),\n            locations = cells_body(\n              columns = 3,\n             rows = which(penguin_counts_wider[,3] == max(penguin_counts_wider[,3])))\n            ) "},{"path":"making-tables-with-gt.html","id":"heatmap","chapter":"32 Making tables with gt","heading":"32.0.10 Heatmap","text":"can add heatmap cells clearly show differences. require us set colour palette apply conditional colouring using data_color()","code":"\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  labels_and_title()  |> \n  sub_zero(zero_text = '-')|>\n   summary_rows(\n    groups = everything(),\n   fns = list(\n      \"Mean\" = ~na_if(mean(., na.rm = TRUE), 0),\n      \"Total\" = ~na_if(sum(., na.rm = TRUE), 0)\n    ),\n    fmt = list(~fmt_number(., decimals = 0)),\n    missing_text = \"-\") |> \n    tab_options(\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n   )|>  \ndata_color(palette = c(\"#FEF0D9\", \"#990000\"), domain = c(0,30))"},{"path":"making-tables-with-gt.html","id":"data-visualisations","chapter":"32 Making tables with gt","heading":"32.0.11 Data visualisations","text":"chapter, ’re going learn add fancy elements like plots, icon images gt tables.can actually add ggplot want table. example, look penguins last chapter . ’s table weight distribution (visualized violin plot.)create table, let us begin basics. Let’s compute numeric values first.Next write function plot_violin_species(my_species) depends penguin species creates one violin plot.Notice set coordinate system plot full range data (regardless species). part important. Without trick, three plots share common x-axis.Ok, now function creates desired plots. Time apply table. work, need additional column can target. use mutate() add new column, text_transform() turn column images, finally .fn argument can supplied function iterated species map().","code":"\nfiltered_penguins <- palmerpenguins::penguins |>\n    filter(!is.na(sex))\n\npenguin_weights <- filtered_penguins |>\n  group_by(species) |>\n  summarise(\n    Min = min(body_mass_g),\n    Mean = mean(body_mass_g) |> round(digits = 2),\n    Max = max(body_mass_g)\n  ) |>\n  mutate(species = as.character(species)) |>\n  rename(Species = species)\n\npenguin_weights |>\n  gt() |>\n  tab_spanner(\n    label = 'Penguin\\'s Weight',\n    columns = -Species\n  ) \nplot_density_species <- function(my_species) {\n  full_range <- filtered_penguins |>\n    pull(body_mass_g) |>\n    range()\n\n  filtered_penguins |>\n    filter(species == my_species) |>\n    ggplot(aes(x = body_mass_g, y = species)) +\n    geom_violin(fill = 'dodgerblue4') +\n    theme_minimal() +\n    scale_y_discrete(breaks = NULL) +\n    scale_x_continuous(breaks = NULL) +\n    labs(x = element_blank(), y = element_blank()) +\n    coord_cartesian(xlim = full_range)\n}\nplot_density_species(\"Adelie\")\npenguin_weights |>\n  mutate(Distribution = Species) |> \n  gt() |>\n  tab_spanner(\n    label = 'Penguin\\'s Weight',\n    columns = -Species\n  ) |>\n  text_transform(\n    locations = cells_body(columns = 'Distribution'),\n    fn = function(column) {\n      map(column, plot_density_species) |>\n        ggplot_image(height = px(50), aspect_ratio = 3)\n    }\n  ) "},{"path":"making-tables-with-gt.html","id":"conclusion","chapter":"32 Making tables with gt","heading":"32.1 Conclusion","text":"Many tweaks made table quite subtle. Changes like removing excess gridlines, bolding header text, right-aligning numeric values, adjusting level precision can often go unnoticed, skip , table far less effective. final product isn’t flashy, communicate clearly.used gt package make high-quality table, ’ve repeatedly seen, package good defaults built . Often, don’t need change much code make effective tables. matter package use, ’s essential treat tables worthy just much thought kinds data visualization.Later ’ll learn create reports using R Markdown, can integrate tables directly final document.","code":""},{"path":"making-tables-with-gt.html","id":"reading-2","chapter":"32 Making tables with gt","heading":"32.2 Reading","text":"Consult following resources learn table design principles make high-quality tables gt package:\"gt package intro\"“Ten Guidelines Better Tables” Jon Schwabish (Journal Benefit-Cost Analysis, 2020), https://doi.org/10.1017/bca.2020.11“10+ Guidelines Better Tables R” Tom Mock (2020), https://themockup.blog/posts/2020-09-04-10-table-rules--r/","code":""},{"path":"getting-to-work-with-shiny.html","id":"getting-to-work-with-shiny","chapter":"33 Getting to work with Shiny","heading":"33 Getting to work with Shiny","text":"core, Shiny essentially R package, similar dplyr ggplot2. However, Shiny unique allows build web applications using R language, instead relying traditional web development technologies like JavaScript HTML5. R-based approach makes Shiny efficient choice creating web applications tailored data presentation analysis.illustrate, take look example basic Shiny app recreate today's tutorialShiny apps useful several purposes:Interactive Data Visualization Presentations Websites: Shiny apps allow create interactive data visualizations, can enhance presentations, reports, websites. Users can explore data, change parameters, see real-time updates, making information engaging informative.Sharing Results Collaborators: Shiny apps valuable sharing data analysis results collaborators, team members, clients. creating interactive dashboards tools, can make easier others interact understand data, even expertise R data analysis.Communicating Science Accessible Way: Shiny apps can powerful tool scientists, researchers, educators communicate complex scientific concepts research findings broader audience. provide accessible user-friendly interface explore understand data-driven insights.Bridging Gap R Users Non-R Users: Shiny acts bridge R users individuals may familiar R programming. Shiny, can create applications allow non-R users interact benefit R's data analysis capabilities without needing write R code .","code":""},{"path":"getting-to-work-with-shiny.html","id":"using-the-demo-app","chapter":"33 Getting to work with Shiny","heading":"33.1 Using the Demo App","text":"New project…\nFile menu, choose New Project.... see popup window like one . Choose New Directory.choose Shiny Web App","code":""},{"path":"getting-to-work-with-shiny.html","id":"run-the-app","chapter":"33 Getting to work with Shiny","heading":"33.1.1 Run the app","text":"Click Run App top right corner source pane. app open new window. Play slider watch histogram change.","code":""},{"path":"getting-to-work-with-shiny.html","id":"modify-the-demo-app","chapter":"33 Getting to work with Shiny","heading":"33.1.2 Modify the Demo App","text":"Now ’re going make series changes demo app ’s .can close app closing window browser tab ’s running , leave running edit code. multiple screens, ’s useful app open one screen code another.1. Change titleChange title \"First App\". Make sure title inside quotes whole quoted string inside parentheses. Save file.click Run App2. Change inputNow change input. Find function sliderInput() (line 21). first argument name can use code find value input, change just yet. second argument text displays slider. Change something else re-run app.\nSee can figure next three arguments \nsliderInput() . Change different integers, re-run app\nsee ’s changed.\narguments function sidebarPanel() just list things want display sidebar. add explanatory text paragraph sliderInput(), just use paragraph function p().3. Change layoutI like position explanatory text, can move text sidebar top page, just title. Try re-run app.4. Change coloursI'm also keen grey plot. can change plot colour inside hist()5. Change plotI prefer ggplots, make plot geom_histogram() instead hist() (great function really quick plots, visually appealing). Since need several functions ggplot2 package, need load package top script, just shiny package loaded:can replace code renderPlot() code .6.Plot new thingsThe faithful dataset includes two columns: eruptions waiting. plotting waiting variable, wanted plot eruptions variable instead?\nTry plotting eruption time (eruptions) instead waiting\ntime. just change one word ggplot() update x-axis\nlabel.\ncan add another input widget let user switch plotting eruption time wait time. learn different input options Section 3. need toggle two options, can use either radio buttons select box. Radio buttons probably best options user want see time decide.Add following code first argument sidebarPanel(), just takes list different widgets. radioButtons() widget using. set four arguments:inputId: unique identifier use later code find value widgetinputId: unique identifier use later code find value widgetlabel: text display userlabel: text display userchoices: list choices format c(\"label1\" = \"value1\", \"label2\" = \"value2\", ...)choices: list choices format c(\"label1\" = \"value1\", \"label2\" = \"value2\", ...)selected: value default choiceselected: value default choiceFor choices, label gets shown user value gets used code (can , often want user label descriptive).Save re-run app.radio button interface now. can click options switch button, anything plot yet. need edit plot-generating code make happen.First, need change x-axis label depending graphing. use /else statement set variable xlabel one thing input$display_var equivalent \"eruptions\", something else equivalent \"waiting\". Put code beginning code block renderPlot() (line output$distPlot <- renderPlot({).edit ggplot() use new label plot correct column. variable input$display_var gives user-input value widget called \"display_var\".Re-run app see can change data x-axis label new widget.","code":"\nsliderInput(\"bins\",\n            \"Number of bins:\",\n            min = 0,\n            max = 50,\n            value = 30)\nsidebarPanel(\n   p(\"I am explaining this perfectly\"),\n   sliderInput(\"bins\",\n               \"Choose the best bin number:\",\n               min = 10,\n               max = 40,\n               value = 25)\n)# Application title\ntitlePanel(\"My First App\"),\n\np(\"I am explaining this perfectly\"),\n\n# Sidebar with a slider input for number of bins\nsidebarLayout(...)\n# draw the histogram with the specified number of bins\nhist(x, breaks = bins, col = 'skyblue', border = 'grey30')\nlibrary(shiny)\nlibrary(ggplot2)\noutput$distPlot <- renderPlot({\n  # create plot\n  ggplot(faithful, aes(waiting)) +\n    geom_histogram(bins = input$bins,\n                   fill = \"steelblue3\",\n                   colour = \"grey30\") +\n    xlab(\"What are we even plotting here?\") +\n    theme_minimal()\n}) radioButtons(inputId = \"display_var\",\n              label = \"Which variable to display\",\n              choices = c(\"Waiting time to next eruption\" = \"waiting\",\n                          \"Eruption time\" = \"eruptions\"),\n              selected = \"waiting\"\n ),\n# set x-axis label depending on the value of display_var\nif (input$display_var == \"eruptions\") {\n  xlabel <- \"Eruption Time (in minutes)\"\n} else if (input$display_var == \"waiting\") {\n  xlabel <- \"Waiting Time to Next Eruption (in minutes)\"\n}\n# create plot\nggplot(faithful, aes(.data[[input$display_var]])) +\n  geom_histogram(bins = input$bins,\n                 fill = \"steelblue3\",\n                 colour = \"grey30\") +\n  xlab(xlabel) +\n  theme_minimal()"},{"path":"make-our-own-app.html","id":"make-our-own-app","chapter":"34 Make our own App","heading":"34 Make our own App","text":"Now seen basic Shiny app actin, return beginning create app.R file. basic app.R consists five key parts:Package Loading: top script, load necessary R packages app function. shiny requirement, can add others like dplyr ggplot2 needed. packages missing, encounter error, ensure installed.Data Loading: Next, load data necessary app. typically involves reading datasets R objects. Ensure data file source available specified format.UI Object: Create object called ui defines app's user interface. specifies app appear web browser. fluidPage() function creates responsive layout adjusts browser window's size. UI code go inside curly braces.Server Object: Create another object called server, contains app's logic. , specify app computes creates plots, tables, maps, content based user's input. app's logic code placed inside server function.App Execution: Finally, include command end app.R run app. informs Shiny user interface defined ui object, server logic (data, plots, tables, etc.) defined server object.create Shiny app, remove example code generated automatically created app.R replace structure provided . Check final app.R script resembles following:following steps, basic structure Shiny app place, ready add UI elements server logic create interactive web application.","code":"\n# Load the required packages\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)  # Contains readr, dplyr and ggplot2\nlibrary(palmerpenguins)    # The source of your data\n# Load the data\npenguins <- as_tibble(penguins)\n# Define the UI\nui <- fluidPage(\n  # Your UI components will be defined here\n)\n# Define the server logic\nserver <- function(input, output) {\n  # Your server logic will be defined here\n}\n# Run the app\nshinyApp(ui = ui, server = server)\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# ui.R ----\nui <- fluidPage(\n  # Your UI components will be defined here\n)\n\n# server.R ----\nserver <- function(input, output) {\n  # Your server logic will be defined here\n}\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"inputs.html","id":"inputs","chapter":"35 Inputs","heading":"35 Inputs","text":"Now basic structure Shiny app, can start adding input output elements make interactive. example app includes four input widgets: selectInput genotype, another selectInput histogram color, sliderInput number bins, textInput arbitrary text. widgets provide information display histogram accompanying table. example app, widgets placed sidebarPanel. can incorporate widgets app:code , added input widgets sidebarPanel section ui object. widgets allow users select genotype, choose histogram color, set number bins histogram, add arbitrary text.take moment understand selectInput() function configured:inputId = \"species\": unique identifier input element. crucial later referencing input within app script.label = \"1. Select species\": label want display input app. provides clarity users describing purpose input.choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", ...): , define list choices presented dropdown menu. choice two parts: display label (left) corresponding value app collect use output (right).selected = \"grey\": specifies default value selected dropdown menu app first loaded. example, 'grey' preselected.Now grasped selectInput() works, use customize Shiny app .\"explanation clarifies purpose settings selectInput() function, can use understanding configure input elements Shiny app. summary different Input functions available Shiny","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\")\n    ),\n    mainPanel(\n      # Output elements go here\n    )\n  )\n)\n# server.R ----\nserver <- function(input, output) {\n  # Your server logic will be defined here\n\n}\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"inputs.html","id":"textinput","chapter":"35 Inputs","heading":"35.0.1 textInput","text":"textInput creates one-line box short text input. first argument, inputId (argument name usually omitted), needs unique string use another input output app.\nExperiment values arg(\"label\"),\narg(\"value\"), arg(\"width\"), \narg(\"placeholder\") see .\n","code":"\ndemo_text <- \n  textInput(\"demo_text\", \n            label = \"Name\", \n            value = \"\", \n            width = \"100%\",\n            placeholder = \"Your Name\")"},{"path":"inputs.html","id":"textareainput","chapter":"35 Inputs","heading":"35.0.2 textAreaInput","text":"\"textAreaInput\" creates multi-line box longer text input.arg(\"inputId\") widget ?textAreaInputdemo_textareaBiography","code":"\ndemo_textarea <- \n  textAreaInput(\"demo_textarea\", \n                label = \"Biography\", \n                value = \"\",\n                width = \"100%\",\n                rows = 5, \n                placeholder = \"Tell us something interesting about you.\")"},{"path":"inputs.html","id":"selectinput","chapter":"35 Inputs","heading":"35.0.3 selectInput","text":"selectInput creates drop-menu. Set first arg(\"choice\") \"\" default NA. choices named \"list\" \"vector\", names shown values recorded. choices named, displayed recorded values .set arg(\"multiple\") dt(TRUE), can also make select users can choose multiple options.","code":"\ndemo_select <- \n  selectInput(\"demo_select\", \n              label = \"Do you like Shiny?\", \n              choices = list(\"\", \n                             \"Yes, I do\" = \"y\", \n                             \"No, I don't\" = \"n\"),\n              selected = NULL,\n              width = \"100%\")\ngenders <- list( # no blank needed\n  \"Non-binary\" = \"nb\",\n  \"Male\" = \"m\",\n  \"Female\" = \"f\",\n  \"Prefer not to say\" = \"p\"\n)\n\ndemo_select_multi <- \n  selectInput(\"demo_select2\", \n              label = \"Gender\", \n              choices = genders,\n              selected = NULL,\n              multiple = TRUE, \n              selectize = FALSE,\n              size = 5)"},{"path":"inputs.html","id":"checkboxgroupinput","chapter":"35 Inputs","heading":"35.0.4 checkboxGroupInput","text":"However, interface almost always looks better checkboxGroupInput.can get checkboxes display horizontally instead vertically?display = 'horizontal'class = 'horiz'inline = TRUEclass = 'shiny-input-container-inline'","code":"\ndemo_cbgi <-\n  checkboxGroupInput(\"demo_cbgi\",\n                     label = \"Gender)\",\n                     choices = genders)"},{"path":"inputs.html","id":"checkboxinput","chapter":"35 Inputs","heading":"35.0.5 checkboxInput","text":"can also make single checkbox checkboxInput. value dt(TRUE) checked dt(FALSE) .sliderInput allows choose numbers min max value.\nhappens change arg(\"value\") \narg(\"step\")? Try changing arg(\"value\") \nc(10, 20).\n","code":"\ndemo_cb <- checkboxInput(\"demo_cb\",\n                         label = \"I love R\",\n                         value = TRUE)\ndemo_slider <- sliderInput(\"demo_slider\",\n                           label = \"Age\",\n                           min = 0,\n                           max = 100,\n                           value = 0,\n                           step = 1,\n                           width = \"100%\")"},{"path":"inputs.html","id":"radiobuttons","chapter":"35 Inputs","heading":"35.0.6 radioButtons","text":"want users able choose one option small number short options, radioButton good interface.\nRadio buttons default selecting first item unless set\narg(\"selected\") choice value \ncharacter(0) start selection.\n","code":"\ndemo_radio <- radioButtons(\"demo_radio\",\n                           label = \"Choose one\",\n                           choices = c(\"Cats\", \"Dogs\"),\n                           selected = character(0),\n                           inline = TRUE)"},{"path":"inputs.html","id":"dateinput","chapter":"35 Inputs","heading":"35.0.7 dateInput","text":"find date interface little clunky, ...\nIMHO, default dt(\"yyyy-mm-dd\") best\nsorts chronological order.\nset arg(\"format\") order display dates like \"Sunday July 4, 2021\"?D M d, YDD MM d, yyyyDAY MONTH day, YEARD MM dd, yyyy","code":"\ndemo_date <- dateInput(\"demo_date\",\n                       label = \"What is your birth date?\",\n                       min = \"1900-01-01\",\n                       max = Sys.Date(),\n                       format = \"yyyy-mm-dd\",\n                       startview = \"year\")"},{"path":"inputs.html","id":"fileinput","chapter":"35 Inputs","heading":"35.0.8 fileInput","text":"Users can upload one files fileInput. argument accept lets limit certain file types, browsers can bypass requirement, fool-proof.set arg(\"accept\") accept image file?image/*.jpgjpgimages.imgNext, need implement server logic output elements server.R section. server logic define inputs affect display histogram table, require additional code specific application's requirements.Remember Shiny allows create reactive expressions functions respond changes input values. can use reactive expressions generate histogram associated table based user input.proceed, can add details server.R handle inputs create corresponding outputs.","code":"\ndemo_file <- fileInput(\"demo_file\",\n                       label = \"Upload a data table\",\n                       multiple = FALSE,\n                       accept = c(\".csv\", \".tsv\"),\n                       buttonLabel = \"Upload\")"},{"path":"inputs.html","id":"exercise-7","chapter":"35 Inputs","heading":"35.1 Exercise","text":"1. Save file progress penguins app using code start chapter","code":""},{"path":"outputs.html","id":"outputs","chapter":"36 Outputs","heading":"36 Outputs","text":"Output ways Shiny app can dynamically display information user. user interface (UI), create outputs IDs reference associated rendering function inside server function. Check outputs demo R team Glasgow, look different functions text ...","code":""},{"path":"outputs.html","id":"text-1","chapter":"36 Outputs","heading":"36.1 Text","text":"textOutput defaults text inside generic <span> <div>.renderText replaces text linked element returned string.use verbatimTextOutput UI (change render function), show output fixed-width font. can good code text want user copy.","code":"\n# in the UI function\ntextOutput(\"demo_text\", container = tags$h3)\n# in the server function\n  output$demo_text <- renderText({\n    paste(\"Figure 1.\", input$species, input$text)\n  })\n# in the UI function\nverbatimTextOutput(\"demo_verbatim\")\n\n# in the server function\n  output$demo_verbatim <- renderText({\n  code <-\n    paste0(\"penguins_filtered <- penguins %>%\n      filter(species == '\", input$species,\"')\n    \n    ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n      geom_histogram(fill = '\", input$colour, \"', show.legend = FALSE, bins = \", input$bin, \") +\n      theme_minimal()\")\n  \n  code\n})"},{"path":"outputs.html","id":"plots","chapter":"36 Outputs","heading":"36.2 Plots","text":"plotOutput displays plots made base R plotting functions (e.g., \"plot\", hist) ggplot2 functions.default value width?100%400px4005in7inWhat default value height?100%400px4005in7in\nwant create dynamic plots change input, note \nneed use y = .data[[input\\(y]]<\/code> inside <code>aes<\/code>, instead just <code>y = input\\)y.\n","code":"\n# in the UI function\nplotOutput(\"demo_plot\", width = \"500px\", height=\"300px\")\n# in the server function\n  output$demo_plot <- renderPlot({\n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n    ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n      geom_histogram(fill = input$colour, show.legend = FALSE, bins = input$bin) +\n      labs(fill = \"Color\") +\n      theme_minimal()\n  })"},{"path":"outputs.html","id":"images","chapter":"36 Outputs","heading":"36.3 Images","text":"imageOutput takes arguments plotOutput. can leave width height defaults going set values render function.renderImage needs return named list least src image path. can also set width height (numeric values pixels), class alt (alt-text screen readers).\ndeleteFile argument currently optional, \ntriggers periodic warnings won’t optional future. \nset TRUE ’re making temporary file\n(stops unneeded plots using memory) FALSE \n’re referencing file previously saved.\n","code":"\n# in the UI function\nimageOutput(\"demo_image\")\n# in the server function\noutput$demo_image <- renderImage({\n    list(src = \"images/penguin.jpg\",\n         width = 100,\n         height = 100,\n         alt = \"A flower\")\n}, deleteFile = FALSE)"},{"path":"outputs.html","id":"data-tables","chapter":"36 Outputs","heading":"36.4 Data Tables","text":"Display table using tableOutput.paired DT::renderDataTable, makes table data frame returns.\nNote need use .data[[input\\(y]]<\/code> inside <code>dplyr::summarise<\/code>, instead just <code>input\\)y \ndynamically choose variable summarise.\nmuch prefer DT::dataTableOutput basic shiny package dataTableOutput renderDataTable functions, can buggy. versions DT package better many additional functions, use .\ncan use DT synonyms make sure ’re \naccidentally using shiny versions, don’t \noptions.\n","code":"\n# in the UI function\ntableOutput(\"demo_table\")\n# in the server function\n  output$demo_table <- DT::renderDataTable({\n   penguins  |> \n      filter(species == input$species) |> \n    summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n})"},{"path":"outputs.html","id":"emphasis","chapter":"36 Outputs","heading":"36.5 Emphasis","text":"can use basic HTML start customising appearance emphasis - later use bslib package give us lots easy customisation:","code":"  \np(\"p creates a paragraph of text.\"),\n\n      \n      p(\"A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.\", style = \"font-family: 'times'; font-si16pt\"),\n      \n      strong(\"strong() makes bold text.\"),\n      \n      em(\"em() creates italicized (i.e, emphasized) text.\"),\n      \n      br(),\n      \n      code(\"code displays your text similar to computer code\"),\n      \n      div(\"div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div\", style = \"color:blue\"),\n      \n      br(),\n      \n      p(\"span does the same thing as div, but it works with\",\n        span(\"groups of words\", style = \"color:blue\"),\n        \"that appear inside a paragraph.\"),\n"},{"path":"outputs.html","id":"exercise-8","chapter":"36 Outputs","heading":"36.6 Exercise","text":"Complete app adding appropriate outputs file:","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\")\n    ),\n    mainPanel(\n      # Output elements go here\n        \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")), # emphasise text\n    textOutput(\"demo_text\")),\n  \n        plotOutput(\"demo_plot\", width = \"500px\", height=\"300px\"),\n        \n        DT::dataTableOutput(\"demo_table\",\n                    width = \"50%\",\n                    height = \"auto\")\n    )\n  )\n)\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \n\n  output$demo_sp <- renderText({\n    paste(\"Figure 1.\", input$species)\n  })\n  \noutput$demo_text <- renderText({\n  (input$text)\n})\n   \n    \n  output$demo_plot <- renderPlot({\n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n    ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n      geom_histogram(fill = input$colour, show.legend = FALSE, bins = input$bin) +\n      labs(fill = \"Color\") +\n      theme_minimal()\n  })\n  \n  output$demo_table <- DT::renderDataTable({\n   penguins |>\n      filter(species == input$species) |> \n    summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n})\n  \n}\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"reactive.html","id":"reactive","chapter":"37 Reactive","heading":"37 Reactive","text":"Reactivity Shiny determines code server() gets run . types objects, input object objects made reactiveValues(), can trigger types functions run whenever change.example move data filtering outside renderPlot(), get error message like \"access reactive value outside reactive consumer.\" means input values can read inside certain functions, like reactive(), observeEvent(), render function like renderPlot().However, can put data filtering inside reactive(). means whenever input inside function changes, code run update value data(). can useful need recalculate data table time inputs change, use one function.common error trying use data title object instead function. Notice first argument ggplot longer data, data() set value data data(newdata), data <- newdata. now, just remember quirk shiny.","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\")\n    ),\n    mainPanel(\n      # Output elements go here\n        \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n  \n        plotOutput(\"demo_plot\", width = \"500px\", height=\"300px\"),\n        \n        DT::dataTableOutput(\"demo_table\",\n                    width = \"50%\",\n                    height = \"auto\")\n    )\n  )\n)\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \npenguins_filtered <- penguins |>\n      filter(species == input$species) \n  \n  output$demo_sp <- renderText({\n    paste(\"Figure 1.\", input$species)\n  })\n  \noutput$demo_text <- renderText({\n  (input$text) # here to trigger the function\n})\n   \n\n    \n  output$demo_plot <- renderPlot({\n    \n    ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n      geom_histogram(fill = input$colour, show.legend = FALSE, bins = input$bin) +\n      labs(fill = \"Color\") +\n      theme_minimal()\n  })\n  \n  output$demo_table <- DT::renderDataTable({\n   penguins_filtered |> \n    summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n})\n  \n}\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)Error in filter(., species == input$species) : \n  ℹ In argument: `species == input$species`.\nCaused by error in `input$species`:\n! Can't access reactive value 'species' outside of reactive consumer.\nℹ Do you need to wrap inside reactive() or observe()?\n\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n \n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\")\n    ),\n    mainPanel(\n      # Output elements go here\n        \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n  \n        plotOutput(\"demo_plot\", width = \"500px\", height=\"300px\"),\n        \n        DT::dataTableOutput(\"demo_table\",\n                    width = \"50%\",\n                    height = \"auto\")\n    )\n  )\n)\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \npenguins_filtered <- reactive({\n  penguins |>\n      filter(species == input$species)\n})\n\n  output$demo_sp <- renderText({\n    paste(\"Figure 1.\", input$species)\n  })\n  \noutput$demo_text <- renderText({\n  (input$text)\n})\n   \n\n    \n  output$demo_plot <- renderPlot({\n    \n    ggplot(penguins_filtered(), aes(x = flipper_length_mm)) +\n      geom_histogram(fill = input$colour, show.legend = FALSE, bins = input$bin) +\n      labs(fill = \"Color\") +\n      theme_minimal()\n  })\n  \n  output$demo_table <- DT::renderDataTable({\n   \n    penguins_filtered() |> \n    summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n})\n  \n}\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"reactive.html","id":"observable","chapter":"37 Reactive","heading":"37.1 Observable","text":"want update things update button clicked, whenever user changes option?observeEvent(). function runs code whenever value first argument changes. reactive values inside function, trigger code run change.","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n \n\n# ui.R ----\nui <- fluidPage(\n  sidebarLayout(\n     sidebarPanel(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\"),\n      demo_button <- actionButton(\"update\", \"Plot\")\n    ),\n    mainPanel(\n      # Output elements go here\n        \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n  \n        plotOutput(\"demo_plot\", width = \"500px\", height=\"300px\"),\n        \n        DT::dataTableOutput(\"demo_table\",\n                    width = \"50%\",\n                    height = \"auto\")\n    )\n  )\n)\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \n \n\n  observeEvent(input$update, {\n    \n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n     bins <- input$bin\n     \n     colour <- input$colour\n \n\n    output$demo_sp <- renderText({\n      paste(\"Figure 1.\", input$species)\n    })\n\n    output$demo_text <- renderText({\n      (input$text)\n    })\n\n    output$demo_plot <- renderPlot({\n        ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n        geom_histogram(fill = colour, show.legend = FALSE, bins = bins) +\n        labs(fill = \"Color\") +\n        theme_minimal()\n    })\n\n    output$demo_table <- DT::renderDataTable({\n      penguins_filtered |> \n        summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n    })\n  })\n  \n}\n\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"reactive.html","id":"exercise-9","chapter":"37 Reactive","heading":"37.2 Exercise","text":"Run code. things now updated plot button?","code":""},{"path":"shiny-dashboards.html","id":"shiny-dashboards","chapter":"38 Shiny Dashboards","heading":"38 Shiny Dashboards","text":"bslib R package extends Bootstrap 4 allows customize appearance style Shiny applications R Markdown documents. bslib, can easily modify look feel Shiny apps defining custom themes, colors, fonts, visual aspects.provides flexible way create consistent visually appealing design Shiny applications without write extensive CSS code.can use bslib functions like bs_theme(), define apply custom styles Shiny app.","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\nlibrary(bslib)\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# Calculate column means for the value boxes\nmeans <- penguins |> \n  group_by(species) |> \n  summarise(mean = round(mean(flipper_length_mm, na.rm = T), 2))\n\n\ntheme <- bs_theme()\n\n# ui.R ----\nui <- page_sidebar(\n  theme = bs_theme(),\n  title = \"Penguins flipper dashboard\",\n  sidebar = sidebar(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\"),\n      demo_button <- actionButton(\"update\", \"Plot\")\n    )\n  ,\n   layout_columns(\n    fill = FALSE,\n    value_box(\n      title = \"Adelie Flipper Length\",\n      value = scales::unit_format(unit = \"mm\")(means[[1,2]]),\n      showcase = bsicons::bs_icon(\"align-bottom\"),\n      theme_color = \"grey\"\n    ),\n    value_box(\n      title = \"Chinstrap Flipper\",\n      value = scales::unit_format(unit = \"mm\")(means[[2,2]]),\n      showcase = bsicons::bs_icon(\"align-center\"),\n      theme_color = \"grey\"\n    ),\n value_box(\n      title = \"Gentoo Flipper Length\",\n      value = scales::unit_format(unit = \"mm\")(means[[3,2]]),\n      showcase = bsicons::bs_icon(\"align-top\"),\n      theme_color = \"grey\"\n    )\n  ),\n    \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n \n      # Output elements go here\n      layout_columns(\n    card(\n      full_screen = TRUE,\n      card_header(\"Plot\"),\n      plotOutput(\"demo_plot\")\n    ),\n    card(\n      full_screen = TRUE,\n      card_header(\"Table\"),\n      DT::dataTableOutput(\"demo_table\",\n                    width = \"100%\",\n                    height = \"auto\")\n    )  \n)\n)\n  \n\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \n\n\n  observeEvent(input$update, {\n    \n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n     bins <- input$bin\n     \n     colour <- input$colour\n \n\n    output$demo_sp <- renderText({\n      paste(\"Figure 1.\", input$species)\n    })\n\n    output$demo_text <- renderText({\n      (input$text)\n    })\n\n    output$demo_plot <- renderPlot({\n        ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n        geom_histogram(fill = colour, show.legend = FALSE, bins = bins) +\n        labs(fill = \"Color\") +\n        theme_minimal(base_size = 16)\n    })\n\n    output$demo_table <- DT::renderDataTable({\n      penguins_filtered |> \n        summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n    })\n  })\n  \n}\n\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"shiny-dashboards.html","id":"themable-dashboards","chapter":"38 Shiny Dashboards","heading":"38.0.1 Themable Dashboards","text":"Adding bsthemer() function server adds real time theme changes dashboards. Play parameters see updated bstheme code produced console. Make note can add directly bs_theme() pick permanent style!","code":"# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\nlibrary(bslib)\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n# Calculate column means for the value boxes\nmeans <- penguins |> \n  group_by(species) |> \n  summarise(mean = round(mean(flipper_length_mm, na.rm = T), 2))\n\n\n# ui.R ----\nui <- page_sidebar(\n  title = \"Penguins flipper dashboard\",\n  sidebar = sidebar(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\"),\n      demo_button <- actionButton(\"update\", \"Plot\")\n    )\n  ,\n   layout_columns(\n    fill = FALSE,\n    value_box(\n      title = \"Adelie Flipper Length\",\n      value = scales::unit_format(unit = \"mm\")(means[[1,2]]),\n      showcase = bsicons::bs_icon(\"align-bottom\"),\n      theme_color = \"grey\"\n    ),\n    value_box(\n      title = \"Chinstrap Flipper\",\n      value = scales::unit_format(unit = \"mm\")(means[[2,2]]),\n      showcase = bsicons::bs_icon(\"align-center\"),\n      theme_color = \"grey\"\n    ),\n value_box(\n      title = \"Gentoo Flipper Length\",\n      value = scales::unit_format(unit = \"mm\")(means[[3,2]]),\n      showcase = bsicons::bs_icon(\"align-top\"),\n      theme_color = \"grey\"\n    )\n  ),\n    \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n \n      # Output elements go here\n      layout_columns(\n    card(\n      full_screen = TRUE,\n      card_header(\"Plot\"),\n      plotOutput(\"demo_plot\")\n    ),\n    card(\n      full_screen = TRUE,\n      card_header(\"Table\"),\n      DT::dataTableOutput(\"demo_table\",\n                    width = \"100%\",\n                    height = \"auto\")\n    )  \n)\n)\n  \n\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  # run this get dynamic theme tools  \n  bs_themer()\n\n# Turn on thematic for theme-matched plots\nthematic::thematic_shiny(font = \"auto\")\n\n  observeEvent(input$update, {\n    \n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n     bins <- input$bin\n     \n     colour <- input$colour\n \n\n    output$demo_sp <- renderText({\n      paste(\"Figure 1.\", input$species)\n    })\n\n    output$demo_text <- renderText({\n      (input$text)\n    })\n\n    output$demo_plot <- renderPlot({\n        ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n        geom_histogram(fill = colour, colour = \"black\", show.legend = FALSE, bins = bins) +\n        labs(fill = \"Color\") +\n    })\n\n    output$demo_table <- DT::renderDataTable({\n      penguins_filtered |> \n        summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n    })\n  })\n  \n}\n\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"shiny-dashboards.html","id":"updating-your-theme","chapter":"38 Shiny Dashboards","heading":"38.0.2 Updating your theme","text":"can now update bstheme() remove bsthemer dynamic interaction line. extensively modified app - can add thematic::thematic_shiny() server plots autothemed settings app.","code":"\n# Packages ----\nlibrary(shiny)       # Essential for running any Shiny app\nlibrary(tidyverse)\nlibrary(palmerpenguins)    # The source of your data\nlibrary(bslib)\n\n# Load the data\npenguins <- as_tibble(penguins)\n\n\n\ncustom_theme <- bs_theme(\n  # Controls the default grayscale palette\n  bg = \"#202123\", fg = \"#B8BCC2\",\n  # Controls the accent (e.g., hyperlink, button, etc) colors\n  primary = \"#EA80FC\", secondary = \"#48DAC6\",\n  base_font = c(\"Grandstander\", \"sans-serif\"),\n  code_font = c(\"Courier\", \"monospace\"),\n  heading_font = \"'Helvetica Neue', Helvetica, sans-serif\",\n  # Can also add lower-level customization\n  \"input-border-color\" = \"#EA80FC\"\n)\n\n# Calculate column means for the value boxes\nmeans <- penguins |> \n  group_by(species) |> \n  summarise(mean = round(mean(flipper_length_mm, na.rm = T), 2))\n\n# ui.R ----\nui <- page_sidebar(\n  theme = custom_theme,\n  title = \"Penguins flipper dashboard\",\n  sidebar = sidebar(\n      demo_sp <- selectInput(inputId = \"species\",  # Give the input a name \"genotype\"\n                  label = \"1. Select species\",  # Give the input a label to be displayed in the app\n                  choices = c(\"Adelie\" = \"Adelie\", \"Chinstrap\" = \"Chinstrap\", \"Gentoo\" = \"Gentoo\"), selected = \"Adelie\"),  # Create the choices that can be selected. e.g. Display \"Adelie\" and link to value \"Adelie\"\n      demo_select <- selectInput(inputId = \"colour\", \n                  label = \"2. Select histogram colour\", \n                  choices = c(\"blue\",\"green\",\"red\",\"purple\",\"grey\"), selected = \"grey\"),\n      demo_slide <- sliderInput(inputId = \"bin\", \n                  label = \"3. Select number of histogram bins\", \n                  min=1, max=25, value= c(10)),\n      demo_text <- textAreaInput(inputId = \"text\", \n                label = \"4. Enter some text to be displayed\",\n                rows = 5,\n                placeholder = \"Enter some information here\"),\n      demo_button <- actionButton(\"update\", \"Plot\")\n    )\n  ,\n   layout_columns(\n    fill = FALSE,\n    value_box(\n      title = \"Adelie Flipper Length\",\n      value = scales::unit_format(unit = \"mm\")(means[[1,2]]),\n      showcase = bsicons::bs_icon(\"align-bottom\"),\n   \n    ),\n    value_box(\n      title = \"Chinstrap Flipper\",\n      value = scales::unit_format(unit = \"mm\")(means[[2,2]]),\n      showcase = bsicons::bs_icon(\"align-center\"),\n     \n    ),\n value_box(\n      title = \"Gentoo Flipper Length\",\n      value = scales::unit_format(unit = \"mm\")(means[[3,2]]),\n      showcase = bsicons::bs_icon(\"align-top\"),\n     \n    )\n  ),\n    \n    tags$ul(\n    tags$strong(textOutput(\"demo_sp\")),\n    textOutput(\"demo_text\")),\n \n      # Output elements go here\n      layout_columns(\n    card(\n      full_screen = TRUE,\n      card_header(\"Plot\"),\n      plotOutput(\"demo_plot\")\n    ),\n    card(\n      full_screen = TRUE,\n      card_header(\"Table\"),\n      DT::dataTableOutput(\"demo_table\",\n                    width = \"100%\",\n                    height = \"auto\")\n    )  \n)\n)\n  \n\n# server.R ----\n\n \n\nserver <- function(input, output) {\n  \n# Turn on thematic for theme-matched plots\nthematic::thematic_shiny()\n\n  observeEvent(input$update, {\n    \n    penguins_filtered <- penguins |>\n      filter(species == input$species)\n    \n     bins <- input$bin\n     \n     colour <- input$colour\n \n\n    output$demo_sp <- renderText({\n      paste(\"Figure 1.\", input$species)\n    })\n\n    output$demo_text <- renderText({\n      (input$text)\n    })\n\n    output$demo_plot <- renderPlot({\n        ggplot(penguins_filtered, aes(x = flipper_length_mm)) +\n        geom_histogram(fill = colour, colour = \"black\", show.legend = FALSE, bins = bins) +\n        labs(fill = \"Color\") \n    })\n\n    output$demo_table <- DT::renderDataTable({\n      penguins_filtered |> \n        summarise(flipper_length_mm = quantile(flipper_length_mm, c(0.25, 0.5, 0.75), na.rm = T), quantile = c(0.25, 0.5, 0.75))\n    })\n  })\n  \n}\n\n\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)"},{"path":"shiny-dashboards.html","id":"reading-3","chapter":"38 Shiny Dashboards","heading":"38.0.3 Reading","text":"Check bslib information (https://rstudio.github.io/bslib/index.html)well short article updates changes follow-along examples https://shiny.posit.co/blog/posts/bslib-dashboards/","code":""},{"path":"sharing.html","id":"sharing","chapter":"39 Sharing","heading":"39 Sharing","text":"","code":""},{"path":"sharing.html","id":"shiny-apps","chapter":"39 Sharing","heading":"39.1 Shiny Apps","text":"easiest way share apps (https://shinyapps.io)Open Tools > Global Options ...Go Publishing tabClick Connect button choose ShinyApps.ioClick link go accountClick Sign buttonYou now shinyapps.io dashboard; click name upper right choose TokensAdd tokenClick Show secret next token copy text clipboard\nGo back RStudio paste text box click Connect AccountMake sure box next \"Enable publishing...\" ticked, click Apply, close options window","code":"\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] bslib_0.5.0          palmerpenguins_0.1.1 shiny_1.7.4.1       \n##  [4] knitr_1.43           webexercises_1.1.0   glossary_1.0.0      \n##  [7] lubridate_1.9.2      forcats_1.0.0        stringr_1.5.0       \n## [10] dplyr_1.1.2          purrr_1.0.1          readr_2.1.4         \n## [13] tidyr_1.3.0          tibble_3.2.1         ggplot2_3.4.2       \n## [16] tidyverse_2.0.0     \n## \n## loaded via a namespace (and not attached):\n##  [1] sass_0.4.6        utf8_1.2.3        generics_0.1.3    xml2_1.3.5       \n##  [5] stringi_1.7.12    hms_1.1.3         digest_0.6.33     magrittr_2.0.3   \n##  [9] evaluate_0.21     grid_4.3.1        timechange_0.2.0  bookdown_0.34    \n## [13] fastmap_1.1.1     jsonlite_1.8.7    promises_1.2.0.1  fansi_1.0.4      \n## [17] scales_1.2.1      codetools_0.2-19  jquerylib_0.1.4   cli_3.6.1        \n## [21] rlang_1.1.1       ellipsis_0.3.2    munsell_0.5.0     withr_2.5.0      \n## [25] cachem_1.0.8      yaml_2.3.7        tools_4.3.1       tzdb_0.4.0       \n## [29] memoise_2.0.1     colorspace_2.1-0  httpuv_1.6.11     mime_0.12        \n## [33] vctrs_0.6.3       R6_2.5.1          lifecycle_1.0.3   fs_1.6.2         \n## [37] pkgconfig_2.0.3   later_1.3.1       pillar_1.9.0      gtable_0.3.3     \n## [41] Rcpp_1.0.11       glue_1.6.2        highr_0.10        xfun_0.39        \n## [45] tidyselect_1.2.0  rstudioapi_0.15.0 xtable_1.8-4      htmltools_0.5.5  \n## [49] rmarkdown_2.23    compiler_4.3.1    downlit_0.4.3"},{"path":"sharing.html","id":"github","chapter":"39 Sharing","heading":"39.2 Github","text":"GitHub great place organise share code using version control. can also use host Shiny app code others download run computer. can share ShinyApp way share R project.","code":""},{"path":"sharing.html","id":"in-an-r-package","chapter":"39 Sharing","heading":"39.3 In an R package","text":"can put app custom R package make even easier people run app. usethis package incredibly helpful setting packages. beyond scope class.","code":""},{"path":"sharing.html","id":"further-reading-1","chapter":"39 Sharing","heading":"39.4 Further Reading","text":"https://shiny.posit.co/blog/posts/bslib-dashboards/https://shiny.posit.co/blog/posts/bslib-dashboards/https://mastering-shiny.org/https://mastering-shiny.org/https://www.jumpingrivers.com/blog/r-shiny-customising-shinydashboard/#:~:text=%20main%20way%20of%20including,css%20by%20convention.https://www.jumpingrivers.com/blog/r-shiny-customising-shinydashboard/#:~:text=%20main%20way%20of%20including,css%20by%20convention.","code":""},{"path":"rmarkdown.html","id":"rmarkdown","chapter":"40 RMarkdown","heading":"40 RMarkdown","text":"R Markdown widely-used tool creating automated, reproducible, share-worthy outputs, reports. can generate static interactive outputs, Word, pdf, html, Powerpoint slides, many formats.R Markdown script combines R code text script actually becomes output document. can create entire formatted document, including narrative text (can dynamic change based data), tables, figures, bullets/numbers, bibliographies, etc.Documents produced Rmarkdown, allow analyses included easily - make link raw data, analysis & published report completely reproducible.Rmarkdown can make reproducible html, word, pdf, powerpoints websites dashboards3","code":""},{"path":"rmarkdown.html","id":"how-it-works","chapter":"40 RMarkdown","heading":"How it works","text":"create R Markdown document RStudio, go File > New File > R Markdown. Choose title, author, date, well default output format (HTML, PDF, Word). values can changed later. Click OK, RStudio create R Markdown document placeholder content.Delete content replace . example, let’s create report penguins using data palmerpenguins package. ’ve separated data year, ’ll use just 2007 data. Add following content add R Markdown document:document contains several sections, discuss . First, though, let’s skip finish line ’s called knitting document. Knit button top RStudio converts R Markdown document whatever format selected.make Rmd publish - hit knit button top docWe’ve set output format HTML (see output_format: html). features immediately visible R Markdown appear rendered document, including histogram. R Markdown document doesn’t directly include plot. Rather, includes code needed produce plot knitted.may seem convoluted constantly knit R Markdown documents Word, workflow allows us update reports point new code data. ability known reproducibility, central value R Markdown.","code":"---\ntitle: \"Penguins Report\"\nauthor: \"Phil\"\ndate: \"2024-01-12\"\noutput: word_document\n---\n  \n``{r setup, include = FALSE}\nknitr::opts_chunk$set(include = TRUE, \n                      echo = FALSE,\n                      message = FALSE,\n                      warning = FALSE)\n``\n\n``{r}\nlibrary(tidyverse)\n``\n\n``{r}\npenguins_raw <- read_csv(\"https://raw.githubusercontent.com/UEABIO/data-sci-v1/main/book/files/penguins_raw.csv\")\n``\n\n# Introduction\n\nWe are writing a report about the **Palmer Penguins**. These penguins are *really* amazing. There are three species:\n\n- Adelie\n- Gentoo\n- Chinstrap\n\n## Bill Length\n\nWe can make a histogram to see the distribution of bill lengths.\n\n``{r}\npenguins_raw |> \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n``\n\n``{r}\naverage_bill_length <- penguins_raw |> \n  summarize(avg_bill_length = mean(bill_length_mm,\n                                   na.rm = TRUE)) |> \n  pull(avg_bill_length)\n``\n\nThe chart shows the distribution of bill lengths. The average bill length is `r average_bill_length` millimeters."},{"path":"rmarkdown.html","id":"background-to-rmarkdown","chapter":"40 RMarkdown","heading":"Background to Rmarkdown","text":"Markdown “language” allows write document using plain text, can converted html formats. specific R. Files written Markdown ‘.md’ extension.Markdown “language” allows write document using plain text, can converted html formats. specific R. Files written Markdown ‘.md’ extension.R Markdown: variation markdown specific R - allows write document using markdown produce text embed R code display outputs. R Markdown files ‘.Rmd’ extension.R Markdown: variation markdown specific R - allows write document using markdown produce text embed R code display outputs. R Markdown files ‘.Rmd’ extension.rmarkdown - package: used R render .Rmd file desired output. ’s focus converting markdown (text) syntax, also need…rmarkdown - package: used R render .Rmd file desired output. ’s focus converting markdown (text) syntax, also need…knitr: R package Xie (2023) read code chunks, execute , ‘knit’ back document. tables graphs included alongside text.knitr: R package Xie (2023) read code chunks, execute , ‘knit’ back document. tables graphs included alongside text.Pandoc: Finally, pandoc actually convert output word/pdf/powerpoint etc. software separate R installed automatically RStudio.Pandoc: Finally, pandoc actually convert output word/pdf/powerpoint etc. software separate R installed automatically RStudio.process happens background (need know steps!) involves feeding .Rmd file knitr, executes R code chunks creates new .md (Markdown) file includes R code rendered output..md file processed pandoc create finished product: Microsoft Word document, HTML file, Powerpoint document, pdf, etc.","code":""},{"path":"rmarkdown.html","id":"rmarkdown-parts","chapter":"40 RMarkdown","heading":"Rmarkdown parts","text":"can see, three basic components Rmd file:YAMLYAMLMarkdown textMarkdown textR code chunks.R code chunks.","code":""},{"path":"rmarkdown.html","id":"yaml-metadata","chapter":"40 RMarkdown","heading":"YAML Metadata","text":"YAML section beginning R Markdown document. name YAML comes recursive acronym YAML ain’t markup language, whose meaning isn’t important purposes. Three dashes indicate beginning end, text inside contains metadata R Markdown document. YAML:can see, provides title, author, date, output format. elements YAML given key: value syntax, key label piece metadata (example, title) followed value quotes.example , clicked default output html file, can see YAML says output: html_document. However can also change say powerpoint_presentation word_document even pdf_document.\nCan edit YAML Rmarkdown file markdown folder \nname author, today’s date title file \ncalled “Penguins Palmer Archipelago, Antarctica”.\n","code":"\n---\ntitle: \"Penguins Report\"\nauthor: \"Philip Leftwich\"\ndate: \"2024-01-12\"\noutput: html_document\n---"},{"path":"rmarkdown.html","id":"code-chunks","chapter":"40 RMarkdown","heading":"Code chunks","text":"R Markdown documents different structure R script files might familiar (.R extension). R script files treat content code unless comment line putting pound sign (#) front . following code, first line comment second line code.R Markdown, situation reversed. Everything YAML treated text unless specify otherwise creating known code chunks. chunk opened line starts three back-ticks, curly brackets contain parameters chunk { }. chunk ends three back-ticks.R Markdown treats anything code chunk R code knit. example, code chunk produce histogram final Word document.\nnotes contents curly brackets { }:\n\nstart ‘r’ indicate language name within \nchunk R. possible include programming\nlanguage chunks SQL,\nPython Bash.\n\nr can optionally write chunk “name” – \nnecessary can help organise work. Note name\nchunks, ALWAYS use unique names else R \ncomplain try render.\n\nlanguage name optional chunk name put comma, \ncan include options , written tag=value, \n:\n\n\neval = FALSE run R code\n\n\neval = FALSE run R code\n\n\necho = FALSE print chunk’s R source code output\ndocument\n\n\necho = FALSE print chunk’s R source code output\ndocument\n\n\nwarning = FALSE print warnings produced R\ncode\n\n\nwarning = FALSE print warnings produced R\ncode\n\n\nmessage = FALSE print messages produced R\ncode\n\n\nmessage = FALSE print messages produced R\ncode\n\n\ninclude = either TRUE/FALSE whether include chunk outputs\n(e.g. plots) document\n\n\ninclude = either TRUE/FALSE whether include chunk outputs\n(e.g. plots) document\n\n\n.width = .height = - size ouput e.g. .width =\n“75%”\n\n\n.width = .height = - size ouput e.g. .width =\n“75%”\n\n\nfig.align = “center” adjust figure aligned across \npage\n\n\nfig.align = “center” adjust figure aligned across \npage\n\n\nfig.show=‘hold’ chunk prints multiple figures \nwant printed next (pair .width = c(“33%”,\n“67%”).\n\n\nfig.show=‘hold’ chunk prints multiple figures \nwant printed next (pair .width = c(“33%”,\n“67%”).\nspecial code chunk top R Markdown document, known setup code chunk, gives instructions happen knitting document.cases ’re using R Markdown generate report non-R user, likely want hide code, messages, warnings show output (include visualizations generate). , create setup code chunk looks like :include = FALSE option first line applies setup code chunk . tells R Markdown include output setup code chunk knitting. options within knitr::opts_chunk$set() apply future code chunks. However, can also override global code chunk options individual chunks. wanted document show plot code used make , set echo = TRUE code chunk :","code":"\n```{r}\n# Import our data\ndata <- read_csv(\"data.csv\")\n```\n```{r}\nlibrary(tidyverse)\n```\n```{r}\n\npenguins_raw |>  \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n```{r}\nknitr::opts_chunk$set(include = TRUE, \n                      echo = FALSE,\n                      message = FALSE,\n                      warning = FALSE)\n```\n```{r}\npenguins %>% \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```"},{"path":"rmarkdown.html","id":"text-2","chapter":"40 RMarkdown","heading":"Text","text":"narrative document, including titles headings. written “markdown” language, used across many different software.core ways write text. See extensive documentation available R Markdown “cheatsheets” RStudio website4.","code":""},{"path":"rmarkdown.html","id":"new-lines","chapter":"40 RMarkdown","heading":"New lines","text":"Uniquely R Markdown, initiate new line, enter *two spaces** end previous line Enter/Return.","code":""},{"path":"rmarkdown.html","id":"text-emphasis","chapter":"40 RMarkdown","heading":"Text emphasis","text":"Surround normal text characters change appears output.Underscores (_text_) single asterisk (*text*) italiciseDouble asterisks (**text**) bold textBack-ticks (` text `) display text codeThe actual appearance font can set using specific templates (specified YAML metadata).","code":""},{"path":"rmarkdown.html","id":"titles-and-headings","chapter":"40 RMarkdown","heading":"Titles and headings","text":"hash symbol text portion R Markdown script creates heading. different chunk R code script, hash symbol mechanism comment/annotate/de-activate, normal R script.Different heading levels established different numbers hash symbols start new line. One hash symbol title primary heading. Two hash symbols second-level heading. Third- fourth-level headings can made successively hash symbols.","code":"\n# First-level heading / Title\n\n## Second level heading  \n\n### Third-level heading\n"},{"path":"rmarkdown.html","id":"bullets-and-numbering","chapter":"40 RMarkdown","heading":"Bullets and numbering","text":"Use asterisks (*) created bullets list. Finish previous sentence, enter two spaces, Enter/Return twice, start bullets. Include space asterisk bullet text. bullet enter two spaces Enter/Return. Sub-bullets work way indented. Numbers work way instead asterisk, write 1), 2), etc. R Markdown script text might look.bullets (two spaces colon):","code":"* Bullet 1 (followed by two spaces and Enter/Return)  \n* Bullet 2 (followed by two spaces and Enter/Return)  \n  * Sub-bullet 1 (followed by two spaces and Enter/Return)  \n  * Sub-bullet 2 (followed by two spaces and Enter/Return)  "},{"path":"rmarkdown.html","id":"in-text-code","chapter":"40 RMarkdown","heading":"In-text code","text":"can also include minimal R code within back-ticks. Within back-ticks, begin code “r” space, RStudio knows evaluate code R code. See example .book printed `r Sys.Date()`typed -line within section otherwise Markdown text, knows produce r output instead:book printed 2023-11-09","code":""},{"path":"rmarkdown.html","id":"running-code","chapter":"40 RMarkdown","heading":"Running code","text":"can run code R Markdown document two ways. first way knitting entire document. second way run code chunks manually (also known interactively) hitting little green play button top-right code chunk. arrow next green play button run code point.one downside running code interactively can sometimes make mistakes cause R Markdown document fail knit. , order knit, R Markdown document must contain code uses. working interactively , say, load data separate file, unable knit document. working R Markdown, always keep code within single document.code must also always appear right order.","code":""},{"path":"rmarkdown.html","id":"useful-tips","chapter":"40 RMarkdown","heading":"Useful tips","text":"\nworking directory .rmd files little different working\nscripts.\n\n.Rmd file, working directory wherever Rmd\nfile saved.\n\nexample .Rmd file subfolder\n~/markdownfiles/markdown.Rmd code read_csv(“data/data.csv”)\nwithin markdown look .csv file \nsubfolder called data inside ‘markdown’ folder \nroot project folder .RProj file lives.\n\ntwo options using .Rmd files\n\n\nDon’t put .Rmd file subfolder make sure lives \ndirectory .RProj file - way relative filepaths \nR scripts Rmarkdown files\n\n\nDon’t put .Rmd file subfolder make sure lives \ndirectory .RProj file - way relative filepaths \nR scripts Rmarkdown files\n\n\nUse package describe file locations -\nlater\n\n\nUse package describe file locations -\nlater\n","code":""},{"path":"rmarkdown.html","id":"exercises-setting-code-chunks","chapter":"40 RMarkdown","heading":"Exercises: Setting code chunks","text":"Question 1. global option document set show R code used render chunks TRUEFALSEknitr::opts_chunk$set(echo = TRUE)Question 2. Options set individual code chunks override global options TRUEFALSEIn second chunk see echo = FALSE prevented code printed, see rendered outputQuestion 3. wanted see R code, output need select combo code chunk options? echo = TRUE, eval = TRUEecho = TRUE, eval = FALSEecho = FALSE, eval = FALSEecho = FALSE, eval = TRUEFor relatively simple report, may elect organize R Markdown script “self-contained” involve external scripts.Set Rmd file 'read' penguins data file.Everything need run R markdown imported created within Rmd file, including code chunks package loading. “self-contained” approach appropriate need much data processing (e.g. brings clean semi-clean data file) rendering R Markdown take long.scenario, one logical organization R Markdown script might :Set global knitr optionsSet global knitr optionsLoad packagesLoad packagesImport dataImport dataProcess dataProcess dataProduce outputs (tables, plots, etc.)Produce outputs (tables, plots, etc.)Save outputs, applicable (.csv, .png, etc.)Save outputs, applicable (.csv, .png, etc.)","code":""},{"path":"rmarkdown.html","id":"heuristic-file-paths-with-here","chapter":"40 RMarkdown","heading":"Heuristic file paths with here()","text":"package Müller (2020) function () (::()), make easy tell R find save files - essence, builds file paths. becomes especially useful dealing alternate filepaths generated .Rmd files, can used exporting/importing scripts, functions data.() works within R project:package first loaded within R project, places small file called “.” root folder R project “benchmark” “anchor”package first loaded within R project, places small file called “.” root folder R project “benchmark” “anchor”scripts, reference file R project’s sub-folders, use function () build file path relation anchorIn scripts, reference file R project’s sub-folders, use function () build file path relation anchorTo build file path, write names folders beyond root, within quotes, separated commas, finally ending file name file extension shown belowTo build file path, write names folders beyond root, within quotes, separated commas, finally ending file name file extension shown belowhere() file paths can used importing exportinghere() file paths can used importing exportingSo use () wrapped inside functions importing/exporting (like read_csv() ggsave()) include () can still use RProject location root directory 'knitting' Rmarkdown files, even markdown tidied away separate sub-folder.means previous relative filepaths replaced :\nTry replacing previous code examples \nre-knitting .Rmd file.\n\nmight want start using () now \nread export data scripts. Make sure consistent \nwhether use () heuristic file paths relative\nfile paths across .R .Rmd files project -\notherwise might encounter errors.\n","code":"```{r, include=FALSE}\n# GLOBAL KNITR OPTIONS ----\nknitr::opts_chunk$set(echo = TRUE)\n# ____________________----\n\n# PACKAGES ----\nlibrary(tidyverse)\nlibrary(here)\n\n``````{r, include=FALSE}\n# READ DATA ----\n\npenguins <- read_csv(here(\"data\", \"penguins_raw.csv\"))\n\nhead(penguins)\n\n```"},{"path":"rmarkdown.html","id":"activity-can-you-change-the-global-options-of-your-rmd-file-so-that-it-doesnt-display-any-code-warnings-or-messages","chapter":"40 RMarkdown","heading":"Activity: Can you change the global options of your Rmd file so that it doesn't display any code, warnings or messages?","text":"made edits chunk options try hitting 'knit' .","code":""},{"path":"rmarkdown.html","id":"ggplot","chapter":"40 RMarkdown","heading":"ggplot","text":"","code":""},{"path":"rmarkdown.html","id":"size-options-for-figures","chapter":"40 RMarkdown","heading":"Size options for figures","text":"fig.width fig.height enable set width height R produced figures.\ndefault value set 7 (inches). play options, prefer using one (fig.width).fig.width fig.height enable set width height R produced figures.\ndefault value set 7 (inches). play options, prefer using one (fig.width).fig.asp sets height--width ratio figure. ’s easier mind play ratio give width height separately. default value fig.asp NULL often set (0.8), often corresponds expected result.fig.asp sets height--width ratio figure. ’s easier mind play ratio give width height separately. default value fig.asp NULL often set (0.8), often corresponds expected result.Size options figures produced R consequences relative sizes elements figures. ggplot2 figure, elements remain size defined used theme, whatever chosen size figure. Therefore huge size can lead small text vice versa.\nbase font size 11 pts default. can change \nbase_size argument theme ’re using.\nfind result like, ’ll need combine sizes set theme set chunk options. customised theme, default size (7) looks good .texts axis longer figures overloaded, can choose bigger size (8 9) relatively reduce figure elements. ’s worth noting text sizes, can also modify base size theme obtain similar figures.","code":"\n# snake_case names need to be made\n\npenguins <- janitor::clean_names(penguins)\npenguin_colours <- c(\"darkolivegreen4\", \"darkorchid3\", \"goldenrod1\")\n\nplot <- penguins %>% \n  ggplot(aes(x=flipper_length_mm, \n             y = body_mass_g))+\n  geom_point(aes(colour=species))+\n  scale_color_manual(values=penguin_colours)+\n  theme_minimal(base_size = 11)```{r fig.asp = 0.8, fig.width = 3}\nplot\n# figure elements are too big\n``````{r fig.asp = 0.8, fig.width = 10}\nplot\n# figure elements are too small\n``````{r fig.asp = 0.8, fig.width = 7}\nplot\n``````{r fig.asp = 0.8, fig.width = 7}\nplot + theme(base_size = 14)\n# figure width stays the same, but modify the text size in ggplot\n```"},{"path":"rmarkdown.html","id":"size-of-final-figure-in-document","chapter":"40 RMarkdown","heading":"Size of final figure in document","text":"previous examples, see relative size elements within th figures changed - area occupied figures remained . order change need .width .heightFigures made R R Markdown document exported (default png format) inserted final rendered document. Options .width .height enable us choose size figure final document.rare need re-scale height--width ratio figures produced R ratio kept modify one option therefore use .width. like use percentage define size output figures. example hre size set 50%","code":"```{r fig.asp = 0.8, fig.width = 7, out.width = \"50%\"}\nplot \n# The final rendered size of the image changes according to out.width\n```"},{"path":"rmarkdown.html","id":"changing-default-values-of-chunk-options","chapter":"40 RMarkdown","heading":"Changing default values of chunk options","text":"can also change default values chunk options writing beginning R Markdown document.values applied chunks unless specify value chunk locally. can set values often used (differ default one) avoid repeating chunk.","code":"```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n fig.width = 6,\n fig.asp = 0.8,\n out.width = \"80%\"\n)\n```"},{"path":"rmarkdown.html","id":"static-images","chapter":"40 RMarkdown","heading":"Static images","text":"can include images R Markdown:","code":"```{r setup, include=FALSE}\nknitr::include_graphics(\"path/to/image.png\")\n```"},{"path":"rmarkdown.html","id":"tables","chapter":"40 RMarkdown","heading":"Tables","text":"","code":""},{"path":"rmarkdown.html","id":"markdown-tables","chapter":"40 RMarkdown","heading":"Markdown tables","text":"render ","code":"| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\n"},{"path":"rmarkdown.html","id":"gt","chapter":"40 RMarkdown","heading":"gt()","text":"gt Iannone et al. (2023) package making simple produce nice-looking display tables. lot customisation options.\nwon’t able see tables unless try re-knitting \n.Rmd file.\n","code":"\npenguins |>  \n    group_by(species) |>  \n    summarise(`Body Mass (g)`= mean(body_mass_g, na.rm = T),\n              `Flipper Length (mm)`= mean(flipper_length_mm, na.rm = T)) |>  \n  gt::gt()"},{"path":"rmarkdown.html","id":"source-files","chapter":"40 RMarkdown","heading":"Source files","text":"One variation “self-contained” approach R Markdown code chunks “source” (run) R scripts.can make R Markdown script less cluttered, simple, easier organize. can also help want display final figures beginning report.approach, final R Markdown script simply combines pre-processed outputs document. already used source() function feed R objects one script another, now can thing report.advantage data cleaning organising happens \"elsewhere\" need repeat code. make changes analysis scripts, reflected changes report next time compile (knit) .\nDon’t try using () unless script\ndependencies ALSO use . knitting Rmd file treats \nabsolute file path relative .Rmd file (even running\nscripts written outside document).\n\n’s usually simpler save .Rmd file \nplace .RProj file\n","code":"source(\"scripts/your-script.R\")"},{"path":"rmarkdown.html","id":"activity-connecting-scripts-and-reports","chapter":"40 RMarkdown","heading":"Activity: Connecting scripts and reports","text":"Create new Rmarkdown file.Create new Rmarkdown file.Create new .R fileCreate new .R fileSave (without changes) folder .Rproj file call linked_report_penguins.Rmd.Save (without changes) folder .Rproj file call linked_report_penguins.Rmd.\nnow source pre-written scripts data loading wrangling\nR project, just use source command read script -\ncan call objects made externally - case penguin plot\n- put code block hit knit.\n","code":"```{r setup, include=FALSE}\n# GLOBAL KNITR OPTIONS ----\nknitr::opts_chunk$set(echo = TRUE)\n# ____________________----\n\n``````{r read-data, include=FALSE}\n# READ DATA ----\n\nsource(\"scripts/penguins.R\")\n\n```"},{"path":"rmarkdown.html","id":"activity-test-yourself-2","chapter":"40 RMarkdown","heading":"Activity: Test yourself","text":"Make summary figure want penguins () data ggplotMake summary figure want penguins () data ggplotMake summary table summarise make beautiful gt()Make summary table summarise make beautiful gt()Write sentences explaining presentingWrite sentences explaining presentingKnit report htmlKnit report htmlUse chunk options optimise figure layout text make raw code rendered outputs visible. example literate programmingUse chunk options optimise figure layout text make raw code rendered outputs visible. example literate programming","code":""},{"path":"rmarkdown.html","id":"hygiene-tips","chapter":"40 RMarkdown","heading":"Hygiene tips","text":"recommend three chunks top documentGlobal chunk optionsGlobal chunk optionsAll packagesAll packagesReading dataReading data","code":"\n```{r setup , include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, \n                      fig.align = \"center\",\n                      fig.width = 6,\n                      fig.asp = 0.8,\n                      out.width = \"80%\n                      )\n                      \n```\n\n```{r library}\nlibrary(tidyverse)\n```\n\n```{r read-data}\nsource(\"scripts/02_visualisation_penguins.R\")\n```"},{"path":"rmarkdown.html","id":"common-knit-issues","chapter":"40 RMarkdown","heading":"Common knit issues","text":"issues cause Rmd document fail knit entirety. failed knit usually easy fix, needs READ error message, little detective work.","code":""},{"path":"rmarkdown.html","id":"duplication","chapter":"40 RMarkdown","heading":"Duplication","text":"","code":"\n```{r title-one}\n```\n\n```{r title-one}\n```"},{"path":"rmarkdown.html","id":"not-the-right-order","chapter":"40 RMarkdown","heading":"Not the right order","text":"","code":"plot(my_table)\n\nmy_table <- table(mtcars$cyl)"},{"path":"rmarkdown.html","id":"forgotten-trails","chapter":"40 RMarkdown","heading":"Forgotten trails","text":": Missing “,”, “(”, “}”, “’”","code":""},{"path":"rmarkdown.html","id":"path-not-taken","chapter":"40 RMarkdown","heading":"Path not taken","text":"Rmd document different location .Rproj file causing issues relative filepaths","code":""},{"path":"rmarkdown.html","id":"spolling","chapter":"40 RMarkdown","heading":"Spolling","text":"Incorrectly labelled chunk optionsIncorrectly labelled chunk optionsIncorrectly evaluated R codeIncorrectly evaluated R code","code":""},{"path":"rmarkdown.html","id":"visual-editor","chapter":"40 RMarkdown","heading":"Visual editor","text":"RStudio comes pretty nifty Visual Markdown Editor includes:SpellcheckSpellcheckEasy table & equation insertionEasy table & equation insertionEasy citations reference list buildingEasy citations reference list buildingYou can switch modes button push, try !","code":""},{"path":"rmarkdown.html","id":"quarto","chapter":"40 RMarkdown","heading":"Quarto","text":"visual editor precursor new type publishing tool - Quarto. tool takes R Markdown done R extends languages, including Python, Julia, Observable JS. write book, Quarto gaining traction. Luckily, concepts ’ve learned chapter apply Quarto well. Quarto documents YAML section, code chunks, Markdown text. can export Quarto documents HTML, PDF, Word. However, R Markdown Quarto documents syntactic differences.","code":""},{"path":"rmarkdown.html","id":"extended-outputs","chapter":"40 RMarkdown","heading":"40.1 Extended outputs","text":"Rmarkdown Quarto can produce vast number different file ouputs including:Slides - xaringan reveal.jsSlides - xaringan reveal.jsDashboardsDashboardsWebsitesWebsitesE-booksE-booksJournal papersJournal papersI recommend reading list expanding abilities reproducible documents:","code":""},{"path":"rmarkdown.html","id":"further-reading-guides-and-tips","chapter":"40 RMarkdown","heading":"Further Reading, Guides and tips","text":"R Cheat SheetsR Cheat SheetsRmarkdown: Definitive Guide https://bookdown.org/yihui/rmarkdown/Rmarkdown: Definitive Guide https://bookdown.org/yihui/rmarkdown/(https://rmarkdown.rstudio.com/articles_intro.html)(https://rmarkdown.rstudio.com/authoring_quick_tour.html)https://www.apreshill.com/blog/2022-04--dont-talk--quarto/https://www.apreshill.com/blog/2022-04--dont-talk--quarto/https://www.njtierney.com/post/2022/04/11/rmd--qmd/https://www.njtierney.com/post/2022/04/11/rmd--qmd/https://www.jumpingrivers.com/blog/quarto-rmarkdown-comparison/https://www.jumpingrivers.com/blog/quarto-rmarkdown-comparison/","code":""},{"path":"github-1.html","id":"github-1","chapter":"41 Github","heading":"41 Github","text":"","code":""},{"path":"github-1.html","id":"lets-git-it-started","chapter":"41 Github","heading":"41.1 Let's Git it started","text":"Git version control system. Originally built help groups developers work collaboratively big software projects. helps us manage RStudio projects - tracked changes.Git GitHub big part data science community. can use GitHub number waysTo source code repurpose analyses built others usesTo source code repurpose analyses built others usesManage analysis projects parts :\n🔢 Data\n✍ ️Scripts\n📊 Figures\n📝 ReportsManage analysis projects parts :🔢 Data✍ ️Scripts📊 Figures📝 ReportsAre version controlled open accessVersion control lets recover mistakes & analysis backed externallyVersion control lets recover mistakes & analysis backed externallyWhen come publish reports - analysis accessible othersWhen come publish reports - analysis accessible othersBuild library projects show can Data ScienceBuild library projects show can Data ScienceIf work alone, git great track changes recover previous version files. can also use remote repository back share work.work team can take advantage also use version control tool collaborate organize various versions file present multiple computers use.","code":""},{"path":"github-1.html","id":"what-is-version-control","chapter":"41 Github","heading":"41.2 What is version control?","text":"Let’s imagine git repository. create new file part repository (repo), file untracked. means git ignore file change make add repo. point file staged ready get repository. commit save version file repo. workflow modify --> add --> commit repeat every time want save version file. good idea commit every time end task objective project.add commit also git commands.RStudio provides basic GUI git, going use workshop. can also use Terminal talk git command line\nadd file staging area.\n\ngit add \ngit commit -m “descriptive message commit files \nstaging area.”\n","code":""},{"path":"github-1.html","id":"remote-repositories","chapter":"41 Github","heading":"41.3 Remote repositories","text":"explained local workflow. repo lives computer ’s . can also connect local repository remote repository. workshop going use GitHub host remote repositories, options can explore, GitLab.Let’s imagine local repository, made commits want send changes remote repository (’ll create remote repository later). push commits remote repository two repos “date”.team-mate changes file pushes changes remote repository, local repo “outdated”. download new commits remote repository pull commits.want try command line:\nupload commits remote repository.\n\ngit push\n\ndownload commits remote repository local repo.\n\ngit pull\n","code":""},{"path":"github-1.html","id":"git-introductions","chapter":"41 Github","heading":"41.4 Git introductions","text":"create first repository need make sure git RStudio friends git knows . means :Installed Git machine (needed using Posit Cloud)Installed Git machine (needed using Posit Cloud)Created Github Account - go github.comCreated Github Account - go github.com\ncan check RStudio “sees” git going Tools –> Global\nOptions –> Git/SVN. find path computer\ngit installation.\ncan now introduce Github usethis packageSubstituting name email associated GitHub account, can also command line:\ngit config –global user.name ‘Jane Doe’\n\ngit config –global user.email ’jane@example.com\nalso need Personal Access Token (PAT), Github started using lieu passwords.Create PAT withThis likely open new window allowing create token. now close window, need copy token clipboard. run command:ask access token. Go previous window, copy token, paste console press enter.Finally, check everything’s ok command.Irritatingly PAT seems forgotten linux systems quickly, Posit Cloud hosted :simple solution problem ask git store information cache just teeny tiny little bit longer. Instead cache expire default 900 seconds, maybe set expire 10 million seconds. way, ’ll refresh cache using gitcreds::gitcreds_set() every four months instead four times hour. Implementing solution requires one line code terminal:Thanks https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/ bit information!","code":"\nlibrary(usethis) \nuse_git_config(user.name  = \"Jane Doe\",\n               user.email = \"jane@example.org\")\nusethis::create_github_token()\ngitcreds::gitcreds_set()\nusethis::gh_token_help()\ngit config --global credential.helper 'cache --timeout=10000000'\n"},{"path":"github-1.html","id":"create-a-new-repository","chapter":"41 Github","heading":"41.5 Create a new repository","text":"many ways start new repository, easiest Github first","code":""},{"path":"github-1.html","id":"create-an-online-repository.","chapter":"41 Github","heading":"41.5.1 1. Create an online repository.","text":"Go github.com log .Go github.com log .top right corner, click “+” bottom “New repository”top right corner, click “+” bottom “New repository”:Repository template: template.Repository template: template.Repository name: myrepo whatever wish name new project.Repository name: myrepo whatever wish name new project.Description: short description project. Write humans.Description: short description project. Write humans.Public.Public.Initialize repository : nothing (can set everything R).Initialize repository : nothing (can set everything R).going back RStudio, copy url repository.","code":""},{"path":"github-1.html","id":"section","chapter":"41 Github","heading":"41.5.2 2.","text":"File > New Project > Version Control > Git. “repository URL” paste URL new GitHub repositoryFile > New Project > Version Control > Git. “repository URL” paste URL new GitHub repositoryChoose folder want create project.Choose folder want create project.Choose “Open new session”.Choose “Open new session”.Click “Create Project”.Click “Create Project”.new folder computer git repository, linked remote GitHub repository RStudio Project time. workflow also makes sure configuration local remote repos done correctly.also adds .gitignore file includes list files don’t need track (.e. .Rhistory).\n.gitignore file can good place store PAT file. Make\nplain text file write token code, save anything \nlike e.g. token.txt. Add name .gitignore file \nsave locally never pushed repo. Watch Git pane\nRstudio check tracked.\n","code":""},{"path":"github-1.html","id":"local-changes","chapter":"41 Github","heading":"41.5.3 Local changes","text":"Create new .Rmd fileCreate new .Rmd fileSave fileSave fileAdd staging area selecting file Git paneAdd staging area selecting file Git paneSelect commit write descriptive message commit message paneSelect commit write descriptive message commit message paneAt point able see files staging area, selecting one, line line differences changes made since last commitNow Push - push commits remote repository. see changes Github push commits.","code":""},{"path":"github-1.html","id":"remote-changes","chapter":"41 Github","heading":"41.6 Remote changes","text":"head back GitHub now. refresh page, now ’ll see files committed just now. Let’s click “Commits” see history repository. view, can explore repository “state” commit look file differences.Now, can try make changes github.com","code":""},{"path":"github-1.html","id":"create-a-readme","chapter":"41 Github","heading":"41.6.1 Create a README","text":"main page, click green bottom says “Add README”.main page, click green bottom says “Add README”.Add something file. READMEs usually written Markdown contain information repo.Add something file. READMEs usually written Markdown contain information repo.end page add message first line click “Commit new file”.end page add message first line click “Commit new file”.Come back main page see README.Come back main page see README.new file changes GitHub remote repository make pull local repo. make changes local repo date, may encounter merge conflicts, lead headaches. happens version file local repo compatible version remote repo. cases, git decide version right one .avoid problem (time), pull everytime load project anything else. time message \"Already -date\", good habit.Now head GitPane RStudio select blue \"Pull\" button. README appear files.","code":""},{"path":"github-1.html","id":"collaborating-on-a-repo","chapter":"41 Github","heading":"41.7 Collaborating on a repo","text":"collaborating project can find one two scenariosYou write permission repo working .write permission repo working .don’t write permission repo.don’t write permission repo.first situation common working together team long term project. can clone repo following instructions use workflow . try push changes remote repository, GitHub check rights modify repo. difference working need communicate well two people working thing. Otherwise lead merge conflicts.second situation common contributing strangers' projects, fixing bugs open source packages. case, need first fork repository, creates remote repository linked GitHub account complete access. Now work fork using normal workflow: modify, add, commit push. changes integrate original repository, need create pull request (PR). let owner original repo made changes think merged. owner can accept, reject ask modifications. accept Pull Request, modifications safe original repository.","code":""},{"path":"github-1.html","id":"working-with-an-external-collaborator","chapter":"41 Github","heading":"41.7.1 Working with an external collaborator","text":"1. Go github.com log (need account - sign uea.ac.uk e-mail)2. Search bar, look repo Philip-Leftwich/5023Y-Happy-Git3. Click repo name, look existing repo structure4. FORK repo","code":""},{"path":"github-1.html","id":"what-the-hell-is-a-fork","chapter":"41 Github","heading":"41.7.2 What the hell is a fork?","text":"fork generate personal copy another user's repository.5. Press Clone/download copy URL, create new project RStudio Cloud selecting New project Git repository option - make sure 5023Y Workspace6. Open some_cool_animals.Rmd document, accompanying html7. Add name top document8. WAIT. forgotten add favourite animal facts! Make new tab markdown file add image information9. ’ve added updates, knit Rmd document update html10. Stage, Commit & Push files (glossary)Staged - pick files intend bind commitCommit - write short descriptive message, binds changes single commitPush - \"Pushes\" changes local repo remote repo GitHub, (push)11. GitHub, refresh see files updated. Cool! Now ’ve used something someone else created, customized , saved updated version.","code":""},{"path":"github-1.html","id":"make-a-pull-request","chapter":"41 Github","heading":"41.7.3 Make a pull request","text":"1. Go repo GitHub, see made last commit message ahead project:2. Click “Open pull request”.3. click “Create pull request”.4. almost . Complete pull request title message finish pull request.owner/s repo receive email. can review pull request, comment eventually accept contribution. happen changes made appear repo.","code":""},{"path":"github-1.html","id":"see-changes","chapter":"41 Github","heading":"41.8 See changes","text":"first immediate benefit using GitHub RStudio Project seeing changes made since last commit.RStudio Git pane lists every file ’s added, modified deleted. icon describes change:changed file\nadded new file Git seen \ndeleted file\ncan get details changes made file right-clicking selecting diffThis opens new window highlighting differences current file previous commit.background colours tells whether text added (green) removed (red). (’re colourblind can use line numbers two columns far left guide).","code":""},{"path":"github-1.html","id":"a-couple-of-general-tips","chapter":"41 Github","heading":"41.9 A couple of general tips:","text":"\n\nPull start every session \nretrieves master repo GitHub - update end \nevery session. helps prevent conflicts\n\n\nPull start every session \nretrieves master repo GitHub - update end \nevery session. helps prevent conflicts\n\n\nCommit/push small, meaningful increments \noften. can make multiple commits \nsession - always push end \nsession\n\n\nCommit/push small, meaningful increments \noften. can make multiple commits \nsession - always push end \nsession\n\n\nway GitHub Repo becomes master\ncopy project.\n\n\nway GitHub Repo becomes master\ncopy project.\n","code":""},{"path":"github-1.html","id":"beautify-your-profile","chapter":"41 Github","heading":"41.10 Beautify your profile","text":"can share information community GitHub.com creating profile README. GitHub shows profile README top profile page.decide information include profile README, full control present GitHub. examples information visitors may find interesting, fun, useful profile README.\"\" section describes work interestsContributions proud , context contributionsGuidance getting help communities involvedHandy links:https://dev./ruppysuppy/beautify--github-profile-like--pro-5093https://docs.github.com/en/account--profile/setting---managing--github-profile/customizing--profile/managing--profile-readme","code":""},{"path":"github-1.html","id":"get-a-doi-from-your-github-project","chapter":"41 Github","heading":"41.11 Get a DOI from your Github project","text":"well organised contained analysis project made repository Github becomes one-click button process generate permanent DOI repositories Zenodo Figshare. great payoff spent time organising projects beginning!","code":""},{"path":"github-1.html","id":"glossary-github","chapter":"41 Github","heading":"41.12 Glossary-GitHub","text":"","code":""},{"path":"github-1.html","id":"reading-4","chapter":"41 Github","heading":"41.13 Reading","text":"Happy Git","code":""},{"path":"github-1.html","id":"bonus-exercise","chapter":"41 Github","heading":"41.14 BONUS EXERCISE","text":"great exercise practising dealing merge conflicts collaborating. complete exercise need partnerhttps://learning.nceas.ucsb.edu/2023-04-coreR/session_10.html","code":""},{"path":"reading-5.html","id":"reading-5","chapter":"42 Reading","heading":"42 Reading","text":"cover different approaches working really big data R. Instead provided list extra reading exercises cover depth, well introductions using SQL dplyr functions:https://www.r-bloggers.com/2020/09/-fastest-way--read--writes-file--r/https://www.r-bloggers.com/2019/05/--save--load-datasets--r--overview/http://www.sthda.com/english/wiki/saving-data--r-data-format-rds--rdatahttps://waterdata.usgs.gov/blog/formats/https://inbo.github.io/tutorials/tutorials/r_large_data_files_handling/https://bookdown.org/csgillespie/efficientR/preface.htmlhttps://github.com/sbreitbart/DataSci_for_Ecologists/blob/main/SQL_intro/SQL_intro.rmd","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"packages-for-automated-exploratory-data-analysis","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43 Packages for Automated Exploratory Data Analysis","text":"realm data science, use automated exploratory analysis gaining prominence powerful approach. methodology offers way data analysts scientists rapidly gain insights datasets, particularly working tidyverse tools, without need laborious manual inspections individual variables creation numerous plots. aim streamline speed workflow, making data exploration efficient effective. achieve , data professionals turn specific R packages skimr, ggally, dataxray.skimr: skimr package tailored provide concise informative summary dataset's variables. supplies variety functions generating descriptive statistics, data type details, visual representations. empowers efficiently grasp structure characteristics data, aligning tidyverse principles. Skimr particularly valuable gaining initial understanding dataset spotting potential issues patterns.ggally: Known \"ggplot2 extension exploring correlations,\" ggally R package extends capabilities well-known ggplot2 package. already familiar tidyverse, appreciate ggally's seamless integration tidy data principles. primarily used create visualizations plots exploring relationships correlations among variables. ggally, can readily produce scatterplots, density plots, types graphs shed light connections within data.dataxray: data professionals using tidyverse tools, dataxray package natural extension workflow. new R package provides quick statistical summaries interactive table inside Rstudio Viewer Pane.Together, R packages serve streamline automate exploratory analysis process within tidyverse framework. make data exploration efficient effective, enabling data scientists analysts swiftly gain insights datasets, pinpoint potential problems, lay foundation -depth analyses modeling. Automated exploratory analysis, seamlessly integrated tidyverse tools, plays pivotal role data analysis workflow, providing deeper understanding data guiding informed decisions subsequent steps analysis modeling tasks.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"skimr-for-automated-data-quality-checking","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.1 Skimr for automated data quality checking","text":"Skimr preferred R package quickly assessing data quality, serving initial step exploratory data analysis. proceeding tasks, rely skimr conduct thorough data quality check.Table 43.1: Data summaryVariable type: characterVariable type: DateVariable type: factorVariable type: numericWe can end dedicating significant amount time tasks data comprehension, exploration, wrangling, preparation analysis.However, can significantly expedite process. every single data project undertake, rely skimr, go-solution achieving efficiency speed.","code":"\ninstall.packages(\"skimr\")\nlibrary(skimr)\nskimr::skim(penguins)"},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"how-skimr-works","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.1.1 How Skimr works","text":"One best features Skimr capability generate comprehensive Data Quality Report just single line code. automation encompasses:Data ProfilingData ProfilingCompatibility Numeric, Categorical, Text, Date, Nested List Columns, even dplyr groupsCompatibility Numeric, Categorical, Text, Date, Nested List Columns, even dplyr groupsIn essence, remarkable functionality translates significant time savings data scientists 🕒Assessing data skimr makes simple quality checks easy!","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"reporting","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.1.2 Reporting","text":"penguins dataset lot information , 344 rows data 19 independent variables. multiple data types frequent missing data. skimr::skim() get overall data summary th number rows, columns, data types column group variables.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"character-summaries","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.1.2.1 Character summaries","text":"Missing/completion rate, number unique observations, text features.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"factor-summaries","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.1.2.2 Factor summaries","text":"data recognised factorial get missing/completion rate, whether factor ordered, numbr unique levels number observations factor","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"date-summaries","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.1.2.3 Date summaries","text":"Missing/completion rates, min/max dates, number unique dates.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"numeric-summaries","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.1.2.4 Numeric summaries","text":"Missing/completion rates distributions.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"ggally-for-exploratory-analysis","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.2 GGally for exploratory analysis","text":"GGally another invaluable tool researcher's toolkit. seamlessly extends capabilities widely used ggplot2 package. GGally, can effortlessly create variety visualizations explore understand distributions correlations among variables. flexibility ease use make go-choice streamlining process creating insightful plots charts data analysis.","code":""},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"pairs","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.2.1 pairs","text":"","code":"\npenguins |> \n  select(where(is.numeric)) |> \n  pairs()\npenguins |> \n  select(c(10,11,12,13)) |> \n  pairs()"},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"ggally","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.2.2 GGally","text":"far, used pairs function comes together base installation R. However, ggplot2 GGally packages provide even advanced pairs function, called ggpairs(). Let’s install load packages:","code":"\nlibrary(GGally)\npenguins |> \n  select(species, island, culmen_length_mm, culmen_depth_mm, flipper_length_mm, body_mass_g, sex) |> \n  ggpairs()\npenguins |> \n  ggpairs(columns = 10:12, ggplot2::aes(colour = species))\npenguins |> \n  ggpairs(columns = 10:12, upper = \"blank\")\npenguins |> \n  ggpairs(columns = 10:14, columnLabels = c(\"Bill length\", \"Bill depth\", \"Flipper length\", \"Body mass\", \"Sex\"))\npenguins |> \n  ggpairs(columns = 10:14, upper = list(continuous = \"density\", combo = \"box_no_facet\"),\n          lower = list(continuous = \"points\", combo = \"dot_no_facet\"))\npenguins |> \n  ggpairs(columns = 10:14, upper = list(continuous = \"density\", combo = \"box_no_facet\"),\n          lower = list(continuous = \"points\", combo = \"dot_no_facet\"),\n          ggplot2::aes(colour = species))\npenguins |> \n  ggpairs(columns = 10:14, axisLabels = \"internal\")"},{"path":"packages-for-automated-exploratory-data-analysis.html","id":"dataxray","chapter":"43 Packages for Automated Exploratory Data Analysis","heading":"43.3 dataxray","text":"dataxray new R package provides quick statistical summaries interactive table inside Rstudio Viewer Pane. use package need install Github, means need devtools package devtools::install_github()dataxray emphasises interactive exploration exploratory summaries. goes beyond skimr can adding interactive exploration element feature summaries. like interactivity, try dataxray.just two functions require packagedataxray::make_xray() convert raw data preformatted data reactable interactive tabledataxray::make_xray() convert raw data preformatted data reactable interactive tabledataxray::view_xray() display interactive exploratory table using underlying reactable library.dataxray::view_xray() display interactive exploratory table using underlying reactable library.Now can explore column see:Count Percent Missing - many NA valuesCount Percent Missing - many NA valuesNumber Distinct - many unique observationsNumber Distinct - many unique observationsCategorical Data - Bar charts frequency categoryCategorical Data - Bar charts frequency categoryNumeric Data - Distribution histogram quantilesNumeric Data - Distribution histogram quantilesExpandable Groups - can expand groups find information featuresExpandable Groups - can expand groups find information featuresSearch Features - Use regex search name. Great lot features (columns)Search Features - Use regex search name. Great lot features (columns)","code":"\n# install.packages(\"devtools\")\n# devtools::install_github(\"agstn/dataxray\")\nlibrary(dataxray)\npenguins |> \n  make_xray() |> \n  view_xray()\nsessionInfo()## R version 4.3.1 (2023-06-16)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Ubuntu 20.04.6 LTS\n## \n## Matrix products: default\n## BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \n## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n## \n## locale:\n##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n## \n## time zone: UTC\n## tzcode source: system (glibc)\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n##  [1] janitor_2.2.0      dataxray_0.1.0     skimr_2.1.5        GGally_2.1.2      \n##  [5] knitr_1.43         webexercises_1.1.0 glossary_1.0.0     lubridate_1.9.2   \n##  [9] forcats_1.0.0      stringr_1.5.0      dplyr_1.1.2        purrr_1.0.1       \n## [13] readr_2.1.4        tidyr_1.3.0        tibble_3.2.1       ggplot2_3.4.2     \n## [17] tidyverse_2.0.0   \n## \n## loaded via a namespace (and not attached):\n##  [1] tidyselect_1.2.0    viridisLite_0.4.2   farver_2.1.1       \n##  [4] fastmap_1.1.1       lazyeval_0.2.2      reshape_0.8.9      \n##  [7] promises_1.2.0.1    digest_0.6.33       rpart_4.1.19       \n## [10] timechange_0.2.0    mime_0.12           lifecycle_1.0.3    \n## [13] cluster_2.1.4       ellipsis_0.3.2      magrittr_2.0.3     \n## [16] compiler_4.3.1      rlang_1.1.1         Hmisc_5.1-1        \n## [19] sass_0.4.6          tools_4.3.1         utf8_1.2.3         \n## [22] yaml_2.3.7          data.table_1.14.8   labeling_0.4.2     \n## [25] htmlwidgets_1.6.2   here_1.0.1          plyr_1.8.8         \n## [28] xml2_1.3.5          repr_1.1.6          RColorBrewer_1.1-3 \n## [31] withr_2.5.0         foreign_0.8-84      nnet_7.3-19        \n## [34] grid_4.3.1          fansi_1.0.4         xtable_1.8-4       \n## [37] colorspace_2.1-0    MASS_7.3-60         scales_1.2.1       \n## [40] isoband_0.2.7       cli_3.6.1           rmarkdown_2.23     \n## [43] generics_0.1.3      rstudioapi_0.15.0   httr_1.4.6         \n## [46] tzdb_0.4.0          cachem_1.0.8        base64enc_0.1-3    \n## [49] vctrs_0.6.3         jsonlite_1.8.7      bookdown_0.34      \n## [52] hms_1.1.3           Formula_1.2-5       htmlTable_2.4.1    \n## [55] plotly_4.10.2       jquerylib_0.1.4     glue_1.6.2         \n## [58] codetools_0.2-19    stringi_1.7.12      gtable_0.3.3       \n## [61] later_1.3.1         downlit_0.4.3       munsell_0.5.0      \n## [64] pillar_1.9.0        htmltools_0.5.5     reactable_0.4.4    \n## [67] R6_2.5.1            reactablefmtr_2.0.0 rprojroot_2.0.3    \n## [70] evaluate_0.21       shiny_1.7.4.1       highr_0.10         \n## [73] backports_1.4.1     snakecase_0.11.0    memoise_2.0.1      \n## [76] httpuv_1.6.11       bslib_0.5.0         Rcpp_1.0.11        \n## [79] gridExtra_2.3       checkmate_2.2.0     xfun_0.39          \n## [82] fs_1.6.2            pkgconfig_2.0.3"}]
